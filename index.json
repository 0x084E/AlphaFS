{
  "articles/powershell/examples.html": {
    "href": "articles/powershell/examples.html",
    "title": "PowerShell Examples | AlphaFS",
    "keywords": "PowerShell Examples This section contains various examples of how to perfom some common tasks in PowerShell using AlphaFS. Show static methods from Directory class. PS C:\\> [Alphaleonis.Win32.Filesystem.Directory] | gm -Static -MemberType Method TypeName: Alphaleonis.Win32.Filesystem.Directory Name MemberType Definition ---- ---------- ---------- Compress Method static void Compress(string path, Alphaleonis.Win32.Filesystem.Directory... Copy Method static void Copy(string sourcePath, string destinationPath), static void... CountFileSystemObjects Method static long CountFileSystemObjects(string path, Alphaleonis.Win32.Filesy... CreateDirectory Method static Alphaleonis.Win32.Filesystem.DirectoryInfo CreateDirectory(string... ... Get all overloaded methods of a particular method PS C:\\> [Alphaleonis.Win32.Filesystem.Directory]::Copy OverloadDefinitions ------------------- static void Copy(string sourcePath, string destinationPath) static void Copy(string sourcePath, string destinationPath, Alphaleonis.Win32.Filesystem.PathFormat pathFormat) static void Copy(string sourcePath, string destinationPath, bool overwrite) static void Copy(string sourcePath, string destinationPath, bool overwrite, Alphaleonis.Win32.Filesystem.PathFormat pathFormat) static void Copy(string sourcePath, string destinationPath, Alphaleonis.Win32.Filesystem.CopyOptions copyOptions) static void Copy(string sourcePath, string destinationPath, Alphaleonis.Win32.Filesystem.CopyOptions copyOptions, Alphaleonis.Win32.Filesystem.PathFormat pathFormat) ... AlphaFS References # Call the CreateDirectory() method from the Directory class. PS C:\\> [Alphaleonis.Win32.Filesystem.Directory]::CreateDirectory('C:\\MyFolder') # If you prefer a shorter reference, assign the TypeName to a PowerShell variable. PS C:\\> $AlphaFSDir = [Alphaleonis.Win32.Filesystem.Directory] # And then use the short form. # Create a compressed directory. PS C:\\> $AlphaFSDir::CreateDirectory('C:\\MyCompressedFolder', $True) Emulate Get-ChildItem to overcome \"Path Too Long\" # How people learn about \"Path Too Long\". PS C:\\> Get-ChildItem -Recurse -Path $folderPath # How salvation is offered. PS C:\\> [Alphaleonis.Win32.Filesystem.Directory]::EnumerateFileSystemEntries($folderPath, '*', [System.IO.SearchOption]::AllDirectories) Get a FileSystemEntryInfo object of a file This is the most powerful method to retrieve file or folder information! # Get a FileSystemEntryInfo object of a file. PS C:\\> $fsei = [Alphaleonis.Win32.Filesystem.File]::GetFileSystemEntryInfo($Env:WinDir + '\\notepad.exe') PS C:\\> $fsei.GetType() IsPublic IsSerial Name BaseType -------- -------- ---- -------- True True FileSystemEntryInfo System.Object PS C:\\> $fsei AlternateFileName = [] Attributes = [Archive] CreationTime = [22-8-2013 13:00:13] CreationTimeUtc = [22-8-2013 11:00:13] Extension = [.exe] FileName = [notepad.exe] FileSize = [217600] FullPath = [C:\\Windows\\System32\\notepad.exe] IsArchive = [True] IsCompressed = [False] IsDevice = [False] IsDirectory = [False] IsEncrypted = [False] IsHidden = [False] IsMountPoint = [False] IsNormal = [False] IsNotContentIndexed = [False] IsOffline = [False] IsReadOnly = [False] IsReparsePoint = [False] IsSparseFile = [False] IsSymbolicLink = [False] IsSystem = [False] IsTemporary = [False] LastAccessTime = [22-8-2013 13:00:13] LastAccessTimeUtc = [22-8-2013 11:00:13] LastWriteTime = [22-8-2013 13:00:12] LastWriteTimeUtc = [22-8-2013 11:00:12] LongFullPath = [\\\\?\\C:\\Windows\\System32\\notepad.exe] ReparsePointTag = [None] Get a FileSystemEntryInfo object of a directory # Get a FileSystemEntryInfo object of a directory. PS C:\\> $fsei = [Alphaleonis.Win32.Filesystem.File]::GetFileSystemEntryInfo($Env:WinDir) PS C:\\> $fsei AlternateFileName = [] Attributes = [Directory] CreationTime = [22-8-2013 15:36:16] CreationTimeUtc = [22-8-2013 13:36:16] Extension = [] FileName = [Windows] FileSize = [0] FullPath = [C:\\Windows] IsArchive = [False] IsCompressed = [False] IsDevice = [False] IsDirectory = [True] IsEncrypted = [False] IsHidden = [False] IsMountPoint = [False] IsNormal = [False] IsNotContentIndexed = [False] IsOffline = [False] IsReadOnly = [False] IsReparsePoint = [False] IsSparseFile = [False] IsSymbolicLink = [False] IsSystem = [False] IsTemporary = [False] LastAccessTime = [12-1-2018 15:54:39] LastAccessTimeUtc = [12-1-2018 14:54:39] LastWriteTime = [12-1-2018 15:54:39] LastWriteTimeUtc = [12-1-2018 14:54:39] LongFullPath = [\\\\?\\C:\\Windows] ReparsePointTag = [None] Get a DirectoryInfo object of a directory # Get a DirectoryInfo object of a directory. PS C:\\> $dirInfo = New-Object -TypeName Alphaleonis.Win32.Filesystem.DirectoryInfo($Env:WinDir) PS C:\\> $dirInfo.GetType() IsPublic IsSerial Name BaseType -------- -------- ---- -------- True True DirectoryInfo Alphaleonis.Win32.Filesystem.FileSystemInfo PS C:\\> $dirInfo Exists : True Name : WINDOWS Parent : Root : C:\\ Attributes : Directory CreationTime : 22-8-2013 15:36:15 CreationTimeUtc : 22-8-2013 13:36:15 Extension : FullName : C:\\WINDOWS LastAccessTime : 28-12-2014 00:54:51 LastAccessTimeUtc : 27-12-2014 23:54:51 LastWriteTime : 28-12-2014 00:54:51 LastWriteTimeUtc : 27-12-2014 23:54:51 EntryInfo : None Transaction : Enumerate files and directories # Get all root folders from the Windows folder, starting with an 'a' PS C:\\> [Alphaleonis.Win32.Filesystem.Directory]::EnumerateDirectories($Env:WinDir, 'a*') C:\\Windows\\addins C:\\Windows\\ADFS C:\\Windows\\AppCompat C:\\Windows\\apppatch C:\\Windows\\AppReadiness C:\\Windows\\assembly # Get all files and folders from a network share. PS C:\\> $AlphaFSDir::EnumerateFileSystemEntries('\\\\server\\share', '*', [System.IO.SearchOption]::AllDirectories) For overall performance improvement, use the Directory.EnumerateXxx() versions as much as possible and avoid using Directory.GetFileSystemEntries/GetDirectories/GetFiles functions. When you are working with many files and/or directories, the Directory.EnumerateXxx() methods can be more efficient. Copy a directory recursively # Set copy options. PS C:\\> $copyOptions = [Alphaleonis.Win32.Filesystem.CopyOptions]::FailIfExists # Set source and destination directories. PS C:\\> $source = 'C:\\sourceDir' PS C:\\> $destination = 'C:\\destinationDir' # Copy directory recursively. PS C:\\> [Alphaleonis.Win32.Filesystem.Directory]::Copy($source, $destination, $copyOptions) Copy directory recursively using a DirectoryInfo instance : PS C:\\> $dirInfo.CopyTo($destination) PS C:\\> $dirInfo.CopyTo($destination, $copyOptions) Example Copy() Exception (missing source directory) : Exception calling \"Copy\" with \"3\" argument(s): \"(3) The system cannot find the path specified: [\\\\?\\C:\\sourceDir]\" At line:1 char:2 + [Alphaleonis.Win32.Filesystem.Directory]::Copy($source, $destination, $copyOpt ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (:) [], MethodInvocationException + FullyQualifiedErrorId : DirectoryNotFoundException Copy a file # Copy file. PS C:\\> [Alphaleonis.Win32.Filesystem.File]::Copy('C:\\Folder\\oldFile.txt', 'D:\\Folder\\newFile.txt') Remove file with a trailing space in the file name # Remove file, use path as is. # .NET does not allow for a file name to end with a space or a dot. # Use the [Alphaleonis.Win32.Filesystem.PathFormat]::FullPath parameter to bypass this. PS C:\\> [Alphaleonis.Win32.Filesystem.File]::Delete('C:\\Temp\\file ', [Alphaleonis.Win32.Filesystem.PathFormat]::FullPath) Enumerate shares from a host PS C:\\> [Alphaleonis.Win32.Network.Host]::EnumerateShares($Env:COMPUTERNAME, $True) CurrentUses : 0 DirectoryInfo : \\\\SERVER001\\ADMIN$ NetFullPath : \\\\SERVER001\\ADMIN$ MaxUses : 4294967295 NetName : ADMIN$ Password : Path : C:\\WINDOWS Permissions : None Remark : Remote Admin SecurityDescriptor : 0 ServerName : SERVER001 ShareType : Special ResourceType : None ShareLevel : Info503 ... Example: Operating System information PS C:\\> [Alphaleonis.Win32.OperatingSystem]::IsServer False PS C:\\> [Alphaleonis.Win32.OperatingSystem]::IsWow64Process False PS C:\\> [Alphaleonis.Win32.OperatingSystem]::OSVersion Major Minor Build Revision ----- ----- ----- -------- 6 3 9600 0 PS C:\\> [Alphaleonis.Win32.OperatingSystem]::ProcessorArchitecture X64 PS C:\\> [Alphaleonis.Win32.OperatingSystem]::ServicePackVersion Major Minor Build Revision ----- ----- ----- -------- 0 0 -1 -1 PS C:\\> [Alphaleonis.Win32.OperatingSystem]::VersionName Windows81 PS C:\\> [Alphaleonis.Win32.OperatingSystem]::IsAtLeast([Alphaleonis.Win32.OperatingSystem+EnumOsName]::WindowsServer2003) True DriveInfo # System.IO DriveInfo() PS C:\\> [System.IO.DriveInfo]('C') Name : C:\\ DriveType : Fixed DriveFormat : NTFS IsReady : True AvailableFreeSpace : 681759399936 TotalFreeSpace : 681759399936 TotalSize : 749786361856 RootDirectory : C:\\ VolumeLabel : Windows8 # AlphaFS DriveInfo() PS C:\\> $driveInfo = [Alphaleonis.Win32.Filesystem.DriveInfo]('C') PS C:\\> $driveInfo AvailableFreeSpace = [22910414848] DiskSpaceInfo = [C:\\] DosDeviceName = [C:] DriveFormat = [NTFS] DriveType = [Fixed] IsDosDeviceSubstitute = [False] IsReady = [True] IsUnc = [False] IsVolume = [True] Name = [C:\\] RootDirectory = [C:\\] TotalFreeSpace = [22910414848] TotalSize = [96079966208] VolumeInfo = [\\\\?\\Volume{657d4f85-1da2-478a-946a-318c99706878}\\] VolumeLabel = [System] PS C:\\> $driveInfo.DiskSpaceInfo AvailableFreeSpacePercent = [23.85%] AvailableFreeSpaceUnitSize = [21.34 GB] BytesPerSector = [512] ClusterSize = [4096] DriveName = [C:\\] FreeBytesAvailable = [22910414848] NumberOfFreeClusters = [5593363] SectorsPerCluster = [8] TotalNumberOfBytes = [96079966208] TotalNumberOfClusters = [23457023] TotalNumberOfFreeBytes = [22910414848] TotalSizeUnitSize = [89.48 GB] UsedSpacePercent = [76.15%] UsedSpaceUnitSize = [68.14 GB] PS C:\\> $driveInfo.VolumeInfo CasePreservedNames = [True] CaseSensitiveSearch = [True] Compression = [True] DirectAccess = [False] FileSystemName = [NTFS] FullPath = [C:\\] Guid = [\\\\?\\Volume{657d4f85-1da2-478a-946a-318c99706878}\\] MaximumComponentLength = [255] Name = [System] NamedStreams = [True] PersistentAcls = [True] ReadOnlyVolume = [False] SequentialWriteOnce = [False] SerialNumber = [1686851484] SupportsEncryption = [True] SupportsExtendedAttributes = [True] SupportsHardLinks = [True] SupportsObjectIds = [True] SupportsOpenByFileId = [True] SupportsRemoteStorage = [False] SupportsReparsePoints = [True] SupportsSparseFiles = [True] SupportsTransactions = [True] SupportsUsnJournal = [True] UnicodeOnDisk = [True] VolumeIsCompressed = [False] VolumeQuotas = [True] # Get the next available free drive letter (the example returns \"E\"). PS C:\\> $letter = [Alphaleonis.Win32.Filesystem.DriveInfo]::GetFreeDriveLetter() PS C:\\> $letter E Browse folders using PrivilegeEnabler # Use the \"Backup\" privilege to browse folder: C:\\Windows\\CSC # Browsing without the PrivilegeEnabler results in ACCESS DENIED. $privilegeEnabler = $Null Try { $privilege = [Alphaleonis.Win32.Security.Privilege]::Backup $privilegeEnabler = New-Object Alphaleonis.Win32.Security.PrivilegeEnabler($privilege) Dir -Recurse C:\\Windows\\CSC } Finally { If ($Null -ne $privilegeEnabler) { $privilegeEnabler.Dispose() } } Get aggregated properties, including size, of a folder # Set directory enumeration options. PS C:\\> $dirEnumOptions = [Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions]::Recursive -bor [Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions]::SkipReparsePoints -bor [Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions]::ContinueOnException PS C:\\> $pathFormat = [Alphaleonis.Win32.Filesystem.PathFormat]::FullPath # Get aggregated properties, including size, of a folder. PS C:\\> $properties = [Alphaleonis.Win32.Filesystem.Directory]::GetProperties('C:\\', $dirEnumOptions, $pathFormat) PS C:\\> $properties.Size 188647966064 # Show all aggregated properties for the folder. PS C:\\> $properties | Format-Table -AutoSize Key Value --- ----- Archive 304390 Compressed 3364 Device 0 Directory 65178 Encrypted 10 Hidden 3960 IntegrityStream 0 Normal 20954 NoScrubData 0 NotContentIndexed 5555 Offline 0 ReadOnly 8278 ReparsePoint 0 SparseFile 1 System 2493 Temporary 6 File 325431 Total 390609 Size 188647966064"
  },
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | AlphaFS",
    "keywords": "Changelog Version 2.3 (2018-XX-XX) New Features Issue #451: Add overloaded method for File.GetSize to retrieve the size of all streams. Issue #454: Add method Directory.GetSize to return the size of all alternate data streams of the specified directory and its files. Issue #464: Add overloaded methods for Directory.Copy/Move supporting DirectoryEnumerationFilters . Issue #465: Add overloaded methods for File.Copy/Move supporting retry. Issue #466: Add properties ErrorRetry and ErrorRetryTimeout to DirectoryEnumerationFilters class. Issue #467: Add property CopyOptions.CopyTimestamp . Improvements Issue #426: Correct casing of enum STREAM_ATTRIBUTES Issue #459: Modify method Directory.CreateDirectoryCore to return null as well as DirectoryInfo instance. Issue #461: Remove text :$DATA from AlternateDataStream.FullPath property. Issue #462: Add IEquatable<T> to applicable info classes. Issue #463: Add [Serializable] attribute to applicable info classes. Issue #470: Change AlphaFS implementations of method DirectoryInfo.Create to return DirectoryInfo instance instead of void. Issue #471: Add overloaded method Directory.CountFileSystemObjects supporting DirectoryEnumerationFilters . Issue #472: Add method DirectoryInfo.ExistsJunction . Issue #473: Change AlphaFS implementations of method File.Copy to return CopyMoveResult instance instead of void . Issue #475: Prevent File.SetFsoDateTimeCore from throwing UnauthorizedAccessException . Issue #477: Move method Path.GetMappedConnectionName to Host class. Issue #478: Move method Path.GetMappedUncName to Host class. Added missing overloaded methods regarding timestamps and symbolic links. Marked Directory.Copy / DirectoryInfo.Copy methods using parameters overwrite and preserveDates as obsolete. Use one of the CopyOptions . Fixed a Directory.Move unit test creating endless drive mappings on error. Breaking Changes Issue #426: Correct casing of enum STREAM_ATTRIBUTES Issue #461: Remove text :$DATA from AlternateDataStream.FullPath property. Issue #477: Move method Path.GetMappedConnectionName to Host class. Issue #478: Move method Path.GetMappedUncName to Host class. Version 2.2.6 (2018-08-18) Bugs Fixed Issue #488: Path.CheckInvalidPathChars in Path.Helpers.cs should be case insensitive (Thx GuyTe) Issue #489: File.Copy fails with DirectoryNotFoundException on long path (Thx CyberSinh) Improvements Issue #487: Ensure replace is done case-insensitive (Thx Genbox) Version 2.2.5 (2018-07-27) Bugs Fixed Issue #479: File.Move on a file opened with FileShare.Delete succeeds but throws IOException . (Thx oguimbal) Issue #480: Directory.Delete(, true, true) occasionally throws DirectoryNotEmptyException . Version 2.2.4 (2018-07-12) Bugs Fixed Issue #468: Method Directory.CopyTimestamps should throw DirectoryNotFoundException . Issue #469: Method Directory.GetFileIdInfo should throw DirectoryNotFoundException . Issue #474: Method Directory.EnumerateAlternateDataStreams should throw DirectoryNotFoundException . Issue #476: Method Directory.GetChangeTime should throw DirectoryNotFoundException . Version 2.2.3 (2018-06-14) Bugs Fixed Issue #456: Methods Directory/File.Copy throw DeviceNotReadyException when using GLOBALROOT source path. (Thx VladimirK69) Issue #457: FileInfo.Exists is true when instance is created from a directory path. Issue #458: Directory.Copy sometimes does not create the file's parent folder, throwing System.IO.DirectoryNotFoundException . Improvements Added unit tests for GLOBALROOT source path so that it can never happen again! Version 2.2.2 (2018-06-05) Bugs Fixed Issue #434: Directory.Move operation worked in v2.0.1, but now fails in v.2.2.1 (Thx warrenlbrown) Issue #436: Directory.GetFiles() with relative path (Thx stellarbear) Issue #437: Fixed PathTooLongException for boundary case of directory name length in Path.NormalizePath (Thx okrushelnitsky) Issue #441: InvalidOperationException on Directory.EnumerateFileSystemEntries() (Thx CyberSinh) Issue #444: Exception when moving or renaming a folder after updating from 2.1.3 to 2.2.1 (Thx mlaily) Improvements Issue #149: Split unit-tests. Fixed all Sandcastle Help File Builder warnings. Because of bug fixes, the correct source-/destination folder is now shown in exceptions thrown from Directory/File.Copy/Move methods, instead of always showing the source folder path. Improved some unit tests that would fail when a removable drive is already removed but there's still a cached reference. Version 2.2.1 (2018-04-05) Bugs Fixed Issue #433: Directory.ExistsDriveOrFolderOrFile fails on global root path, so a simple file copy from a shadow copy fails with \"device GLOBALROOT not ready\" (Thx CyberSinh) Version 2.2 (2018-03-25) Bugs Fixed Issue #268: There are multiple warnings when building the documentation. Issue #286: Property FileSystemEntryInfo.AlternateFileName is always an empty string. Issue #292: CopyOptions.CopySymbolicLink not working in 2.1.2 (Thx v2kiran) Issue #325: DeleteEmptySubdirectories (with recursive=true ) throws System.IO.DirectoryNotFoundException (Thx kryvoplias) Issue #328: Several instances of ArgumentException.ParamName not set/used correctly (Thx elgonzo) Issue #330: Correct the parameter order for Privilege class constructors using the ArgumentNullException . Issue #339: Directory/File.Encrypt/Decrypt should restore read-only attribute. Issue #340: DirectoryReadOnlyException inherits from System.IO.IOException , wrong? Issue #344: Directory.Copy throws UnauthorizedAccessException \"The target file is a directory, not a file\", while it is a file. Issue #349: File.GetFileSystemEntryInfoCore should throw Directory/FileNotFoundException , depending on isFolder argument. Issue #369: Directory.EnumerateFileSystemEntryInfos does not return subdirectories with spaces as name. (Thx Lupinho) Issue #371: Fix .gitignore to accommodate new directory structure in AlphaFS.UnitTest project. (Thx damiarnold) Issue #372: SetFsoDateTimeCore should always use BackupSemantics . (Thx damiarnold) Issue #374: Initializing DriveInfo instance with only a letter throws System.ArgumentException . Issue #375: What is the expected result of Path.LocalToUnc() ? (Thx damiarnold) Issue #376: Path.LocalToUnc(path, true) does not return UNC path in long path form. (Thx damiarnold) Issue #379: Path.LocalToUnc() isn't handling trailing directory separators for mapped drives. (Thx damiarnold) Issue #381: Change property ByHandleFileInfo.VolumeSerialNumber from int to long . Issue #386: Network.Host.EnumerateDrives() returns invalid data. Issue #400: Directory.CopyDeleteCore creates destination folder when source folder does not exist. Issue #412: Method Volume.GetVolumeDeviceName returns wrong result. Issue #417: Using a file opened in append mode will fail after a gc occurs (Thx elgonzo) Issue #417: File.OpenRead method overloads do not use FileShare.Read (Thx elgonzo) Issue #427: System.IO.FileSystemInfo.Refresh() is public; but AlphaFS FileSystemInfo.Refresh() is protected (Thx elgonzo) New Features Issue #212: Provide a way to retrieve errors when you choose to ContinueOnException Issue #314: Added Feature: Directory.GetFileSystemEntryInfo (Thx besoft) Issue #322: Search files/folders using multiple filters. (Thx besoft) Issue #336: Implement methods for Directory class: CreateJunction , DeleteJunction and ExistsJunction . Issue #338: Add convenience method Directory.IsEmpty Issue #342: Add instance method: FileInfo.IsLocked() Issue #343: Add method File.GetProcessForFileLock Issue #347: Implement method Directory.CreateSymbolicLink Issue #348: Implement method Directory.GetLinkTargetInfo Issue #351: Enable copying of Directory symbolic links. Issue #353: Modify method Directory.GetFileSystemEntryInfo to return FileSystemEntryInfo structure for directories supporting also root directories, e.g., C:\\ (Thx besoft) Issue #354: Add methods File.GetFileId and Directory.GetFileId to return a unique file identifier. (Thx besoft) Issue #370: Relative path from a full path (Thx QbProg) Issue #373: Improve method Directory.CreateDirectory to allow creating a folder consisting only of spaces. Issue #414: Add additional Network.Host methods. Issue #415: Added ProcessContext static class to determine the context of the current process. Issue #422: Add Copy-FileWithProgress.ps1 demonstrating file copy with progress report. Issue #423: Add Copy-DirectoryWithProgress.ps1 demonstrating directory copy with progress report. Improvements Issue #273: Improve methods Directory/File.CopyMoveCore : Make code recursive-aware, skip additional path checks and validations. Issue #274: Improve methods Directory/File.CopyMoveCore : Improve detection of same volume. Issue #275: Improve methods Directory/File.CopyMoveCore : Eliminate recursion. Issue #277: Directory.DeleteDirectoryCore() : Eliminate recursion. Issue #278: Directory.DeleteEmptySubdirectoriesCore() : Eliminate recursion. Issue #303: Path.Constants.cs : Don't use CurrentCulture (Thx HugoRoss) Issue #306: Include ShareInfoLevel.Info502 and set as a fallback in GetShareInfoCore() (Thx damiarnold) Issue #326: Add parameter bool preserveDates and created overloaded Directory.Copy methods to support this. Issue #331: Rename method File/Directory.TransferTimestamps to CopyTimestamps . Issue #335: Add overloaded methods to File/Directory.TransferTimestamps to apply to ReparsePoint. Issue #341: Improve usage of method NativeError.ThrowException and Marshal.GetLastWin32Error Issue #345: AlreadyExistsException should only throw message from 1 error. Issue #350: Add overloaded methods Directory.GetFileSystemEntryInfo Issue #352: Ignore NonInterpretedPathPrefix in methods: Path.GetFullPathCore and Path.GetLongPathCore (Thx besoft) Issue #355: Methods throwing an IOException due to error code 17 ( ERROR_NOT_SAME_DEVICE ) now throw a specific exception ( NotSameDeviceException ) Issue #357: Added new Windows 10 property: DirectAccess (Win32 FILE_DAX_VOLUME ) to VolumeInfo class. Issue #360: Add overloaded Directory.EnumerateDirectories methods that support DirectoryEnumerationFilters . (Thx SignFinder) Issue #364: Avoid unnecessary allocations from Random construction in FileSystemInfo (Thx danmosemsft) Issue #377: Rename enum member: OperatingSystem.EnumOsName.WindowsServer to: OperatingSystem.EnumOsName.WindowsServer2016 Issue #378: DiskSpaceInfo should respect CultureInfo.CurrentCulture for number formatting. Issue #385: Correct applied fileSystemRights operator in method File.Create() . Issue #387: Replace handle.IsInvalid checks with a call to method NativeMethods.IsValidHandle() . Issue #388: Change method Network.Host.EnumerateDrives() return type from string to DriveInfo . Issue #394: Improve percentage output of properties DiskSpaceInfo - AvailableFreeSpacePercent and UsedSpacePercent Issue #401: CreateDirectory ERROR_ACCESS_DENIED reports parent folder. Issue #402: Remove long path prefix from NativeError.ThrowException messages with paths. Issue #408: Add FileSystemEntryInfo.Extension string property. Issue #416: Rename property DeviceInfo.Class to DeviceInfo.DeviceClass Breaking Changes Issue #331: Rename method File/Directory.TransferTimestamps to CopyTimestamps . Currently non-breaking, the old methods are still there. Issue #340: DirectoryReadOnlyException inherits from System.IO.IOException , wrong? Issue #350: Add overloaded methods Directory.GetFileSystemEntryInfo . Current code to retrieve a directory using File.GetFileSystemEntryInfo will now fail. Use Directory.GetFileSystemEntryInfo instead. Issue #377: Rename enum member: OperatingSystem.EnumOsName.WindowsServer to: OperatingSystem.EnumOsName.WindowsServer2016 Issue #381: Change property ByHandleFileInfo.VolumeSerialNumber from int to long . Issue #388: Change method Network.Host.EnumerateDrives() return type from string to DriveInfo . Issue #391: Mark AlphaFS enumerating methods that use both searchPattern and DirectoryEnumerationFilters as obsolete. Issue #416: Rename property DeviceInfo.Class to DeviceInfo.DeviceClass Version 2.1.3 (2017-06-05) Bugs Fixed Issue #288: Directory.Exists on root drive problem has come back with recent updates (Thx warrenlbrown) Issue #289: Alphaleonis.Win32.Network.Host.GetShareInfo doesn't work since 2.1.0 (Thx Schoolmonkey/damiarnold) Issue #296: Folder rename (casing) throws IOException with HResult ERROR_SAME_DRIVE (Thx doormalena) Issue #297: Incorrect domain returned from Host.EnumerateDomainDfsRoot when specifying domain (Thx damiarnold) Issue #299: FileInfo.MoveTo and DirectoryInfo.MoveTo throw ArgumentNullException on empty destination path (Thx doormalena) Issue #312: Volume.EnumerateVolumes skips first volume (Thx springy76) Issue #313: GetHostShareFromPath() fails with spaces in share name (Thx damiarnold) Issue #320: Minor changes in comments in Win32Errors.cs to eliminate compiler warnings. (Thx besoft) Issue #321: DirectoryInfo.CopyToMoveToCore() calls Path.GetExtendedLengthPathCore() without Transaction parameter. Version 2.1.2 (2016-10-30) Bugs Fixed Issue #270: Method File.GetFileSystemEntryInfoCore uses wildcard ? (questionmark) instead of * (asterisk) Issue #276: Directory.DeleteDirectory() : Method can get stuck in infinite loop. Issue #279: The unit tests for CRC32/64 are failing. Version 2.1 (2016-09-29) New Features/Enhancements Issue #3: Added methods for backing up and restoring encrypted files: File.ImportEncryptedFileRaw File.ExportEncryptedFileRaw Directory.ImportEncryptedDirectoryRaw Directory.ExportEncryptedDirectoryRaw Issue #2 : Unit tests for methods: File.OpenRead() , File.OpenText() and File.Replace() are missing. Issue #101: The release now also contains a build targetting .NET 4.5.2. Issue #109: Add overloaded methods for Host.EnumerateShares() . Issue #112: Add CreationTimeUtc , LastAccessTimeUtc and LastWriteTimeUtc to \"Info\" classes. Issue #119: Fix Path.IsLocalPath() issues. Issue #125: AlphaFS is now CLSCompliant. Issue #127: Modify method Volume.QueryDosDevice() so that is doesn't rely on Path.IsLocalPath() anymore. Issue #130: Modify method Path.LocalToUnc() so that is doesn't rely on Path.IsLocalPath() anymore. Issue #131: Modify method Path.GetPathRoot() to handle UNC paths in long path format. Issue #132: Modify method VolumeInfo() constructor to better handle input paths. Issue #133: Add missing unit test Host.GetHostShareFromPath() . Issue #134: Improved upon FindFileSystemEntryInfo.FindFirstFile() when throwing Directory-/FileNotFoundException() . Issue #138: Modify GetShareInfo() to use SafeGlobalMemoryBufferHandle instead of IntPtr . Issue #139: Modify GetDfsInfoInternal() to use SafeGlobalMemoryBufferHandle instead of IntPtr . Issue #141: Remove obsolete Resources (resx) string messages. Issue #142: Move literal strings to Resources (resx). Issue #144: Add DirectoryInfo.EnumerateXxx() methods with support for DirectoryEnumerationOptions enum. Issue #151: Add Directory.EnumerateXxx() methods with support for DirectoryEnumerationOptions - and PathFormat enum. Issue #154: Modify private method FindFileSystemEntryInfo.FindFirstFile() to report the full path on Exception. Issue #146: Add method DirectoryInfo.EnumerateAlternateDataStreams() . Issue #147: Add overloaded methods to set Reparse Point Timestamp. (Thx rstarkov) Issue #150: Enhancement: File.IsLocked() Issue #158: Add SuppressUnmanagedCodeSecurity attribute to [DllImport] tag. Issue #184: File.CreateSymbolicLink() should throw PlatformNotSupportedException() if OS < Vista. Issue #186: Replace WIN32 API NativeMethods.GetVersionEx() with NativeMethods.RtlGetVersion() . Issue #188: Make ShareInfo class property setters private: ShareType , ResourceType . Issue #189: Improve method Utils.UnitSizeToText() . Issue #190: Add overloaded methods for File/Directory.Get/SetAccessControl() that accept SafeFileHandle . Issue #191: Make class BackupFileStream sealed. Issue #192: Add null -checks to SafeHandle.IsInvalid usage. Issue #193: Use unicode version of WIN32 API OpenEncryptedFileRaw() . Issue #194: Add bitshift for Marshal.GetHRForException(ex) usage. Issue #195: Add useful FileAttributes as properties to FileSystemEntryInfo class. Issue #199: Change FindFileSystemEntryInfo.FindFirstFile() to show actual path instead of inputpath on access error. Issue #214: Howto Get-Filehash . Issue #235: Implement unicode versions of methods: CM_Connect_Machine and CM_Get_Device_ID_Ex. Issue #239: Enable long path support for File.CreateSymbolicLink() source parameter. Issue #240: Add KeepDotOrSpace to GetFullPathOptions enum. Issue #241: Add method Path.GetFullPath() overload that supports GetFullPathOptions enum. Issue #245: Implement CRC-32/64 (Thanks to Damien Guard for implementing his code). Issue #247: Add method FileInfo.GetHash() . Issue #251: Implement unicode versions of Directory.GetCurrentDirectory() and Directory.SetCurrentDirectory() . Issue #266: Add PowerShell script: Enumerate-FileSystemEntryInfos.ps1 Bugs Fixed Issue #50 : Path.GetLongPath() does not prefix on \"C:\", should it? Issue #60 : Remove all use of \"Problematic\" methods such as DangerousAddRef and DangerousGetHandle() . Issue #160: File.CreateSymbolicLink() creates shortcut with no target. (Thx martin-john-green) Issue #162: File.AppendAllLines() concatenates content into one line. (Thx pavelhritonenko) Issue #166: File.Exists & Directory.Exists fail when path has leading space(s). Issue #168: Error on File.Open() with access-mode Append? Issue #169: DirectoryInfo .ToString() returns path with \\\\UNC prefix. Issue #176: At DirectoryInfo.GetFileSystemInfos() , Long path prefix of GLOBALROOT path is missing. (Thx diontools) Issue #179: Path.GetFileName() with an empty string throws an exception. (Thx brutaldev) Issue #180: Network connects methods hangs in Windows service when credentials fail. (Thx brutaldev) Issue #181: File.OpenWrite() should create file if it doesn't exist. (Thomas Levesque) Issue #183: Add SafeFileHandle null check for BackupFileStream.Dispose. (Thx diontools) Issue #185: Correct pinvoke signatures of CreateSymbolicLink() and CreateSymbolicLinkTransacted() functions. Issue #196: Replace usage of ExtendedFileAttributes.None with ExtendedFileAttributes.Normal . Issue #197: Fix: Prevent normalization of GlobalRootPrefix paths. Issue #198: Path.GetRegularPathCore() should not normalize \\\\?\\Volume prefix. Issue #201: Some exceptions contain an incorrect HRESULT (Thomas Levesque) Issue #203: Directory.GetDirectories() and Directory.GetFiles() return absolute paths when given relative argument. Issue #204: Giving empty string to Directory.GetFileName() and related methods throws exception. Issue #206: File.GetLastWriteTime() throws exception for non-existing path. Issue #217: File.Replace() raises an exception. Issue #218: Volume.GetVolumeInfo() fails for global root paths. Issue #219: Mismatching Implementation to System.IO.Path.GetDirectoryName() . Issue #226: DirectoryInfo using searchoption. Issue #232: Enable null for destinationBackupFileName for File.Replace() and FileInfo.Replace() . Issue #234: Path.CheckInvalidPathChars breaks IsPathRooted for whitespace strings. Issue #242: File.Open(file, System.IO.FileMode.Append) does not append. Issue #244: File.Copy(src, dst, true) does not respect FILE_ATTRIBUTE_READONLY . Issue #246: Using Directory.EnumerateFileSystemEntries() recursively with a relative path may fail. Issue #248: Directory.Move() throws FileNotFoundException instead of DirectoryNotFoundException when source folder doesn't exist. Issue #249: Change File.GetHashCore() .ToString(\"X2\") to .ToString(\"X2\", CultureInfo.InvariantCulture) . Issue #252: Correct FileSystemEntryInfos.FullPath property when input path is a dot (current directory). Issue #253: Apply Dispose() to method File.GetHashCore() . Issue #254: Change File.GetHashCore() output from .ToLowerInvariant() to .ToUpperInvariant() . Issue #255: Creating Folder with Empty name. (ardestan) Issue #256: Directory.Move() not working over volumes with MoveOptions.CopyAllowed . (Thx frontier777) Issue #263: Directory.GetDirectories() Method (String, String, SearchOption) with pattern \"* \" (Thx ardestan) Breaking Changes Issue #113: Change names of time related properties on FileSystemEntryInfo to conform with FileInfo/DirectoryInfo . Issue #126: Suffix the name of all methods working with TxF with \"Transacted\". Issue #128: Remove Path.IsLocalPath() in favour of Path.IsUncPath() . Issue #140: Replace internal DFS_INFO_4 structure with DFS_INFO_9 . Issue #184: File.CreateSymbolicLink() should throw PlatformNotSupportedException() if OS < Vista. Issue #250: Change FileSystemEntryInfo.ToString() to show full path instead of ReparsePointTag . Version 2.0.1 (2015-02-07) Bugs Fixed Issue #104: VolumeInfo.Refresh() fails with System.IO.IOException : (234)\". Issue #108: Volume.Refresh() should throw DeviceNotReadyException . Issue #110: Directory.GetDirectoryRoot() should throw System.ArgumentException . Issue #117: Fix Path.GetFullPath() issues. Issue #123: When Directory.Encrypt/Decrypt() is non-recursive, only process the folder. Issue #124: Unit tests for long/short path are failing. Version 2.0 (2015-01-16) New: The public key of AlphaFS.dll has changed, delay-signing is no longer used. New: Unit Tests, also act as code samples. New: Numerous bugfixes, optimizations and (AlphaFS) overloaded methods implementations. New: Complete implementation of .NET 4.5 File(Info) and Directory(Info) classes. New: Complete implementation of .NET 4.5 DriveInfo() class and with UNC support. New: Complete implementation of .NET 4.5 Path() class. New: Implemented Unicode aka \"Long Path\" handling for all Win32 API functions that support it. New: Added support for NuGet. New: Added support for building against .NET 4.0, 4.5, and 4.5.1 in addition to 3.5. New: Supports networking by enumerating hosts and shares (SMB/DFS) and connect/disconnect to/from network resources (AlphaFS.Network.Host() class). New: Supports working with NTFS ADS (Alternate Data Streams) on files and folders (AlphaFS.Filesystem.AlternateDataStreamInfo() class). New: Supports enumerating connected PnP devices (AlphaFS.Filesystem.Device() / AlphaFS.Filesystem.DeviceInfo() classes). New: Supports extracting icons from files and folders (AlphaFS.Filesystem.Shell32Info() class). New: Supports PathFormat parameter for numerous methods to control path normalization. This speeds up things internally (less string processing and GetFullPath() calls) and also enables working with files and folders with a trailing dot or space: RelativePath (slow): (default) Path will be checked and resolved to an absolute path. Unicode prefix is applied. FullPath (fast): Path is an absolute path. Unicode prefix is applied. LongFullPath (fastest): Path is already an absolute path with Unicode prefix. Use as is. Mod: Enabled KernelTransaction parameter for all Win32 API functions that support it. Mod: Added public read only properties to class FileSystemInfo(). Available for: DirectoryInfo() / FileInfo(): EntryInfo : Instance of the FileSystemEntryInfo() class. Transaction : Represents the KernelTransaction that was passed to the constructor. Mod: Added more entries to enum ReparsePointTag. Mod: Removed method Directory.CountFiles() and added method Directory.CountFileSystemObjects(). Mod: Removed method Directory.GetFullFileSystemEntries() and added method Directory.EnumerateFileSystemEntryInfos(). Note: This new method currently does not support DirectoryEnumerationExceptionHandler, this will probably be added in a future release. Mod: Renamed method Directory.GetFileIdBothDirectoryInfo() to Directory.EnumerateFileIdBothDirectoryInfo(). Mod: Method Directory.CreateDirectory() signature change: Using template directory. Ability for NTFS-compressed folders added. Mod: Method Directory.GetProperties() signature change. Mod: Renamed method File.GetFileInformationByHandle() to File.GetFileInfoByHandle(). Mod: Removed overloaded method File.GetFileInformationByHandle(FileStream).h Mod: Removed overloaded AlphaFS methods File.Move() using MoveFileOptions and CopyProgressRoutine, and added method File.Move(). Mod: Renamed method Volume.GetDeviceForVolumeName() to Volume.GetVolumeDeviceName(). Mod: Renamed method Volume.GetDisplayNameForVolume() to Volume.GetVolumeDisplayName(). Mod: Renamed method Volume.GetVolumeInformation() to Volume.GetVolumeInfo(). Mod: Renamed method Volume.GetVolumeMountPoints() to Volume.EnumerateVolumeMountPoints(). Mod: Renamed method Volume.GetVolumePathNamesForVolume() to Volume.EnumerateVolumePathNames(). Mod: Renamed method Volume.GetVolumes() to Volume.EnumerateVolumes(). Mod: Method Volume.DefineDosDevice() signature change. Mod: Method Volume.QueryDosDevice() signature change. Mod: Method Volume.QueryAllDosDevices() signature change. Mod: Removed method Volume.GetLogicalDrives() in favor of method Directory.GetLogicalDrives(). Mod: Class VolumeInfo() constructor signature change. Mod: Class VolumeInfo() properties updated/changed. Mod: Added method Volume.Refresh(). Mod: Changed struct DiskSpaceInfo() to class. Mod: Class DiskSpaceInfo() constructor signature change. Mod: Class DiskSpaceInfo() properties added. Mod: Added method DiskSpaceInfo.Refresh(). Mod: Refactored Path() class. Mod: Improved upon the correct (.NET) exceptions thrown. Added AlphaFS specific: DirectoryReadOnlyException and FileReadOnlyException. Removed classes PathInfoXxx(). Removed method Path.IsValidPath(), was part of PathInfo() class. Removed IllegalPathException. Removed enum DriveType in favor of System.IO.DriveType enum. Removed enum FileAccess in favor of System.IO.FileAccess enum. Removed enum FileAttributes in favor of System.IO.FileAttributes enum. Removed enum FileMode in favor of System.IO.FileMode enum. Removed enum FileOptions in favor of System.IO.FileOptions enum. Removed enum FileShare in favor of System.IO.FileShare enum. Removed enum FileSystemRights in favor of System.Security.AccessControl.FileSystemRights enum. Removed enum FileType, obsolete. Removed enum EnumerationExceptionDecision, obsolete. Removed enum IoControlCode.cs, obsolete. Renamed enum CopyProgressResult to CopyMoveProgressResult. Renamed enum MoveFileOptions to MoveOptions. Renamed class DeviceIo to Device. Renamed delegate CopyProgressResult to CopyMoveProgressResult. Version 1.5 (2014-05-20) New: Various file system objects enumeration methods in Directory class. Numerous bugfixes and optimizations New: more unit tests New: VS 2010 help file format, aka Help Viewer 1, dumped MS HELP 2 format Version 1.0 New: Directory.GetFileIdBothDirectoryInfo, which provides access to the GetFileInformationByHandleEx Win32 API function with the FileInformationClass set to FileIdBothDirectoryInfo. New: Directory.CountFiles Mod: Additional overloads for File.Open method. Mod: FileAttributes.Invalid flag removed. New: Directory.GetProperties method for retrieving aggregated information about files in a directory. New: File.GetFileInformationByHandle added providing information about file index and link count. New: KernelTransaction can now be created from a System.Transaction to participate in the ambient transaction New: File.GetHardlinks providing an enumeration about all hardlinks pointing to the same file. Mod: Many improvements and bug-fixes to Path/PathInfo path-parsing. Mod: More functions for manipulating timestamps on files and directories. Mod: Directory.GetFullFileSystemEntries added to provide more convenient usage of the FileSystemEnumerator. Mod: ... and many more minor changes and fixes. Version 0.7 alpha New: DirectoryInfo and FileInfo classes added New: PathInfo.GetLongFullPath() and Path.GetLongFullPath() methods added Mod: Path and PathInfo got many bugfixes, and some new functionality was added. Mod: AlphaFS now targets the .NET Framework 2.0 instead of 3.5 previously. Mod: KernelTransaction can now be created from, and participate in a System.Transactions.Transaction. New: BackupFileStream added, in support of the BackupWrite(), BackupRead() and BackupSeek() functions from the Win32 API. Mod: Inheritance structure for several classes was modified, mainly to add MarshalByRefObject to the relevant classes. Mod: FileSystemEntryInfo was changed to a reference type (class) instead of the previous value type (struct). Mod: PathInfo now accepts more types of internal paths, such as \\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy5\\ etc. ... and many minor changes and fixes, not mentioned here. Version 0.3.1 New: Added support for hardlinks and symbolic links in File. New: Added Directory.EnableEncryption() and Directory.DisableEncryption() New: Added File.GetCompressedSize() Mod: Applied CLSCompliant(false) to the assembly Mod: Improved error reporting, and cleanup of internal class NativeError. Version 0.3.0 Initial release"
  },
  "articles/methods-without-long-path-support.html": {
    "href": "articles/methods-without-long-path-support.html",
    "title": "Methods without long path support | AlphaFS",
    "keywords": "Methods without long path support Caution The following AlphaFS methods do not support long paths, due to MAX_PATH limitation of the Win32 API functions. Directory/DirectoryInfo.DisableEncryption Directory/DirectoryInfo.EnableEncryption File.CreateSymbolicLink() Shell32.GetFileAssociation() Shell32.GetFileIcon() Shell32.GetFileInfo() Note The following AlphaFS methods, with long path support, will work on Windows 10, version 1607 Directory.CurrentDirectory Directory.SetCurrentDirectory File.CreateHardlink File.CreateSymbolicLink File.EnumerateHardlinks File.GetCompressedSize [TODO: Add links to the methods above]"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | AlphaFS",
    "keywords": "Introduction Long Paths AlphaFS automatically enables long path support for its methods. This means you never have to fiddle again with long path prefixes such as : \\\\?\\ or \\\\?\\UNC\\ Most AlphaFS methods support long paths, please look here to see methods without long path support . AlphaFS provides a namespace: Alphaleonis.Win32.Filesystem containing a number of classes. Most notable are replications of the Path , File , FileInfo , Directory and DirectoryInfo from the System.IO namespace. So if you only use these System.IO classes, it is just a matter of replacing: using System.IO with using Alphaleonis.Win32.Filesystem which makes AlphaFS a true drop-in replacement. Examples // Will all be handled as a long path by AlphaFS. Alphaleonis.Win32.Filesystem.File.Delete(\"C:\\Data\\test.txt\"); Alphaleonis.Win32.Filesystem.File.Delete(\"\\\\?\\C:\\Data\\test.txt\"); Alphaleonis.Win32.Filesystem.File.Delete(\"\\\\host\\c$\\Data\\test.txt\"); Alphaleonis.Win32.Filesystem.File.Delete(\"\\\\?\\UNC\\host\\c$\\Data\\test.txt\"); PowerShell To enable AlphaFS from PowerShell, an: Import-Dll -Name 'C:\\Path-to-AlphaFS.dll' is needed first. AlphaFS methods can be accessed in the following manner: PS C:\\> [Alphaleonis.Win32.Filesystem.File]::Delete('C:\\Data\\test.txt') PS C:\\> [Alphaleonis.Win32.Filesystem.File]::Delete('\\\\?\\UNC\\host\\c$\\Data\\test.txt') For more information see the section on PowerShell Minimize Get FullPath and Path Validation When a method is executed, the given path to the file or directory is first resolved to get the full path. After that, numerous checks are applied to make sure that the supplied path is a valid path that can be used by the method. Of course this all happens in the blink of an eye and you will never notice any delays. You can however reduce these checks and thus increase the overall speed of your script or application. If you are going to apply multiple actions on a file or directory, (create, get attributes, copy, delete, ...) you can either create a FileInfo or DirectoryInfo object and use this instance to do most of the processing, or you can make use of the PathFormat parameter. Some methods support the PathFormat parameter. To see if a method supports the PathFormat , simply do this: PS C:\\> [Alphaleonis.Win32.Filesystem.File]::Delete OverloadDefinitions ------------------- static void Delete(string path) static void Delete(string path, bool ignoreReadOnly, Alphaleonis.Win32.Filesystem.PathFormat pathFormat) static void Delete(string path, bool ignoreReadOnly) We see that the second overload supports the PathFormat parameter, now let's use it. First, we create a long path string and store it in a variabele: PS C:\\> $longPath = [Alphaleonis.Win32.Filesystem.Path]::GetLongPath('\\\\host\\c$\\Data\\test.txt')` PS C:\\> $longPath \\\\?\\UNC\\host\\c$\\Data\\test.txt Second, we supply the long path variable to the AlphaFS method: PS C:\\> [Alphaleonis.Win32.Filesystem.File]::Delete($longPath, $True, [Alphaleonis.Win32.Filesystem.PathFormat]::LongFullPath) And that's it! AlphaFS sees the LongFullPath parameter and automatically skips full path resolving and path validation checks. Note that these have already been applied when using the Alphaleonis.Win32.Filesystem.Path.GetLongPath() method. Prefer Directory.EnumerateXxx() methods instead of Directory.GetXxx() methods The EnumerateDirectories() and GetDirectories() methods differ as follows: When you use EnumerateDirectories() , you can start enumerating the collection of names before the whole collection is returned; when you use GetDirectories() , you must wait for the whole array of names to be returned before you can access the array. So, the big real-life difference: GetXxx() methods will fill up your memory with the entire array! Therefore, when you are working with many files and directories, EnumerateXxx() can be more efficient. Kernel Transaction Manager \"The Kernel Transaction Manager (KTM) enables the development of applications that use transactions. The transaction engine itself is within the kernel, but transactions can be developed for kernel- or user-mode transactions, and within a single host or among distributed hosts.\" Example of using Transactions (TxF) using (var ts = new System.Transactions.TransactionScope(System.Transactions.TransactionScopeOption.RequiresNew)) { // KernelTransaction is in AlphaFS. var kt = new KernelTransaction(System.Transactions.Transaction.Current); // Append \"hello\" to text file named \"text.txt\" Alphaleonis.Win32.Filesystem.File.WriteAllText(kt, \"text.txt\", \"hello\"); // No text appended because exception will be thrown. throw new Exception(\"oops\"); ts.Complete(); } FileSystemEntryInfo AlphaFS fully supports the .NET DirectoryInfo and FileInfo , and some more. Instance: [System.IO.DirectoryInfo] #001 Attributes = [Directory] #002 CreationTime = [30-5-2017 18:07:28] #003 CreationTimeUtc = [30-5-2017 16:07:28] #004 Exists = [True] #005 Extension = [.rh5] #006 FullName = [\\\\SERVER\\C$\\Temp\\DirectoryInfo_InitializeInstance_ExistingDirectory-e43eb9\\teljluhv.rh5] #007 LastAccessTime = [30-5-2017 18:07:28] #008 LastAccessTimeUtc = [30-5-2017 16:07:28] #009 LastWriteTime = [30-5-2017 18:07:28] #010 LastWriteTimeUtc = [30-5-2017 16:07:28] #011 Name = [teljluhv.rh5] #012 Parent = [DirectoryInfo_InitializeInstance_ExistingDirectory-e43eb9] #013 Root = [\\\\SERVER\\C$] Instance: [Alphaleonis.Win32.Filesystem.DirectoryInfo] #001 Attributes = [Directory] #002 CreationTime = [30-5-2017 18:07:28] #003 CreationTimeUtc = [30-5-2017 16:07:28] #004 EntryInfo = [\\\\SERVER\\C$\\Temp\\DirectoryInfo_InitializeInstance_ExistingDirectory-e43eb9\\teljluhv.rh5] #005 Exists = [True] #006 Extension = [.rh5] #007 FullName = [\\\\SERVER\\C$\\Temp\\DirectoryInfo_InitializeInstance_ExistingDirectory-e43eb9\\teljluhv.rh5] #008 LastAccessTime = [30-5-2017 18:07:28] #009 LastAccessTimeUtc = [30-5-2017 16:07:28] #010 LastWriteTime = [30-5-2017 18:07:28] #011 LastWriteTimeUtc = [30-5-2017 16:07:28] #012 Name = [teljluhv.rh5] #013 Parent = [DirectoryInfo_InitializeInstance_ExistingDirectory-e43eb9] #014 Root Instance: [System.IO.FileInfo] #001 Attributes = [-1] #002 CreationTime = [1-1-1601 01:00:00] #003 CreationTimeUtc = [1-1-1601 00:00:00] #004 Directory = [\\\\SERVER\\C$\\Temp\\FileInfo_InitializeInstance_NonExistingFile-401668] #005 DirectoryName = [\\\\SERVER\\C$\\Temp\\FileInfo_InitializeInstance_NonExistingFile-401668] #006 Exists = [False] #007 Extension = [.txt] #008 FullName = [\\\\SERVER\\C$\\Temp\\FileInfo_InitializeInstance_NonExistingFile-401668\\mf0b4cbh.om5.txt] #009 IsReadOnly = [True] #010 LastAccessTime = [1-1-1601 01:00:00] #011 LastAccessTimeUtc = [1-1-1601 00:00:00] #012 LastWriteTime = [1-1-1601 01:00:00] #013 LastWriteTimeUtc = [1-1-1601 00:00:00] #014 Length = [Property accessor 'Length' on object 'System.IO.FileInfo' threw the following exception:'Could not find file '\\\\SERVER\\C$\\Temp\\FileInfo_InitializeInstance_NonExistingFile-401668\\mf0b4cbh.om5.txt'.'] #015 Name = [mf0b4cbh.om5.txt] Instance: [Alphaleonis.Win32.Filesystem.FileInfo] #001 Attributes = [-1] #002 CreationTime = [1-1-1601 01:00:00] #003 CreationTimeUtc = [1-1-1601 00:00:00] #004 Directory = [\\\\SERVER\\C$\\Temp\\FileInfo_InitializeInstance_NonExistingFile-401668] #005 DirectoryName = [\\\\SERVER\\C$\\Temp\\FileInfo_InitializeInstance_NonExistingFile-401668] #006 EntryInfo = [null] #007 Exists = [False] #008 Extension = [.txt] #009 FullName = [\\\\SERVER\\C$\\Temp\\FileInfo_InitializeInstance_NonExistingFile-401668\\mf0b4cbh.om5.txt] #010 IsReadOnly = [True] #011 LastAccessTime = [1-1-1601 01:00:00] #012 LastAccessTimeUtc = [1-1-1601 00:00:00] #013 LastWriteTime = [1-1-1601 01:00:00] #014 LastWriteTimeUtc = [1-1-1601 00:00:00] #015 Length = [Property accessor 'Length' on object 'Alphaleonis.Win32.Filesystem.FileInfo' threw the following exception:'(2) The system cannot find the file specified: [\\\\?\\UNC\\SERVER\\C$\\Temp\\FileInfo_InitializeInstance_NonExistingFile-401668\\mf0b4cbh.om5.txt]'] #016 Name = [mf0b4cbh.om5.txt] Both DirectoryInfo and FileInfo contain the EntryInfo property containing lots of other useful information: Instance: [Alphaleonis.Win32.Filesystem.FileSystemEntryInfo] #001 AlternateFileName = [] #002 Attributes = [Directory] #003 CreationTime = [22-8-2013 15:36:16] #004 CreationTimeUtc = [22-8-2013 13:36:16] #005 FileName = [Windows] #006 FileSize = [0] #007 FullPath = [C:\\Windows] #008 IsCompressed = [False] #009 IsDirectory = [True] #010 IsEncrypted = [False] #011 IsHidden = [False] #012 IsMountPoint = [False] #013 IsOffline = [False] #014 IsReadOnly = [False] #015 IsReparsePoint = [False] #016 IsSymbolicLink = [False] #017 LastAccessTime = [30-5-2017 15:54:40] #018 LastAccessTimeUtc = [30-5-2017 13:54:40] #019 LastWriteTime = [30-5-2017 15:54:40] #020 LastWriteTimeUtc = [30-5-2017 13:54:40] #021 LongFullPath = [\\\\?\\C:\\Windows] #022 ReparsePointTag = [None] Instance: [Alphaleonis.Win32.Filesystem.FileSystemEntryInfo] #001 AlternateFileName = [] #002 Attributes = [Archive] #003 CreationTime = [22-8-2013 13:00:13] #004 CreationTimeUtc = [22-8-2013 11:00:13] #005 FileName = [notepad.exe] #006 FileSize = [217600] #007 FullPath = [\\\\SERVER\\C$\\Windows\\System32\\notepad.exe] #008 IsCompressed = [False] #009 IsDirectory = [False] #010 IsEncrypted = [False] #011 IsHidden = [False] #012 IsMountPoint = [False] #013 IsOffline = [False] #014 IsReadOnly = [False] #015 IsReparsePoint = [False] #016 IsSymbolicLink = [False] #017 LastAccessTime = [22-8-2013 13:00:13] #018 LastAccessTimeUtc = [22-8-2013 11:00:13] #019 LastWriteTime = [22-8-2013 13:00:12] #020 LastWriteTimeUtc = [22-8-2013 11:00:12] #021 LongFullPath = [\\\\?\\UNC\\SERVER\\C$\\Windows\\System32\\notepad.exe] #022 ReparsePointTag = [None] Most properties are lazy loading and cached. Call the directoryInfo.RefreshEntryInfo() or fileInfo.RefreshEntryInfo() instance method to update the information. At your disposal there are two more static methods you can use to obtain a FileSystemEntryInfo instance to a file or folder: File.GetFileSystemEntryInfo() and Directory.EnumerateFileSystemEntries() ."
  },
  "articles/exceptions.html": {
    "href": "articles/exceptions.html",
    "title": "Exceptions | AlphaFS",
    "keywords": "Exceptions AlphaFS implements a few custom Exceptions: Inherited from IOException : AlreadyExistsException DeviceNotReadyException DirectoryNotEmptyException NotAReparsePointException UnrecognizedReparsePointException Inherited from UnauthorizedAccessException : DirectoryReadOnlyException FileReadOnlyException Inherited from SystemException : InvalidTransactionException TransactionalConflictException TransactionAlreadyAbortedException TransactionAlreadyCommittedException UnsupportedRemoteTransactionException [TODO: Add links to the above classes]"
  },
  "articles/differences.html": {
    "href": "articles/differences.html",
    "title": "Differences compared to System.IO | AlphaFS",
    "keywords": "Differences compared to System.IO [[TODO: Split in several pages]] When applicable, the path result of AlphaFS integration tests are compared against System.IO to ensure the highest compatibility with .NET. Of course, AlphaFS should match with .NET as much as possible, although in some cases it will not. This is due to .NET not being able to handle the long path format in a consistent way. For example: System.IO.Path.GetPathRoot() Input Path: [\\\\SERVER001\\Share] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] # Use UNC long path format. Input Path: [\\\\?\\UNC\\SERVER001\\Share] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] For example: System.IO.Directory.GetDirectoryRoot() Input Path: [\\\\?\\C:\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] # Use UNC long path format. Input Path: [\\\\?\\UNC\\SERVER001\\Share\\folder2] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] Below are methods where AlphaFS will return different results compared to .NET: (This list has not yet been completed) [[TODO: Complete this list]] [[Directory.GetDirectoryRoot()|Path Retrieval - Directory.GetDirectoryRoot()]] [[Path.GetFullPath()|Path Retrieval - Path.GetFullPath()]] [[Path.GetPathRoot()|Path Retrieval - Path.GetPathRoot()]] System.IO.Directory.Exists() System.IO.Directory.Exists() internally throws a System.ArgumentException: Illegal characters in path when encountering the long path notation: \\\\?\\ and returns False , even if the folder exists. AlphaFS returns True when the folder exists. This also applies to System.IO.Path.GetFullPath() System.IO.Path.GetFullPath() Input Path: \\\\?\\GLOBALROOT\\device\\harddisk0\\partition1\\ System.IO: Caught [System.IO] System.ArgumentException: [Paths that begin with \\\\?\\GlobalRoot are internal to the kernel and should not be opened by managed applications. AlphaFS: Returns Input Path: \\\\?\\GLOBALROOT\\device\\harddisk0\\partition1\\ Path Retrieval Directory.GetDirectoryRoot() Comparison AlphaFS vs System.IO #001 Input Path: [.] System.IO : [C:\\] AlphaFS : [C:\\] #002 Input Path: [.zip] System.IO : [C:\\] AlphaFS : [C:\\] #003 Input Path: [C:\\\\test.txt] System.IO : [C:\\] AlphaFS : [C:\\] #004 Input Path: [C:\\/test.txt] System.IO : [C:\\] AlphaFS : [C:\\] #005 Input Path: [\\] System.IO : [C:\\] AlphaFS : [C:\\] #006 Input Path: [\\Program Files\\Microsoft Office] System.IO : [C:\\] AlphaFS : [C:\\] #007 Input Path: [\\\\?\\GLOBALROOT\\device\\harddisk0\\partition1\\] Caught [System.IO] System.ArgumentException: [Paths that begin with \\\\?\\GlobalRoot are internal to the kernel and should not be opened by managed applications.] System.IO : [null] AlphaFS : [null] #008 Input Path: [\\\\?\\Volume{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\\Program Files\\notepad.exe] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [null] #009 Input Path: [Program Files\\Microsoft Office] System.IO : [C:\\] AlphaFS : [C:\\] #010 Input Path: [C] System.IO : [C:\\] AlphaFS : [C:\\] #011 Input Path: [C:] System.IO : [C:\\] AlphaFS : [C:\\] #012 Input Path: [C:\\] System.IO : [C:\\] AlphaFS : [C:\\] #013 Input Path: [C:\\a] System.IO : [C:\\] AlphaFS : [C:\\] #014 Input Path: [C:\\a\\] System.IO : [C:\\] AlphaFS : [C:\\] #015 Input Path: [C:\\a\\b] System.IO : [C:\\] AlphaFS : [C:\\] #016 Input Path: [C:\\a\\b\\] System.IO : [C:\\] AlphaFS : [C:\\] #017 Input Path: [C:\\a\\b\\c] System.IO : [C:\\] AlphaFS : [C:\\] #018 Input Path: [C:\\a\\b\\c\\] System.IO : [C:\\] AlphaFS : [C:\\] #019 Input Path: [C:\\a\\b\\c\\f] System.IO : [C:\\] AlphaFS : [C:\\] #020 Input Path: [C:\\a\\b\\c\\f.] System.IO : [C:\\] AlphaFS : [C:\\] #021 Input Path: [C:\\a\\b\\c\\f.t] System.IO : [C:\\] AlphaFS : [C:\\] #022 Input Path: [C:\\a\\b\\c\\f.tx] System.IO : [C:\\] AlphaFS : [C:\\] #023 Input Path: [C:\\a\\b\\c\\f.txt] System.IO : [C:\\] AlphaFS : [C:\\] #024 Input Path: [\\\\?\\Program Files\\Microsoft Office] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [null] #025 Input Path: [\\\\?\\C] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [null] #026 Input Path: [\\\\?\\C:] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:] #027 Input Path: [\\\\?\\C:\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #028 Input Path: [\\\\?\\C:\\a] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #029 Input Path: [\\\\?\\C:\\a\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #030 Input Path: [\\\\?\\C:\\a\\b] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #031 Input Path: [\\\\?\\C:\\a\\b\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #032 Input Path: [\\\\?\\C:\\a\\b\\c] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #033 Input Path: [\\\\?\\C:\\a\\b\\c\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #034 Input Path: [\\\\?\\C:\\a\\b\\c\\f] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #035 Input Path: [\\\\?\\C:\\a\\b\\c\\f.] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #036 Input Path: [\\\\?\\C:\\a\\b\\c\\f.t] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #037 Input Path: [\\\\?\\C:\\a\\b\\c\\f.tx] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #038 Input Path: [\\\\?\\C:\\a\\b\\c\\f.txt] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #039 Input Path: [\\\\SERVER001\\Share] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #040 Input Path: [\\\\SERVER001\\Share\\] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #041 Input Path: [\\\\SERVER001\\Share\\d] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #042 Input Path: [\\\\SERVER001\\Share\\d1] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #043 Input Path: [\\\\SERVER001\\Share\\d1\\] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #044 Input Path: [\\\\SERVER001\\Share\\d1\\d] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #045 Input Path: [\\\\SERVER001\\Share\\d1\\d2] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #046 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #047 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\f] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #048 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\fi] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #049 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\fil] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #050 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #051 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file.] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #052 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file.e] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #053 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file.ex] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #054 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file.ext] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #055 Input Path: [\\\\?\\UNC\\SERVER001\\Share] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #056 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #057 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #058 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #059 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #060 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #061 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #062 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #063 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\f] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #064 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\fi] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #065 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\fil] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #066 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #067 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file.] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #068 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file.e] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #069 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file.ex] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] #070 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file.ext] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\SERVER001\\Share] *Duration: [19] ms. (00:00:00.0197729) Path Retrieval Path.GetFullPath() Comparison AlphaFS vs System.IO #001 Input Path: [.] System.IO : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35] AlphaFS : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35] #002 Input Path: [.zip] System.IO : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35\\.zip] AlphaFS : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35\\.zip] #003 Input Path: [C:\\\\test.txt] System.IO : [C:\\test.txt] AlphaFS : [C:\\test.txt] #004 Input Path: [C:\\/test.txt] System.IO : [C:\\test.txt] AlphaFS : [C:\\test.txt] #005 Input Path: [\\] System.IO : [C:\\] AlphaFS : [C:\\] #006 Input Path: [\\Program Files\\Microsoft Office] System.IO : [C:\\Program Files\\Microsoft Office] AlphaFS : [C:\\Program Files\\Microsoft Office] #007 Input Path: [\\\\?\\GLOBALROOT\\device\\harddisk0\\partition1\\] Caught [System.IO] System.ArgumentException: [Paths that begin with \\\\?\\GlobalRoot are internal to the kernel and should not be opened by managed applications.] System.IO : [null] AlphaFS : [\\\\?\\GLOBALROOT\\device\\harddisk0\\partition1\\] #008 Input Path: [\\\\?\\Volume{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\\Program Files\\notepad.exe] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\?\\Volume{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\\Program Files\\notepad.exe] #009 Input Path: [dir1/dir2/dir3/] System.IO : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35\\dir1\\dir2\\dir3\\] AlphaFS : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35\\dir1\\dir2\\dir3\\] #010 Input Path: [Program Files\\Microsoft Office] System.IO : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35\\Program Files\\Microsoft Office] AlphaFS : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35\\Program Files\\Microsoft Office] #011 Input Path: [C] System.IO : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35\\C] AlphaFS : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35\\C] #012 Input Path: [C:] System.IO : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35] AlphaFS : [C:\\Users\\jjangli\\Documents\\_DEV\\AlphaFS.git\\bin\\Debug\\Net35] #013 Input Path: [C:\\] System.IO : [C:\\] AlphaFS : [C:\\] #014 Input Path: [C:\\a] System.IO : [C:\\a] AlphaFS : [C:\\a] #015 Input Path: [C:\\a\\] System.IO : [C:\\a\\] AlphaFS : [C:\\a\\] #016 Input Path: [C:\\a\\b] System.IO : [C:\\a\\b] AlphaFS : [C:\\a\\b] #017 Input Path: [C:\\a\\b\\] System.IO : [C:\\a\\b\\] AlphaFS : [C:\\a\\b\\] #018 Input Path: [C:\\a\\b\\c] System.IO : [C:\\a\\b\\c] AlphaFS : [C:\\a\\b\\c] #019 Input Path: [C:\\a\\b\\c\\] System.IO : [C:\\a\\b\\c\\] AlphaFS : [C:\\a\\b\\c\\] #020 Input Path: [C:\\a\\b\\c\\f] System.IO : [C:\\a\\b\\c\\f] AlphaFS : [C:\\a\\b\\c\\f] #021 Input Path: [C:\\a\\b\\c\\f.] System.IO : [C:\\a\\b\\c\\f] AlphaFS : [C:\\a\\b\\c\\f] #022 Input Path: [C:\\a\\b\\c\\f.t] System.IO : [C:\\a\\b\\c\\f.t] AlphaFS : [C:\\a\\b\\c\\f.t] #023 Input Path: [C:\\a\\b\\c\\f.tx] System.IO : [C:\\a\\b\\c\\f.tx] AlphaFS : [C:\\a\\b\\c\\f.tx] #024 Input Path: [C:\\a\\b\\c\\f.txt] System.IO : [C:\\a\\b\\c\\f.txt] AlphaFS : [C:\\a\\b\\c\\f.txt] #025 Input Path: [\\\\?\\Program Files\\Microsoft Office] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [Program Files\\Microsoft Office] #026 Input Path: [\\\\?\\C] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C] #027 Input Path: [\\\\?\\C:] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:] #028 Input Path: [\\\\?\\C:\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\] #029 Input Path: [\\\\?\\C:\\a] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a] #030 Input Path: [\\\\?\\C:\\a\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\] #031 Input Path: [\\\\?\\C:\\a\\b] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\b] #032 Input Path: [\\\\?\\C:\\a\\b\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\b\\] #033 Input Path: [\\\\?\\C:\\a\\b\\c] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\b\\c] #034 Input Path: [\\\\?\\C:\\a\\b\\c\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\b\\c\\] #035 Input Path: [\\\\?\\C:\\a\\b\\c\\f] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\b\\c\\f] #036 Input Path: [\\\\?\\C:\\a\\b\\c\\f.] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\b\\c\\f] #037 Input Path: [\\\\?\\C:\\a\\b\\c\\f.t] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\b\\c\\f.t] #038 Input Path: [\\\\?\\C:\\a\\b\\c\\f.tx] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\b\\c\\f.tx] #039 Input Path: [\\\\?\\C:\\a\\b\\c\\f.txt] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [C:\\a\\b\\c\\f.txt] #040 Input Path: [\\\\NL-DZ42KX1\\Share] System.IO : [\\\\NL-DZ42KX1\\Share] AlphaFS : [\\\\NL-DZ42KX1\\Share] #041 Input Path: [\\\\NL-DZ42KX1\\Share\\] System.IO : [\\\\NL-DZ42KX1\\Share\\] AlphaFS : [\\\\NL-DZ42KX1\\Share\\] #042 Input Path: [\\\\NL-DZ42KX1\\Share\\d] System.IO : [\\\\NL-DZ42KX1\\Share\\d] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d] #043 Input Path: [\\\\NL-DZ42KX1\\Share\\d1] System.IO : [\\\\NL-DZ42KX1\\Share\\d1] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1] #044 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\] #045 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d] #046 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2] #047 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2\\] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\] #048 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2\\f] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\f] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\f] #049 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2\\fi] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\fi] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\fi] #050 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2\\fil] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\fil] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\fil] #051 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file] #052 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file] #053 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.e] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.e] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.e] #054 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.ex] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.ex] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.ex] #055 Input Path: [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.ext] System.IO : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.ext] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.ext] #056 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share] #057 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\] #058 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d] #059 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1] #060 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\] #061 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d] #062 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2] #063 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2\\] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\] #064 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2\\f] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\f] #065 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2\\fi] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\fi] #066 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2\\fil] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\fil] #067 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2\\file] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file] #068 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2\\file.] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file] #069 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2\\file.e] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.e] #070 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2\\file.ex] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.ex] #071 Input Path: [\\\\?\\UNC\\NL-DZ42KX1\\Share\\d1\\d2\\file.ext] Caught [System.IO] System.ArgumentException: [Illegal characters in path.] System.IO : [null] AlphaFS : [\\\\NL-DZ42KX1\\Share\\d1\\d2\\file.ext] Path Retrieval Path.GetPathRoot() Comparison AlphaFS vs System.IO #001 Input Path: [.] System.IO : [] AlphaFS : [] #002 Input Path: [.zip] System.IO : [] AlphaFS : [] #003 Input Path: [C:\\\\test.txt] System.IO : [C:\\] AlphaFS : [C:\\] #004 Input Path: [C:\\/test.txt] System.IO : [C:\\] AlphaFS : [C:\\] #005 Input Path: [\\] System.IO : [\\] AlphaFS : [\\] #006 Input Path: [\\Program Files\\Microsoft Office] System.IO : [\\] AlphaFS : [\\] #007 Input Path: [\\\\?\\GLOBALROOT\\device\\harddisk0\\partition1\\] Caught [System.IO] System.ArgumentException: [Paths that begin with \\\\?\\GlobalRoot are internal to the kernel and should not be opened by managed applications.] System.IO : [null] AlphaFS : [\\\\?\\GLOBALROOT] #008 Input Path: [\\\\?\\Volume{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\\Program Files\\notepad.exe] System.IO : [\\\\?\\Volume{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}] AlphaFS : [\\\\?\\Volume{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}] #009 Input Path: [Program Files\\Microsoft Office] System.IO : [] AlphaFS : [] #010 Input Path: [C] System.IO : [] AlphaFS : [] #011 Input Path: [C:] System.IO : [C:] AlphaFS : [C:] #012 Input Path: [C:\\] System.IO : [C:\\] AlphaFS : [C:\\] #013 Input Path: [C:\\a] System.IO : [C:\\] AlphaFS : [C:\\] #014 Input Path: [C:\\a\\] System.IO : [C:\\] AlphaFS : [C:\\] #015 Input Path: [C:\\a\\b] System.IO : [C:\\] AlphaFS : [C:\\] #016 Input Path: [C:\\a\\b\\] System.IO : [C:\\] AlphaFS : [C:\\] #017 Input Path: [C:\\a\\b\\c] System.IO : [C:\\] AlphaFS : [C:\\] #018 Input Path: [C:\\a\\b\\c\\] System.IO : [C:\\] AlphaFS : [C:\\] #019 Input Path: [C:\\a\\b\\c\\f] System.IO : [C:\\] AlphaFS : [C:\\] #020 Input Path: [C:\\a\\b\\c\\f.] System.IO : [C:\\] AlphaFS : [C:\\] #021 Input Path: [C:\\a\\b\\c\\f.t] System.IO : [C:\\] AlphaFS : [C:\\] #022 Input Path: [C:\\a\\b\\c\\f.tx] System.IO : [C:\\] AlphaFS : [C:\\] #023 Input Path: [C:\\a\\b\\c\\f.txt] System.IO : [C:\\] AlphaFS : [C:\\] #024 Input Path: [\\\\?\\Program Files\\Microsoft Office] System.IO : [\\\\?\\Program Files] AlphaFS : [\\\\?\\Program Files] #025 Input Path: [\\\\?\\C] System.IO : [\\\\?\\C] AlphaFS : [\\\\?\\C] #026 Input Path: [\\\\?\\C:] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #027 Input Path: [\\\\?\\C:\\] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #028 Input Path: [\\\\?\\C:\\a] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #029 Input Path: [\\\\?\\C:\\a\\] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #030 Input Path: [\\\\?\\C:\\a\\b] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #031 Input Path: [\\\\?\\C:\\a\\b\\] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #032 Input Path: [\\\\?\\C:\\a\\b\\c] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #033 Input Path: [\\\\?\\C:\\a\\b\\c\\] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #034 Input Path: [\\\\?\\C:\\a\\b\\c\\f] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #035 Input Path: [\\\\?\\C:\\a\\b\\c\\f.] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #036 Input Path: [\\\\?\\C:\\a\\b\\c\\f.t] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #037 Input Path: [\\\\?\\C:\\a\\b\\c\\f.tx] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #038 Input Path: [\\\\?\\C:\\a\\b\\c\\f.txt] System.IO : [\\\\?\\C:] AlphaFS : [\\\\?\\C:] #039 Input Path: [\\\\SERVER001\\Share] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #040 Input Path: [\\\\SERVER001\\Share\\] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #041 Input Path: [\\\\SERVER001\\Share\\d] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #042 Input Path: [\\\\SERVER001\\Share\\d1] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #043 Input Path: [\\\\SERVER001\\Share\\d1\\] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #044 Input Path: [\\\\SERVER001\\Share\\d1\\d] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #045 Input Path: [\\\\SERVER001\\Share\\d1\\d2] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #046 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #047 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\f] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #048 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\fi] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #049 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\fil] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #050 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #051 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file.] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #052 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file.e] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #053 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file.ex] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #054 Input Path: [\\\\SERVER001\\Share\\d1\\d2\\file.ext] System.IO : [\\\\SERVER001\\Share] AlphaFS : [\\\\SERVER001\\Share] #055 Input Path: [\\\\?\\UNC\\SERVER001\\Share] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #056 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #057 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #058 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #059 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #060 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #061 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #062 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #063 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\f] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #064 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\fi] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #065 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\fil] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #066 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #067 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file.] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #068 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file.e] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #069 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file.ex] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] #070 Input Path: [\\\\?\\UNC\\SERVER001\\Share\\d1\\d2\\file.ext] System.IO : [\\\\?\\UNC] AlphaFS : [\\\\?\\UNC\\SERVER001\\Share] *Duration: [1] ms. (00:00:00.0017152)"
  },
  "index.html": {
    "href": "index.html",
    "title": "Introduction | AlphaFS",
    "keywords": "Introduction The file system support in .NET is pretty good for most uses. However there are a few shortcomings, which this library tries to alleviate. The most notable deficiency of the standard .NET System.IO is the lack of support of advanced NTFS features, most notably extended length path support (eg. file/directory paths longer than 260 characters). Feature Highlights Support for extended length paths (longer than 260 characters) Creating Junctions/Hardlinks Accessing hidden volumes Enumeration of volumes Transactional file operations Support for NTFS Alternate Data Streams (files/folders) Accessing network resources (SMB/DFS) Create and access folders/files that have leading/trailing space(s) in their name Folder/file enumerator supporting custom filtering and error reporting/recovery (access denied exceptions) ...and much more! What does AlphaFS provide? AlphaFS provides a namespace ( Alphaleonis.Win32.Filesystem ) containing a number of classes. Most notable are replications of the System.IO.Path , System.IO.File , System.IO.FileInfo , System.IO.Directory and System.IO.DirectoryInfo , all with support for the extended-length paths (up to 32.000 chars), full UNC support, recursive file enumerations, native backups and manipulations with advanced flags and options. They also contain extensions to these, and there are many more features for several functions. When only these System.IO classes are used, it is just a matter of replacing using System.IO; with using Alphaleonis.Win32.Filesystem; , which makes AlphaFS a true drop-in replacement. Another thing AlphaFS brings to the table is support for transactional NTFS (TxF). Almost every method in these classes exist in two versions. One normal, and one that can work with transactions, more specifically the kernel transaction manager. This means that file operations can be performed using the simple, lightweight KTM on NTFS file systems, through .NET, using the interface of the standard classes we are all used to. AlphaFS also contains some NTFS security related functionality (in Alphaleonis.Win32.Security ), providing the ability to enable token privileges for a user, which may be necessary for eg. changing ownership of a file. The Alphaleonis.Win32.Network namespace together with the Alphaleonis.Win32.Network.Host class offers network functionality to connect to SMB/DFS resources and easily access files and folders on the network, all with extended-length paths support. The library is Open Source, licensed under the MIT license ."
  },
  "articles/powershell/intro.html": {
    "href": "articles/powershell/intro.html",
    "title": "Getting Started with AlphaFS in PowerShell | AlphaFS",
    "keywords": "Getting Started with AlphaFS in PowerShell Make sure that AlphaFS.dll is not blocked, due to archive download . Check: File Properties > Details and click button/checkmark \" Unblock \" if shown. Also, make sure you use the correct .NET version of the AlphaFS.dll file. 1. Get the currently used .NET version PS C:\\> $PSVersionTable.CLRVersion Major Minor Build Revision ----- ----- ----- -------- 4 0 30319 42000 2. Import Module # Load AlphaFS (Method 1). PS C:\\> Import-Module -Name 'C:\\AlphaFS 2.2\\Lib\\Net4.0\\AlphaFS.dll' # Load AlphaFS (Method 2). # Returns a System.Reflection.Assembly instance. PS C:\\> $assembly = [Reflection.Assembly]::LoadFile('C:\\AlphaFS 2.2\\Lib\\Net4.0\\AlphaFS.dll') PS C:\\> $assembly GAC Version Location --- ------- -------- False v4.0.30319 C:\\AlphaFS 2.2\\Lib\\Net4.0\\AlphaFS.dll 3. AlphaFS Classes (.NET) Alphaleonis.Win32.Filesystem.Directory (.NET) Alphaleonis.Win32.Filesystem.DirectoryInfo (.NET) Alphaleonis.Win32.Filesystem.File (.NET) Alphaleonis.Win32.Filesystem.FileInfo (.NET) Alphaleonis.Win32.Filesystem.Path (AlphaFS) Alphaleonis.Win32.Filesystem.Device (AlphaFS) Alphaleonis.Win32.Network.Host A plethora of functions (methods) is available, check the documentation at the website: http://alphafs.alphaleonis.com"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "AlphaFS API Reference | AlphaFS",
    "keywords": "AlphaFS API Reference Alphaleonis.Win32 This namespace contains general classes related to the Win32 Api. Alphaleonis.Win32.Filesystem The @Alphaleons.Win32.Filesystem namespace contains classes to access and work with the local filesystem. Many of the classes in this namespace are replicas of the ones available in the System.IO namespace, but with added functionality. All methods in this namespace accept long windows unicode paths (i.e. paths starting with \\\\?\\ ). Alphaleonis.Win32.Network This namespace contains network related classes. Alphaleonis.Win32.Security This namespace contains classes directly related to security such as authentication, authorization and privilege tokens that may be needed for some file operations. For an example the SE_SECURITY_NAME privilege needs to be held to be able to modify the SACL of any file."
  },
  "api/Alphaleonis.Win32.Filesystem.FileInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.FileInfo.html",
    "title": "Class FileInfo | AlphaFS",
    "keywords": "Class FileInfo Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of FileStream objects. This class cannot be inherited. Inheritance Object MarshalByRefObject FileSystemInfo FileInfo Implements IEquatable < FileSystemInfo > Inherited Members FileSystemInfo.FullPath FileSystemInfo.OriginalPath FileSystemInfo.Attributes FileSystemInfo.CreationTime FileSystemInfo.CreationTimeUtc FileSystemInfo.Extension FileSystemInfo.FullName FileSystemInfo.LastAccessTime FileSystemInfo.LastAccessTimeUtc FileSystemInfo.LastWriteTime FileSystemInfo.LastWriteTimeUtc FileSystemInfo.DisplayPath FileSystemInfo.EntryInfo FileSystemInfo.IsDirectory FileSystemInfo.LongFullName FileSystemInfo.Transaction FileSystemInfo.Refresh() FileSystemInfo.GetHashCode() FileSystemInfo.Equals(FileSystemInfo) FileSystemInfo.Equals(Object) MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public sealed class FileInfo : FileSystemInfo, IEquatable<FileSystemInfo> Constructors | Improve this Doc View Source FileInfo(KernelTransaction, String) [AlphaFS] Initializes a new instance of the FileInfo class, which acts as a wrapper for a file path. Declaration public FileInfo(KernelTransaction transaction, string fileName) Parameters Type Name Description KernelTransaction transaction The transaction. String fileName The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character. Remarks This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations. | Improve this Doc View Source FileInfo(KernelTransaction, String, PathFormat) [AlphaFS] Initializes a new instance of the FileInfo class, which acts as a wrapper for a file path. Declaration public FileInfo(KernelTransaction transaction, string fileName, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String fileName The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations. | Improve this Doc View Source FileInfo(String) Initializes a new instance of the FileInfo class, which acts as a wrapper for a file path. Declaration public FileInfo(string fileName) Parameters Type Name Description String fileName The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character. Remarks This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations. | Improve this Doc View Source FileInfo(String, PathFormat) [AlphaFS] Initializes a new instance of the FileInfo class, which acts as a wrapper for a file path. Declaration public FileInfo(string fileName, PathFormat pathFormat) Parameters Type Name Description String fileName The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This constructor does not check if a file exists. This constructor is a placeholder for a string that is used to access the file in subsequent operations. Properties | Improve this Doc View Source Directory Gets an instance of the parent directory. Declaration public DirectoryInfo Directory { get; } Property Value Type Description DirectoryInfo A DirectoryInfo object representing the parent directory of this file. Remarks To get the parent directory as a string, use the DirectoryName property. Exceptions Type Condition DirectoryNotFoundException | Improve this Doc View Source DirectoryName Gets a string representing the directory's full path. Declaration public string DirectoryName { [SecurityCritical] get; } Property Value Type Description String A string representing the directory's full path. Remarks To get the parent directory as a DirectoryInfo object, use the Directory property. When first called, FileInfo calls Refresh and caches information about the file. On subsequent calls, you must call Refresh to get the latest copy of the information. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source Exists Gets a value indicating whether the file exists. Declaration public override bool Exists { [SecurityCritical] get; } Property Value Type Description Boolean true if the file exists; otherwise, false . Overrides FileSystemInfo.Exists Remarks The Exists property returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. | Improve this Doc View Source IsReadOnly Gets or sets a value that determines if the current file is read only. Declaration public bool IsReadOnly { get; set; } Property Value Type Description Boolean true if the current file is read only; otherwise, false . Remarks Use the IsReadOnly property to quickly determine or change whether the current file is read only. When first called, FileInfo calls Refresh and caches information about the file. On subsequent calls, you must call Refresh to get the latest copy of the information. Exceptions Type Condition FileNotFoundException IOException | Improve this Doc View Source Length Gets the size, in bytes, of the current file. Declaration public long Length { [SecurityCritical] get; } Property Value Type Description Int64 The size of the current file in bytes. Remarks The value of the Length property is pre-cached To get the latest value, call the Refresh method. Exceptions Type Condition FileNotFoundException IOException | Improve this Doc View Source Name Gets the name of the file. Declaration public override string Name { get; } Property Value Type Description String The name of the file. Overrides FileSystemInfo.Name Remarks The name of the file includes the file extension. When first called, FileInfo calls Refresh and caches information about the file. On subsequent calls, you must call Refresh to get the latest copy of the information. The name of the file includes the file extension. Methods | Improve this Doc View Source AppendText() Creates a StreamWriter that appends text to the file represented by this instance of the FileInfo . Declaration [SecurityCritical] public StreamWriter AppendText() Returns Type Description StreamWriter A new StreamWriter | Improve this Doc View Source AppendText(Encoding) Creates a StreamWriter that appends text to the file represented by this instance of the FileInfo . Declaration [SecurityCritical] public StreamWriter AppendText(Encoding encoding) Parameters Type Name Description Encoding encoding The character Encoding to use. Returns Type Description StreamWriter A new StreamWriter | Improve this Doc View Source Compress() [AlphaFS] Compresses a file using NTFS compression. Declaration [SecurityCritical] public void Compress() | Improve this Doc View Source CopyTo(String) Copies an existing file to a new file, disallowing the overwriting of an existing file. Declaration [SecurityCritical] public FileInfo CopyTo(string destinationPath) Parameters Type Name Description String destinationPath The name of the new file to copy to. Returns Type Description FileInfo A new FileInfo instance with a fully qualified path. Remarks Use this method to prevent overwriting of an existing file by default. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions) [AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, CopyOptions can be specified. Declaration [SecurityCritical] public FileInfo CopyTo(string destinationPath, CopyOptions copyOptions) Parameters Type Name Description String destinationPath The name of the new file to copy to. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. Returns Type Description FileInfo A new FileInfo instance with a fully qualified path. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, CopyOptions can be specified. Declaration [SecurityCritical] public CopyMoveResult CopyTo(string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String destinationPath The name of the new file to copy to. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, CopyOptions can be specified. Declaration [SecurityCritical] public CopyMoveResult CopyTo(string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String destinationPath The name of the new file to copy to. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, PathFormat) [AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, CopyOptions can be specified. Declaration [SecurityCritical] public FileInfo CopyTo(string destinationPath, CopyOptions copyOptions, PathFormat pathFormat) Parameters Type Name Description String destinationPath The name of the new file to copy to. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileInfo A new FileInfo instance with a fully qualified path. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, Boolean) [AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, CopyOptions can be specified. Declaration [SecurityCritical] public FileInfo CopyTo(string destinationPath, CopyOptions copyOptions, bool preserveDates) Parameters Type Name Description String destinationPath The name of the new file to copy to. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. Boolean preserveDates true if original Timestamps must be preserved, false otherwise. Returns Type Description FileInfo A new FileInfo instance with a fully qualified path. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, CopyOptions can be specified. Declaration [SecurityCritical] public CopyMoveResult CopyTo(string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String destinationPath The name of the new file to copy to. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. Boolean preserveDates true if original Timestamps must be preserved, false otherwise. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, CopyOptions can be specified. Declaration [SecurityCritical] public CopyMoveResult CopyTo(string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String destinationPath The name of the new file to copy to. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. Boolean preserveDates true if original Timestamps must be preserved, false otherwise. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, Boolean, PathFormat) [AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file, CopyOptions can be specified. Declaration [SecurityCritical] public FileInfo CopyTo(string destinationPath, CopyOptions copyOptions, bool preserveDates, PathFormat pathFormat) Parameters Type Name Description String destinationPath The name of the new file to copy to. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. Boolean preserveDates true if original Timestamps must be preserved, false otherwise. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileInfo A new FileInfo instance with a fully qualified path. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, PathFormat) [AlphaFS] Copies an existing file to a new file, disallowing the overwriting of an existing file. Declaration [SecurityCritical] public FileInfo CopyTo(string destinationPath, PathFormat pathFormat) Parameters Type Name Description String destinationPath The name of the new file to copy to. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileInfo A new FileInfo instance with a fully qualified path. Remarks Use this method to prevent overwriting of an existing file by default. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, Boolean) Copies an existing file to a new file, allowing the overwriting of an existing file. Declaration [SecurityCritical] public FileInfo CopyTo(string destinationPath, bool overwrite) Parameters Type Name Description String destinationPath The name of the new file to copy to. Boolean overwrite true to allow an existing file to be overwritten; otherwise, false . Returns Type Description FileInfo A new FileInfo instance with a fully qualified path. Remarks Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, Boolean, PathFormat) [AlphaFS] Copies an existing file to a new file, allowing the overwriting of an existing file. Declaration [SecurityCritical] public FileInfo CopyTo(string destinationPath, bool overwrite, PathFormat pathFormat) Parameters Type Name Description String destinationPath The name of the new file to copy to. Boolean overwrite true to allow an existing file to be overwritten; otherwise, false . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileInfo A new FileInfo instance with a fully qualified path. Remarks Use this method to allow or prevent overwriting of an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Create() Creates a file. Declaration [SecurityCritical] public FileStream Create() Returns Type Description FileStream FileStream A new file. | Improve this Doc View Source CreateText() Creates a instance that writes a new text file. Declaration [SecurityCritical] public StreamWriter CreateText() Returns Type Description StreamWriter A new StreamWriter | Improve this Doc View Source Decompress() [AlphaFS] Decompresses an NTFS compressed file. Declaration [SecurityCritical] public void Decompress() | Improve this Doc View Source Decrypt() Decrypts a file that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public void Decrypt() | Improve this Doc View Source Delete() Permanently deletes a file. Declaration public override void Delete() Overrides FileSystemInfo.Delete() Remarks If the file does not exist, this method does nothing. Exceptions Type Condition IOException | Improve this Doc View Source Delete(Boolean) [AlphaFS] Permanently deletes a file. Declaration public void Delete(bool ignoreReadOnly) Parameters Type Name Description Boolean ignoreReadOnly true overrides the read only FileAttributes of the file. Remarks If the file does not exist, this method does nothing. Exceptions Type Condition IOException | Improve this Doc View Source Encrypt() Encrypts a file so that only the account used to encrypt the file can decrypt it. Declaration [SecurityCritical] public void Encrypt() | Improve this Doc View Source EnumerateAlternateDataStreams() [AlphaFS] Returns an enumerable collection of AlternateDataStreamInfo instances for the file. Declaration [SecurityCritical] public IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreams() Returns Type Description IEnumerable < AlternateDataStreamInfo > An enumerable collection of AlternateDataStreamInfo instances for the file. | Improve this Doc View Source GetAccessControl() Gets a FileSecurity object that encapsulates the access control list (ACL) entries for the file described by the current FileInfo object. Declaration [SecurityCritical] public FileSecurity GetAccessControl() Returns Type Description FileSecurity FileSecurity A FileSecurity object that encapsulates the access control rules for the current file. | Improve this Doc View Source GetAccessControl(AccessControlSections) Gets a FileSecurity object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object. Declaration [SecurityCritical] public FileSecurity GetAccessControl(AccessControlSections includeSections) Parameters Type Name Description AccessControlSections includeSections One of the System.Security values that specifies which group of access control entries to retrieve. Returns Type Description FileSecurity FileSecurity object that encapsulates the specified type of access control list (ACL) entries for the file described by the current FileInfo object. | Improve this Doc View Source GetFileIdInfo() [AlphaFS] Gets the unique identifier for the file. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public FileIdInfo GetFileIdInfo() Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetHash(HashType) [AlphaFS] Calculates the hash/checksum. Declaration public string GetHash(HashType hashType) Parameters Type Name Description HashType hashType One of the HashType values. Returns Type Description String The hash/checksum of the file represented by this FileInfo . | Improve this Doc View Source IsLocked() [AlphaFS] Compresses a file using NTFS compression. Declaration [SecurityCritical] public bool IsLocked() Returns Type Description Boolean Returns true if the specified file is in use (locked); otherwise, false | Improve this Doc View Source MoveTo(String) Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public void MoveTo(string destinationPath) Parameters Type Name Description String destinationPath The path to move the file to, which can specify a different file name. Remarks Use this method to prevent overwriting of an existing file by default. This method works across disk volumes. For example, the file c:\\MyFile.txt can be moved to d:\\public and renamed NewFile.txt. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, MoveOptions) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name, MoveOptions can be specified. Declaration [SecurityCritical] public FileInfo MoveTo(string destinationPath, MoveOptions moveOptions) Parameters Type Name Description String destinationPath The path to move the file to, which can specify a different file name. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . Returns Type Description FileInfo Returns a new FileInfo instance with a fully qualified path when successfully moved. Remarks Use this method to allow or prevent overwriting of an existing file. This method works across disk volumes. For example, the file c:\\MyFile.txt can be moved to d:\\public and renamed NewFile.txt. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, MoveOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name, MoveOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public CopyMoveResult MoveTo(string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String destinationPath The path to move the file to, which can specify a different file name. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks Use this method to allow or prevent overwriting of an existing file. This method works across disk volumes. For example, the file c:\\MyFile.txt can be moved to d:\\public and renamed NewFile.txt. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, MoveOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name, MoveOptions can be specified. Declaration [SecurityCritical] public CopyMoveResult MoveTo(string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String destinationPath The path to move the file to, which can specify a different file name. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks Use this method to allow or prevent overwriting of an existing file. This method works across disk volumes. For example, the file c:\\MyFile.txt can be moved to d:\\public and renamed NewFile.txt. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, MoveOptions, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name, MoveOptions can be specified. Declaration [SecurityCritical] public FileInfo MoveTo(string destinationPath, MoveOptions moveOptions, PathFormat pathFormat) Parameters Type Name Description String destinationPath The path to move the file to, which can specify a different file name. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileInfo Returns a new FileInfo instance with a fully qualified path when successfully moved. Remarks Use this method to allow or prevent overwriting of an existing file. This method works across disk volumes. For example, the file c:\\MyFile.txt can be moved to d:\\public and renamed NewFile.txt. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public FileInfo MoveTo(string destinationPath, PathFormat pathFormat) Parameters Type Name Description String destinationPath The path to move the file to, which can specify a different file name. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileInfo Returns a new FileInfo instance with a fully qualified path when successfully moved. Remarks Use this method to prevent overwriting of an existing file by default. This method works across disk volumes. For example, the file c:\\MyFile.txt can be moved to d:\\public and renamed NewFile.txt. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Open(FileMode) Opens a file in the specified mode. Declaration [SecurityCritical] public FileStream Open(FileMode mode) Parameters Type Name Description FileMode mode A FileMode constant specifying the mode (for example, Open or Append) in which to open the file. Returns Type Description FileStream A FileStream file opened in the specified mode, with read/write access and unshared. | Improve this Doc View Source Open(FileMode, FileAccess) Opens a file in the specified mode with read, write, or read/write access. Declaration [SecurityCritical] public FileStream Open(FileMode mode, FileAccess access) Parameters Type Name Description FileMode mode A FileMode constant specifying the mode (for example, Open or Append) in which to open the file. FileAccess access A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access. Returns Type Description FileStream A FileStream object opened in the specified mode and access, and unshared. | Improve this Doc View Source Open(FileMode, FileAccess, FileShare) Opens a file in the specified mode with read, write, or read/write access and the specified sharing option. Declaration [SecurityCritical] public FileStream Open(FileMode mode, FileAccess access, FileShare share) Parameters Type Name Description FileMode mode A FileMode constant specifying the mode (for example, Open or Append) in which to open the file. FileAccess access A FileAccess constant specifying whether to open the file with Read, Write, or ReadWrite file access. FileShare share A FileShare constant specifying the type of access other FileStream objects have to this file. Returns Type Description FileStream A FileStream object opened with the specified mode, access, and sharing options. | Improve this Doc View Source Open(FileMode, FileSystemRights) [AlphaFS] Opens a file in the specified mode with read, write, or read/write access. Declaration [SecurityCritical] public FileStream Open(FileMode mode, FileSystemRights rights) Parameters Type Name Description FileMode mode A FileMode constant specifying the mode (for example, Open or Append) in which to open the file. FileSystemRights rights A FileSystemRights value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten along with additional options. Returns Type Description FileStream A FileStream object opened in the specified mode and access, and unshared. | Improve this Doc View Source Open(FileMode, FileSystemRights, FileShare) [AlphaFS] Opens a file in the specified mode with read, write, or read/write access and the specified sharing option. Declaration [SecurityCritical] public FileStream Open(FileMode mode, FileSystemRights rights, FileShare share) Parameters Type Name Description FileMode mode A FileMode constant specifying the mode (for example, Open or Append) in which to open the file. FileSystemRights rights A FileSystemRights value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten along with additional options. FileShare share A FileShare constant specifying the type of access other FileStream objects have to this file. Returns Type Description FileStream A FileStream object opened with the specified mode, access, and sharing options. | Improve this Doc View Source OpenRead() Creates a read-only FileStream . Declaration [SecurityCritical] public FileStream OpenRead() Returns Type Description FileStream A new read-only FileStream object. Remarks This method returns a read-only FileStream object with the FileShare mode set to Read. | Improve this Doc View Source OpenText() Creates a StreamReader with NativeMethods.DefaultFileEncoding encoding that reads from an existing text file. Declaration [SecurityCritical] public StreamReader OpenText() Returns Type Description StreamReader A new StreamReader with NativeMethods.DefaultFileEncoding encoding. | Improve this Doc View Source OpenText(Encoding) [AlphaFS] Creates a StreamReader with Encoding that reads from an existing text file. Declaration [SecurityCritical] public StreamReader OpenText(Encoding encoding) Parameters Type Name Description Encoding encoding The Encoding applied to the contents of the file. Returns Type Description StreamReader A new StreamReader with the specified Encoding . | Improve this Doc View Source OpenWrite() Creates a write-only FileStream . Declaration [SecurityCritical] public FileStream OpenWrite() Returns Type Description FileStream A write-only unshared FileStream object for a new or existing file. | Improve this Doc View Source RefreshEntryInfo() [AlphaFS] Refreshes the state of the FileSystemEntryInfo EntryInfo property. Declaration [SecurityCritical] public void RefreshEntryInfo() | Improve this Doc View Source Replace(String, String) Replaces the contents of a specified file with the file described by the current FileInfo object, deleting the original file, and creating a backup of the replaced file. Declaration [SecurityCritical] public FileInfo Replace(string destinationFileName, string destinationBackupFileName) Parameters Type Name Description String destinationFileName The name of a file to replace with the current file. String destinationBackupFileName The name of a file with which to create a backup of the file described by the destinationFileName parameter. Returns Type Description FileInfo A FileInfo object that encapsulates information about the file described by the destinationFileName parameter. Remarks The Replace method replaces the contents of a specified file with the contents of the file described by the current FileInfo object. It also creates a backup of the file that was replaced. Finally, it returns a new FileInfo object that describes the overwritten file. | Improve this Doc View Source Replace(String, String, PathFormat) [AlphaFS] Replaces the contents of a specified file with the file described by the current FileInfo object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors. Declaration [SecurityCritical] public FileInfo Replace(string destinationFileName, string destinationBackupFileName, PathFormat pathFormat) Parameters Type Name Description String destinationFileName The name of a file to replace with the current file. String destinationBackupFileName The name of a file with which to create a backup of the file described by the destinationFileName parameter. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileInfo A FileInfo object that encapsulates information about the file described by the destinationFileName parameter. Remarks The Replace method replaces the contents of a specified file with the contents of the file described by the current FileInfo object. It also creates a backup of the file that was replaced. Finally, it returns a new FileInfo object that describes the overwritten file. | Improve this Doc View Source Replace(String, String, Boolean) Replaces the contents of a specified file with the file described by the current FileInfo object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors. Declaration [SecurityCritical] public FileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) Parameters Type Name Description String destinationFileName The name of a file to replace with the current file. String destinationBackupFileName The name of a file with which to create a backup of the file described by the destinationFileName parameter. Boolean ignoreMetadataErrors true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise, false . Returns Type Description FileInfo A FileInfo object that encapsulates information about the file described by the destinationFileName parameter. Remarks The Replace method replaces the contents of a specified file with the contents of the file described by the current FileInfo object. It also creates a backup of the file that was replaced. Finally, it returns a new FileInfo object that describes the overwritten file. | Improve this Doc View Source Replace(String, String, Boolean, PathFormat) [AlphaFS] Replaces the contents of a specified file with the file described by the current FileInfo object, deleting the original file, and creating a backup of the replaced file. Also specifies whether to ignore merge errors. Declaration [SecurityCritical] public FileInfo Replace(string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors, PathFormat pathFormat) Parameters Type Name Description String destinationFileName The name of a file to replace with the current file. String destinationBackupFileName The name of a file with which to create a backup of the file described by the destinationFileName parameter. Boolean ignoreMetadataErrors true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise, false . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileInfo A FileInfo object that encapsulates information about the file described by the destinationFileName parameter. Remarks The Replace method replaces the contents of a specified file with the contents of the file described by the current FileInfo object. It also creates a backup of the file that was replaced. Finally, it returns a new FileInfo object that describes the overwritten file. | Improve this Doc View Source SetAccessControl(FileSecurity) Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object. Declaration [SecurityCritical] public void SetAccessControl(FileSecurity fileSecurity) Parameters Type Name Description FileSecurity fileSecurity A FileSecurity object that describes an access control list (ACL) entry to apply to the current file. Remarks The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL list. Use the SetAccessControl method whenever you need to add or remove ACL entries from a file. | Improve this Doc View Source SetAccessControl(FileSecurity, AccessControlSections) Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current FileInfo object. Declaration [SecurityCritical] public void SetAccessControl(FileSecurity fileSecurity, AccessControlSections includeSections) Parameters Type Name Description FileSecurity fileSecurity A FileSecurity object that describes an access control list (ACL) entry to apply to the current file. AccessControlSections includeSections One or more of the AccessControlSections values that specifies the type of access control list (ACL) information to set. Remarks The SetAccessControl method applies access control list (ACL) entries to the current file that represents the noninherited ACL list. Use the SetAccessControl method whenever you need to add or remove ACL entries from a file. | Improve this Doc View Source ToString() Returns the path as a string. Declaration public override string ToString() Returns Type Description String The path. Overrides FileSystemInfo.ToString() Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Win32.Filesystem.FileIdInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.FileIdInfo.html",
    "title": "Struct FileIdInfo | AlphaFS",
    "keywords": "Struct FileIdInfo Contains information that the GetFileInformationByHandle function retrieves. Implements IComparable IComparable < FileIdInfo > IEquatable < FileIdInfo > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public struct FileIdInfo : IComparable, IComparable<FileIdInfo>, IEquatable<FileIdInfo> Methods | Improve this Doc View Source CompareTo(FileIdInfo) Compares the current object with another object of the same type. Declaration public int CompareTo(FileIdInfo other) Parameters Type Name Description FileIdInfo other An object to compare with this object. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the other parameter.Zero This object is equal to other . Greater than zero This object is greater than other . | Improve this Doc View Source CompareTo(Object) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. Declaration public int CompareTo(object obj) Parameters Type Name Description Object obj An object to compare with this instance. Returns Type Description Int32 A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes obj in the sort order. Zero This instance occurs in the same position in the sort order as obj . Greater than zero This instance follows obj in the sort order. | Improve this Doc View Source Equals(FileIdInfo) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(FileIdInfo other) Parameters Type Name Description FileIdInfo other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false. | Improve this Doc View Source Equals(Object) Determines whether the specified Object , is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare with this instance. Returns Type Description Boolean true if the specified Object is equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a String that represents this instance. Declaration public override string ToString() Returns Type Description String A String that represents this instance. Overrides ValueType.ToString() Operators | Improve this Doc View Source Equality(FileIdInfo, FileIdInfo) Indicates whether the values of two specified FileIdInfo objects are equal. Declaration public static bool operator ==(FileIdInfo first, FileIdInfo second) Parameters Type Name Description FileIdInfo first The first object to compare. FileIdInfo second The second object to compare. Returns Type Description Boolean true if first and second are equal; otherwise, false. | Improve this Doc View Source GreaterThan(FileIdInfo, FileIdInfo) Implements the operator >. Declaration public static bool operator>(FileIdInfo first, FileIdInfo second) Parameters Type Name Description FileIdInfo first The first operand. FileIdInfo second The second operand. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(FileIdInfo, FileIdInfo) Indicates whether the values of two specified FileIdInfo objects are not equal. Declaration public static bool operator !=(FileIdInfo first, FileIdInfo second) Parameters Type Name Description FileIdInfo first The first object to compare. FileIdInfo second The second object to compare. Returns Type Description Boolean true if first and second are not equal; otherwise, false. | Improve this Doc View Source LessThan(FileIdInfo, FileIdInfo) Implements the operator <. Declaration public static bool operator <(FileIdInfo first, FileIdInfo second) Parameters Type Name Description FileIdInfo first The first operand. FileIdInfo second The second operand. Returns Type Description Boolean The result of the operator. Implements System.IComparable System.IComparable<T> System.IEquatable<T>"
  },
  "api/Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.FileIdBothDirectoryInfo.html",
    "title": "Class FileIdBothDirectoryInfo | AlphaFS",
    "keywords": "Class FileIdBothDirectoryInfo [AlphaFS] Contains information about files in the specified directory. Used for directory handles. Inheritance Object FileIdBothDirectoryInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] [SecurityCritical] public sealed class FileIdBothDirectoryInfo Properties | Improve this Doc View Source AllocationSize The number of bytes that are allocated for the file. This value is usually a multiple of the sector or cluster size of the underlying physical device. Declaration public long AllocationSize { get; set; } Property Value Type Description Int64 | Improve this Doc View Source ChangeTime Gets the time this entry was changed. Declaration public DateTime ChangeTime { get; } Property Value Type Description DateTime The time this entry was changed. | Improve this Doc View Source ChangeTimeUtc Gets the time, in coordinated universal time (UTC), this entry was changed. Declaration public DateTime ChangeTimeUtc { get; set; } Property Value Type Description DateTime The time, in coordinated universal time (UTC), this entry was changed. | Improve this Doc View Source CreationTime Gets the time this entry was created. Declaration public DateTime CreationTime { get; } Property Value Type Description DateTime The time this entry was created. | Improve this Doc View Source CreationTimeUtc Gets the time, in coordinated universal time (UTC), this entry was created. Declaration public DateTime CreationTimeUtc { get; set; } Property Value Type Description DateTime The time, in coordinated universal time (UTC), this entry was created. | Improve this Doc View Source EndOfFile The absolute new end-of-file position as a byte offset from the start of the file to the end of the file. Because this value is zero-based, it actually refers to the first free byte in the file. In other words, EndOfFile is the offset to the byte that immediately follows the last valid byte in the file. Declaration public long EndOfFile { get; set; } Property Value Type Description Int64 | Improve this Doc View Source ExtendedAttributesSize The size of the extended attributes for the file. Declaration public int ExtendedAttributesSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source FileAttributes The file attributes. Declaration public FileAttributes FileAttributes { get; set; } Property Value Type Description FileAttributes | Improve this Doc View Source FileId The file ID. Declaration public long FileId { get; set; } Property Value Type Description Int64 | Improve this Doc View Source FileIndex The byte offset of the file within the parent directory. This member is undefined for file systems, such as NTFS, in which the position of a file within the parent directory is not fixed and can be changed at any time to maintain sort order. Declaration public long FileIndex { get; set; } Property Value Type Description Int64 | Improve this Doc View Source FileName The name of the file. Declaration public string FileName { get; set; } Property Value Type Description String | Improve this Doc View Source LastAccessTime Gets the time this entry was last accessed. Declaration public DateTime LastAccessTime { get; } Property Value Type Description DateTime The time this entry was last accessed. | Improve this Doc View Source LastAccessTimeUtc Gets the time, in coordinated universal time (UTC), this entry was last accessed. Declaration public DateTime LastAccessTimeUtc { get; set; } Property Value Type Description DateTime The time, in coordinated universal time (UTC), this entry was last accessed. | Improve this Doc View Source LastWriteTime Gets the time this entry was last modified. Declaration public DateTime LastWriteTime { get; } Property Value Type Description DateTime The time this entry was last modified. | Improve this Doc View Source LastWriteTimeUtc Gets the time, in coordinated universal time (UTC), this entry was last modified. Declaration public DateTime LastWriteTimeUtc { get; set; } Property Value Type Description DateTime The time, in coordinated universal time (UTC), this entry was last modified. | Improve this Doc View Source ShortName The short 8.3 file naming convention (for example, FILENAME.TXT) name of the file. Declaration public string ShortName { get; set; } Property Value Type Description String"
  },
  "api/Alphaleonis.Win32.Filesystem.FileEncryptionStatus.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.FileEncryptionStatus.html",
    "title": "Enum FileEncryptionStatus | AlphaFS",
    "keywords": "Enum FileEncryptionStatus Represents the encryption status of the specified file. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum FileEncryptionStatus Fields Name Description Encryptable The file can be encrypted. Encrypted The file is encrypted. NoFilesystemSupport The file system does not support file encryption. ReadOnly The file is a read-only file. RootDirectory The file is a root directory. Root directories cannot be encrypted. SystemDirectory The file is a system directory. System directories cannot be encrypted. SystemFile The file is a system file. System files cannot be encrypted. Unknown The encryption status is unknown. The file may be encrypted. UserDisallowed Reserved for future use."
  },
  "api/Alphaleonis.Win32.Filesystem.DirectoryEnumerationFilters.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DirectoryEnumerationFilters.html",
    "title": "Class DirectoryEnumerationFilters | AlphaFS",
    "keywords": "Class DirectoryEnumerationFilters [AlphaFS] Specifies a set of custom filters to be used with enumeration methods of Directory , e.g., EnumerateDirectories(String) , EnumerateFiles(String) , or EnumerateFileSystemEntries(String) . Inheritance Object DirectoryEnumerationFilters Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public class DirectoryEnumerationFilters Remarks DirectoryEnumerationFilters allows scenarios in which files/directories being enumerated by the methods of Directory class are accepted only if they match the search pattern, attributes (see SkipReparsePoints ), and optionally also the custom criteria tested in the method whose delegate is specified in InclusionFilter . These criteria could be, e.g., file size exceeding some threshold, pathname matches a compex regular expression, etc. If the enumeration process is set to be recursive (see Recursive ) and RecursionFilter is specified, the directory is traversed recursively only if it matches the custom criteria in RecursionFilter method. This allows, for example, custom handling of junctions and symbolic links, e.g., detection of cycles. If any error occurs during the enumeration and the enumeration process is not set to ignore errors (see ContinueOnException ), an exception is thrown unless the error is handled (filtered out) by the method specified in ErrorFilter (if specified). The method may, for example, consume the error by reporting it in a log, so that the enumeration continues as in the case of ContinueOnException option but the user will be informed about errors. Properties | Improve this Doc View Source CancellationToken Gets or sets the cancellation token to abort the enumeration. Declaration public CancellationToken CancellationToken { get; set; } Property Value Type Description CancellationToken A CancellationToken instance. | Improve this Doc View Source ErrorFilter Gets or sets the filter that returns true if the input error should not be thrown. Declaration public ErrorHandler ErrorFilter { get; set; } Property Value Type Description ErrorHandler The delegate to a filtering method. | Improve this Doc View Source ErrorRetry The number of retries, excluding the first attempt. Default is 0 . Declaration public int ErrorRetry { get; set; } Property Value Type Description Int32 | Improve this Doc View Source ErrorRetryTimeout The wait time in seconds between retries. Default is 10 seconds. Declaration public int ErrorRetryTimeout { get; set; } Property Value Type Description Int32 | Improve this Doc View Source InclusionFilter Gets or sets the filter that returns true if the input file system entry should be included in the enumeration. Declaration public Predicate<FileSystemEntryInfo> InclusionFilter { get; set; } Property Value Type Description Predicate < FileSystemEntryInfo > The delegate to a filtering method. | Improve this Doc View Source RecursionFilter Gets or sets the filter that returns true if the input directory should be recursively traversed. Declaration public Predicate<FileSystemEntryInfo> RecursionFilter { get; set; } Property Value Type Description Predicate < FileSystemEntryInfo > The delegate to a filtering method."
  },
  "api/Alphaleonis.Win32.Filesystem.Directory.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Directory.html",
    "title": "Class Directory | AlphaFS",
    "keywords": "Class Directory Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited. Inheritance Object Directory Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public static class Directory Methods | Improve this Doc View Source Compress(String) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path) Parameters Type Name Description String path A path that describes a directory to compress. Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Compress(String, DirectoryEnumerationFilters) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path, DirectoryEnumerationFilters filters) Parameters Type Name Description String path A path that describes a directory to compress. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Compress(String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to compress. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Compress(String, DirectoryEnumerationOptions) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path, DirectoryEnumerationOptions options) Parameters Type Name Description String path A path that describes a directory to compress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Compress(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path A path that describes a directory to compress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Compress(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to compress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Compress(String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to compress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Compress(String, PathFormat) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to compress. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CompressTransacted(KernelTransaction, String) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to compress. Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CompressTransacted(KernelTransaction, String, DirectoryEnumerationFilters) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to compress. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CompressTransacted(KernelTransaction, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to compress. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CompressTransacted(KernelTransaction, String, DirectoryEnumerationOptions) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to compress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CompressTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to compress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CompressTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to compress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CompressTransacted(KernelTransaction, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to compress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CompressTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to compress. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(KernelTransaction, String, String, CopyOptions) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Copy(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, DirectoryEnumerationFilters) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, DirectoryEnumerationFilters) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, DirectoryEnumerationFilters filters) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, DirectoryEnumerationFilters) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, DirectoryEnumerationFilters filters) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, DirectoryEnumerationFilters) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, DirectoryEnumerationFilters filters) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTimestamps(String, String) [AlphaFS] Copies the date and timestamps for the specified existing directories. Declaration [SecurityCritical] public static void CopyTimestamps(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. Exceptions Type Condition ArgumentException DirectoryNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestamps(String, String, PathFormat) [AlphaFS] Copies the date and timestamps for the specified existing directories. Declaration [SecurityCritical] public static void CopyTimestamps(string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. Exceptions Type Condition ArgumentException DirectoryNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestamps(String, String, Boolean) [AlphaFS] Copies the date and timestamps for the specified existing directories. Declaration [SecurityCritical] public static void CopyTimestamps(string sourcePath, string destinationPath, bool modifyReparsePoint) Parameters Type Name Description String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the directory linked to. No effect if destinationPath does not refer to a reparse point. Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. Exceptions Type Condition ArgumentException DirectoryNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestamps(String, String, Boolean, PathFormat) [AlphaFS] Copies the date and timestamps for the specified existing directories. Declaration [SecurityCritical] public static void CopyTimestamps(string sourcePath, string destinationPath, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the directory linked to. No effect if destinationPath does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. Exceptions Type Condition ArgumentException DirectoryNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestampsTransacted(KernelTransaction, String, String) [AlphaFS] Copies the date and timestamps for the specified existing directories. Declaration [SecurityCritical] public static void CopyTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. Exceptions Type Condition ArgumentException DirectoryNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestampsTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Copies the date and timestamps for the specified existing directories. Declaration [SecurityCritical] public static void CopyTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. Exceptions Type Condition ArgumentException DirectoryNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestampsTransacted(KernelTransaction, String, String, Boolean) [AlphaFS] Copies the date and timestamps for the specified existing directories. Declaration [SecurityCritical] public static void CopyTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the directory linked to. No effect if destinationPath does not refer to a reparse point. Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. Exceptions Type Condition ArgumentException DirectoryNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestampsTransacted(KernelTransaction, String, String, Boolean, PathFormat) [AlphaFS] Copies the date and timestamps for the specified existing directories. Declaration [SecurityCritical] public static void CopyTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the directory linked to. No effect if destinationPath does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. Exceptions Type Condition ArgumentException DirectoryNotFoundException NotSupportedException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, DirectoryEnumerationFilters) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, DirectoryEnumerationFilters) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, PathFormat) [AlphaFS] Copies a directory and its contents to a new location, CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, DirectoryEnumerationFilters) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean, DirectoryEnumerationFilters) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean, PathFormat) [AlphaFS] Copies an existing directory to a new directory. Overwriting a directory of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Boolean overwrite true if the destination directory should ignoring the read-only and hidden attributes and overwrite; otherwise, false . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjects(String, DirectoryEnumerationOptions) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public static long CountFileSystemObjects(string path, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory path. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjects(String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public static long CountFileSystemObjects(string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory path. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjects(String, String, DirectoryEnumerationOptions) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public static long CountFileSystemObjects(string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory path. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjects(String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public static long CountFileSystemObjects(string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory path. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjectsTransacted(KernelTransaction, String, DirectoryEnumerationOptions) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public static long CountFileSystemObjectsTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory path. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjectsTransacted(KernelTransaction, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public static long CountFileSystemObjectsTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory path. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjectsTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public static long CountFileSystemObjectsTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory path. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjectsTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public static long CountFileSystemObjectsTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory path. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String) Creates all directories and subdirectories in the specified path unless they already exist. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path) Parameters Type Name Description String path The directory to create. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, PathFormat) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory to create. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, Boolean) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, bool compress) Parameters Type Name Description String path The directory to create. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, Boolean, PathFormat) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, bool compress, PathFormat pathFormat) Parameters Type Name Description String path The directory to create. Boolean compress When true compresses the directory using NTFS compression. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, DirectorySecurity) Creates all the directories in the specified path, unless the already exist, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, DirectorySecurity directorySecurity) Parameters Type Name Description String path The directory to create. DirectorySecurity directorySecurity The access control to apply to the directory. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, DirectorySecurity, PathFormat) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, DirectorySecurity directorySecurity, PathFormat pathFormat) Parameters Type Name Description String path The directory to create. DirectorySecurity directorySecurity The access control to apply to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, DirectorySecurity, Boolean) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, DirectorySecurity directorySecurity, bool compress) Parameters Type Name Description String path The directory to create. DirectorySecurity directorySecurity The access control to apply to the directory. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, DirectorySecurity, Boolean, PathFormat) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, DirectorySecurity directorySecurity, bool compress, PathFormat pathFormat) Parameters Type Name Description String path The directory to create. DirectorySecurity directorySecurity The access control to apply to the directory. Boolean compress When true compresses the directory using NTFS compression. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, String) [AlphaFS] Creates a new directory, with the attributes of a specified template directory. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, string templatePath) Parameters Type Name Description String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, String, PathFormat) [AlphaFS] Creates a new directory, with the attributes of a specified template directory. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, string templatePath, PathFormat pathFormat) Parameters Type Name Description String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, String, Boolean) [AlphaFS] Creates a new directory, with the attributes of a specified template directory. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, string templatePath, bool compress) Parameters Type Name Description String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, String, Boolean, PathFormat) [AlphaFS] Creates a new directory, with the attributes of a specified template directory. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, string templatePath, bool compress, PathFormat pathFormat) Parameters Type Name Description String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. Boolean compress When true compresses the directory using NTFS compression. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, String, DirectorySecurity) [AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, string templatePath, DirectorySecurity directorySecurity) Parameters Type Name Description String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. DirectorySecurity directorySecurity The access control to apply to the directory. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, String, DirectorySecurity, PathFormat) [AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, string templatePath, DirectorySecurity directorySecurity, PathFormat pathFormat) Parameters Type Name Description String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. DirectorySecurity directorySecurity The access control to apply to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, String, DirectorySecurity, Boolean) [AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, string templatePath, DirectorySecurity directorySecurity, bool compress) Parameters Type Name Description String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. DirectorySecurity directorySecurity The access control to apply to the directory. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectory(String, String, DirectorySecurity, Boolean, PathFormat) [AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectory(string path, string templatePath, DirectorySecurity directorySecurity, bool compress, PathFormat pathFormat) Parameters Type Name Description String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. DirectorySecurity directorySecurity The access control to apply to the directory. Boolean compress When true compresses the directory using NTFS compression. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String) [AlphaFS] Creates all directories and subdirectories in the specified path unless they already exist. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, Boolean) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, bool compress) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, bool compress, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. Boolean compress When true compresses the directory using NTFS compression. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, DirectorySecurity) [AlphaFS] Creates all the directories in the specified path, unless the already exist, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, DirectorySecurity directorySecurity) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. DirectorySecurity directorySecurity The access control to apply to the directory. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, DirectorySecurity, PathFormat) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, DirectorySecurity directorySecurity, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. DirectorySecurity directorySecurity The access control to apply to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, DirectorySecurity, Boolean) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, DirectorySecurity directorySecurity, bool compress) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. DirectorySecurity directorySecurity The access control to apply to the directory. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, DirectorySecurity, Boolean, PathFormat) [AlphaFS] Creates all the directories in the specified path, applying the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, DirectorySecurity directorySecurity, bool compress, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. DirectorySecurity directorySecurity The access control to apply to the directory. Boolean compress When true compresses the directory using NTFS compression. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, String) [AlphaFS] Creates a new directory, with the attributes of a specified template directory. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, string templatePath) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Creates a new directory, with the attributes of a specified template directory. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, string templatePath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, String, Boolean) [AlphaFS] Creates a new directory, with the attributes of a specified template directory. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, string templatePath, bool compress) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, String, Boolean, PathFormat) [AlphaFS] Creates a new directory, with the attributes of a specified template directory. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, string templatePath, bool compress, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. Boolean compress When true compresses the directory using NTFS compression. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, String, DirectorySecurity) [AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, string templatePath, DirectorySecurity directorySecurity) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. DirectorySecurity directorySecurity The access control to apply to the directory. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, String, DirectorySecurity, PathFormat) [AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, string templatePath, DirectorySecurity directorySecurity, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. DirectorySecurity directorySecurity The access control to apply to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, String, DirectorySecurity, Boolean) [AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, string templatePath, DirectorySecurity directorySecurity, bool compress) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. DirectorySecurity directorySecurity The access control to apply to the directory. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateDirectoryTransacted(KernelTransaction, String, String, DirectorySecurity, Boolean, PathFormat) [AlphaFS] Creates all the directories in the specified path of a specified template directory and applies the specified Windows security. Declaration [SecurityCritical] public static DirectoryInfo CreateDirectoryTransacted(KernelTransaction transaction, string path, string templatePath, DirectorySecurity directorySecurity, bool compress, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to create. String templatePath The path of the directory to use as a template when creating the new directory. DirectorySecurity directorySecurity The access control to apply to the directory. Boolean compress When true compresses the directory using NTFS compression. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo An object that represents the directory at the specified path. This object is returned regardless of whether a directory at the specified path already exists. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(KernelTransaction, String, String) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public static void CreateJunction(KernelTransaction transaction, string junctionPath, string directoryPath) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(KernelTransaction, String, String, PathFormat) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public static void CreateJunction(KernelTransaction transaction, string junctionPath, string directoryPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(KernelTransaction, String, String, Boolean) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunction(KernelTransaction transaction, string junctionPath, string directoryPath, bool overwrite) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(KernelTransaction, String, String, Boolean, PathFormat) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunction(KernelTransaction transaction, string junctionPath, string directoryPath, bool overwrite, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(KernelTransaction, String, String, Boolean, Boolean) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunction(KernelTransaction transaction, string junctionPath, string directoryPath, bool overwrite, bool copyTargetTimestamps) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Boolean copyTargetTimestamps true to copy the target date and time stamps to the directory junction. Remarks The directory must be empty and reside on a local volume. The directory date and time stamps from directoryPath (the target) are copied to the directory junction. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(KernelTransaction, String, String, Boolean, Boolean, PathFormat) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunction(KernelTransaction transaction, string junctionPath, string directoryPath, bool overwrite, bool copyTargetTimestamps, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Boolean copyTargetTimestamps true to copy the target date and time stamps to the directory junction. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. The directory date and time stamps from directoryPath (the target) are copied to the directory junction. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, String) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\") Declaration [SecurityCritical] public static void CreateJunction(string junctionPath, string directoryPath) Parameters Type Name Description String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, String, PathFormat) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public static void CreateJunction(string junctionPath, string directoryPath, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, String, Boolean) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunction(string junctionPath, string directoryPath, bool overwrite) Parameters Type Name Description String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, String, Boolean, PathFormat) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunction(string junctionPath, string directoryPath, bool overwrite, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, String, Boolean, Boolean) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunction(string junctionPath, string directoryPath, bool overwrite, bool copyTargetTimestamps) Parameters Type Name Description String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Boolean copyTargetTimestamps true to copy the target date and time stamps to the directory junction. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, String, Boolean, Boolean, PathFormat) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunction(string junctionPath, string directoryPath, bool overwrite, bool copyTargetTimestamps, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Boolean copyTargetTimestamps true to copy the target date and time stamps to the directory junction. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunctionTransacted(KernelTransaction, String, String) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public static void CreateJunctionTransacted(KernelTransaction transaction, string junctionPath, string directoryPath) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunctionTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public static void CreateJunctionTransacted(KernelTransaction transaction, string junctionPath, string directoryPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunctionTransacted(KernelTransaction, String, String, Boolean) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunctionTransacted(KernelTransaction transaction, string junctionPath, string directoryPath, bool overwrite) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunctionTransacted(KernelTransaction, String, String, Boolean, PathFormat) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunctionTransacted(KernelTransaction transaction, string junctionPath, string directoryPath, bool overwrite, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunctionTransacted(KernelTransaction, String, String, Boolean, Boolean) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunctionTransacted(KernelTransaction transaction, string junctionPath, string directoryPath, bool overwrite, bool copyTargetTimestamps) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Boolean copyTargetTimestamps true to copy the target date and time stamps to the directory junction. Remarks The directory must be empty and reside on a local volume. The directory date and time stamps from directoryPath (the target) are copied to the directory junction. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunctionTransacted(KernelTransaction, String, String, Boolean, Boolean, PathFormat) [AlphaFS] Creates an NTFS directory junction (similar to CMD command: \"MKLINK /J\"). Overwriting a junction point of the same name is allowed. Declaration [SecurityCritical] public static void CreateJunctionTransacted(KernelTransaction transaction, string junctionPath, string directoryPath, bool overwrite, bool copyTargetTimestamps, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to create. String directoryPath The path to the directory. If the directory does not exist it will be created. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Boolean copyTargetTimestamps true to copy the target date and time stamps to the directory junction. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. The directory date and time stamps from directoryPath (the target) are copied to the directory junction. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition AlreadyExistsException ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateSymbolicLink(String, String) [AlphaFS] Creates a symbolic link to a directory (similar to CMD command: \"MKLINK /D\"). Declaration [SecurityCritical] public static void CreateSymbolicLink(string symlinkDirectoryName, string targetDirectoryName) Parameters Type Name Description String symlinkDirectoryName The name of the target for the symbolic link to be created. String targetDirectoryName The symbolic link to be created. Remarks Symbolic links can point to a non-existent target. When creating a symbolic link, the operating system does not check to see if the target exists. Symbolic links are reparse points. There is a maximum of 31 reparse points (and therefore symbolic links) allowed in a particular path. See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException IOException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLink(String, String, PathFormat) [AlphaFS] Creates a symbolic link to a directory (similar to CMD command: \"MKLINK /D\"). Declaration [SecurityCritical] public static void CreateSymbolicLink(string symlinkDirectoryName, string targetDirectoryName, PathFormat pathFormat) Parameters Type Name Description String symlinkDirectoryName The name of the target for the symbolic link to be created. String targetDirectoryName The symbolic link to be created. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Symbolic links can point to a non-existent target. When creating a symbolic link, the operating system does not check to see if the target exists. Symbolic links are reparse points. There is a maximum of 31 reparse points (and therefore symbolic links) allowed in a particular path. See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException IOException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLinkTransacted(KernelTransaction, String, String) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK /D\") to a directory as a transacted operation. Declaration [SecurityCritical] public static void CreateSymbolicLinkTransacted(KernelTransaction transaction, string symlinkDirectoryName, string targetDirectoryName) Parameters Type Name Description KernelTransaction transaction The transaction. String symlinkDirectoryName The name of the target for the symbolic link to be created. String targetDirectoryName The symbolic link to be created. Remarks Symbolic links can point to a non-existent target. When creating a symbolic link, the operating system does not check to see if the target exists. Symbolic links are reparse points. There is a maximum of 31 reparse points (and therefore symbolic links) allowed in a particular path. See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException IOException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLinkTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK /D\") to a directory as a transacted operation. Declaration [SecurityCritical] public static void CreateSymbolicLinkTransacted(KernelTransaction transaction, string symlinkDirectoryName, string targetDirectoryName, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String symlinkDirectoryName The name of the target for the symbolic link to be created. String targetDirectoryName The symbolic link to be created. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Symbolic links can point to a non-existent target. When creating a symbolic link, the operating system does not check to see if the target exists. Symbolic links are reparse points. There is a maximum of 31 reparse points (and therefore symbolic links) allowed in a particular path. See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException IOException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source Decompress(String) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void Decompress(string path) Parameters Type Name Description String path A path that describes a directory to decompress. Remarks This will only decompress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decompress(String, DirectoryEnumerationFilters) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void Decompress(string path, DirectoryEnumerationFilters filters) Parameters Type Name Description String path A path that describes a directory to decompress. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Remarks This will only decompress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decompress(String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void Decompress(string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to decompress. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only decompress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decompress(String, DirectoryEnumerationOptions) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void Decompress(string path, DirectoryEnumerationOptions options) Parameters Type Name Description String path A path that describes a directory to decompress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decompress(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void Decompress(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path A path that describes a directory to decompress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decompress(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void Decompress(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to decompress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decompress(String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void Decompress(string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to decompress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decompress(String, PathFormat) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void Decompress(string path, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to decompress. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only decompress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DecompressTransacted(KernelTransaction, String) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to decompress. Remarks This will only decompress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DecompressTransacted(KernelTransaction, String, DirectoryEnumerationFilters) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to decompress. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Remarks This will only decompress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DecompressTransacted(KernelTransaction, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to decompress. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only decompress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DecompressTransacted(KernelTransaction, String, DirectoryEnumerationOptions) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to decompress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DecompressTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to decompress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DecompressTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to decompress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DecompressTransacted(KernelTransaction, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to decompress. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DecompressTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a directory to decompress. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This will only decompress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decrypt(String) [AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public static void Decrypt(string path) Parameters Type Name Description String path A path that describes a directory to decrypt. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decrypt(String, PathFormat) [AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public static void Decrypt(string path, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to decrypt. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decrypt(String, Boolean) [AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public static void Decrypt(string path, bool recursive) Parameters Type Name Description String path A path that describes a directory to decrypt. Boolean recursive true to decrypt the directory recursively. false only decrypt the directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decrypt(String, Boolean, PathFormat) [AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public static void Decrypt(string path, bool recursive, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to decrypt. Boolean recursive true to decrypt the directory recursively. false only decrypt the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Delete(String) Deletes an empty directory from a specified path. Declaration [SecurityCritical] public static void Delete(string path) Parameters Type Name Description String path The name of the empty directory to remove. This directory must be writable and empty. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source Delete(String, PathFormat) [AlphaFS] Deletes an empty directory from a specified path. Declaration [SecurityCritical] public static void Delete(string path, PathFormat pathFormat) Parameters Type Name Description String path The name of the empty directory to remove. This directory must be writable and empty. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source Delete(String, Boolean) Deletes the specified directory and, if indicated, any subdirectories in the directory. Declaration [SecurityCritical] public static void Delete(string path, bool recursive) Parameters Type Name Description String path The name of the directory to remove. Boolean recursive true to remove directories, subdirectories, and files in path . false otherwise. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source Delete(String, Boolean, PathFormat) [AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory. Declaration [SecurityCritical] public static void Delete(string path, bool recursive, PathFormat pathFormat) Parameters Type Name Description String path The name of the directory to remove. Boolean recursive true to remove directories, subdirectories, and files in path . false otherwise. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source Delete(String, Boolean, Boolean) [AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory. Declaration [SecurityCritical] public static void Delete(string path, bool recursive, bool ignoreReadOnly) Parameters Type Name Description String path The name of the directory to remove. Boolean recursive true to remove directories, subdirectories, and files in path . false otherwise. Boolean ignoreReadOnly true overrides read only FileAttributes of files and directories. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source Delete(String, Boolean, Boolean, PathFormat) [AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory. Declaration [SecurityCritical] public static void Delete(string path, bool recursive, bool ignoreReadOnly, PathFormat pathFormat) Parameters Type Name Description String path The name of the directory to remove. Boolean recursive true to remove directories, subdirectories, and files in path . false otherwise. Boolean ignoreReadOnly true overrides read only FileAttributes of files and directories. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectories(String) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectories(string path) Parameters Type Name Description String path The name of the directory to remove empty subdirectories from. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectories(String, Boolean) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectories(string path, bool recursive) Parameters Type Name Description String path The name of the directory to remove empty subdirectories from. Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectories(String, Boolean, PathFormat) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectories(string path, bool recursive, PathFormat pathFormat) Parameters Type Name Description String path The name of the directory to remove empty subdirectories from. Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectories(String, Boolean, Boolean) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectories(string path, bool recursive, bool ignoreReadOnly) Parameters Type Name Description String path The name of the directory to remove empty subdirectories from. Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. Boolean ignoreReadOnly true overrides read only FileAttributes of empty directories. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectories(String, Boolean, Boolean, PathFormat) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectories(string path, bool recursive, bool ignoreReadOnly, PathFormat pathFormat) Parameters Type Name Description String path The name of the directory to remove empty subdirectories from. Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. Boolean ignoreReadOnly true overrides read only FileAttributes of empty directories. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectoriesTransacted(KernelTransaction, String) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectoriesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the directory to remove empty subdirectories from. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectoriesTransacted(KernelTransaction, String, Boolean) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectoriesTransacted(KernelTransaction transaction, string path, bool recursive) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the directory to remove empty subdirectories from. Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectoriesTransacted(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectoriesTransacted(KernelTransaction transaction, string path, bool recursive, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the directory to remove empty subdirectories from. Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectoriesTransacted(KernelTransaction, String, Boolean, Boolean) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectoriesTransacted(KernelTransaction transaction, string path, bool recursive, bool ignoreReadOnly) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the directory to remove empty subdirectories from. Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. Boolean ignoreReadOnly true overrides read only FileAttributes of empty directories. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteEmptySubdirectoriesTransacted(KernelTransaction, String, Boolean, Boolean, PathFormat) [AlphaFS] Deletes empty subdirectories from the specified directory. Declaration [SecurityCritical] public static void DeleteEmptySubdirectoriesTransacted(KernelTransaction transaction, string path, bool recursive, bool ignoreReadOnly, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the directory to remove empty subdirectories from. Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. Boolean ignoreReadOnly true overrides read only FileAttributes of empty directories. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteJunction(KernelTransaction, String) [AlphaFS] Deletes an NTFS directory junction. Declaration [Obsolete(\"Use method DeleteJunctionTransacted.\")] [SecurityCritical] public static void DeleteJunction(KernelTransaction transaction, string junctionPath) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to remove. Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunction(KernelTransaction, String, PathFormat) [AlphaFS] Deletes an NTFS directory junction. Declaration [Obsolete(\"Use method DeleteJunctionTransacted.\")] [SecurityCritical] public static void DeleteJunction(KernelTransaction transaction, string junctionPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to remove. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunction(KernelTransaction, String, Boolean) [AlphaFS] Deletes an NTFS directory junction. Declaration [Obsolete(\"Use method DeleteJunctionTransacted.\")] [SecurityCritical] public static void DeleteJunction(KernelTransaction transaction, string junctionPath, bool removeDirectory) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to remove. Boolean removeDirectory When true , also removes the directory and all its contents. Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunction(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Deletes an NTFS directory junction. Declaration [Obsolete(\"Use method DeleteJunctionTransacted.\")] [SecurityCritical] public static void DeleteJunction(KernelTransaction transaction, string junctionPath, bool removeDirectory, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to remove. Boolean removeDirectory When true , also removes the directory and all its contents. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunction(String) [AlphaFS] Deletes an NTFS directory junction. Declaration [SecurityCritical] public static void DeleteJunction(string junctionPath) Parameters Type Name Description String junctionPath The path of the junction point to remove. Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunction(String, PathFormat) [AlphaFS] Deletes an NTFS directory junction. Declaration [SecurityCritical] public static void DeleteJunction(string junctionPath, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path of the junction point to remove. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunction(String, Boolean) [AlphaFS] Deletes an NTFS directory junction. Declaration [SecurityCritical] public static void DeleteJunction(string junctionPath, bool removeDirectory) Parameters Type Name Description String junctionPath The path of the junction point to remove. Boolean removeDirectory When true , also removes the directory and all its contents. Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunction(String, Boolean, PathFormat) [AlphaFS] Deletes an NTFS directory junction. Declaration [SecurityCritical] public static void DeleteJunction(string junctionPath, bool removeDirectory, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path of the junction point to remove. Boolean removeDirectory When true , also removes the directory and all its contents. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunctionTransacted(KernelTransaction, String) [AlphaFS] Deletes an NTFS directory junction. Declaration [SecurityCritical] public static void DeleteJunctionTransacted(KernelTransaction transaction, string junctionPath) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to remove. Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunctionTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Deletes an NTFS directory junction. Declaration [SecurityCritical] public static void DeleteJunctionTransacted(KernelTransaction transaction, string junctionPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to remove. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunctionTransacted(KernelTransaction, String, Boolean) [AlphaFS] Deletes an NTFS directory junction. Declaration [SecurityCritical] public static void DeleteJunctionTransacted(KernelTransaction transaction, string junctionPath, bool removeDirectory) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to remove. Boolean removeDirectory When true , also removes the directory and all its contents. Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunctionTransacted(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Deletes an NTFS directory junction. Declaration [SecurityCritical] public static void DeleteJunctionTransacted(KernelTransaction transaction, string junctionPath, bool removeDirectory, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path of the junction point to remove. Boolean removeDirectory When true , also removes the directory and all its contents. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String) [AlphaFS] Deletes an empty directory from a specified path. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the empty directory to remove. This directory must be writable and empty. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Deletes an empty directory from a specified path. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the empty directory to remove. This directory must be writable and empty. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String, Boolean) [AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path, bool recursive) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the directory to remove. Boolean recursive true to remove directories, subdirectories, and files in path . false otherwise. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path, bool recursive, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the directory to remove. Boolean recursive true to remove directories, subdirectories, and files in path . false otherwise. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String, Boolean, Boolean) [AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path, bool recursive, bool ignoreReadOnly) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the directory to remove. Boolean recursive true to remove directories, subdirectories, and files in path . false otherwise. Boolean ignoreReadOnly true overrides read only FileAttributes of files and directories. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String, Boolean, Boolean, PathFormat) [AlphaFS] Deletes the specified directory and, if indicated, any subdirectories in the directory. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path, bool recursive, bool ignoreReadOnly, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the directory to remove. Boolean recursive true to remove directories, subdirectories, and files in path . false otherwise. Boolean ignoreReadOnly true overrides read only FileAttributes of files and directories. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException DirectoryReadOnlyException | Improve this Doc View Source DisableCompression(String) [AlphaFS] Disables NTFS compression of the specified directory and the files in it. Declaration [SecurityCritical] public static void DisableCompression(string path) Parameters Type Name Description String path A path to a directory to decompress. Remarks This method disables the directory-compression attribute. It will not decompress the current contents of the directory. However, newly created files and directories will be uncompressed. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DisableCompression(String, PathFormat) [AlphaFS] Disables NTFS compression of the specified directory and the files in it. Declaration [SecurityCritical] public static void DisableCompression(string path, PathFormat pathFormat) Parameters Type Name Description String path A path to a directory to decompress. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method disables the directory-compression attribute. It will not decompress the current contents of the directory. However, newly created files and directories will be uncompressed. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DisableCompressionTransacted(KernelTransaction, String) [AlphaFS] Disables NTFS compression of the specified directory and the files in it. Declaration [SecurityCritical] public static void DisableCompressionTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path to a directory to decompress. Remarks This method disables the directory-compression attribute. It will not decompress the current contents of the directory. However, newly created files and directories will be uncompressed. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DisableCompressionTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Disables NTFS compression of the specified directory and the files in it. Declaration [SecurityCritical] public static void DisableCompressionTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path to a directory to decompress. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method disables the directory-compression attribute. It will not decompress the current contents of the directory. However, newly created files and directories will be uncompressed. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DisableEncryption(String) [AlphaFS] Disables encryption of the specified directory and the files in it. This method only creates/modifies the file \"Desktop.ini\" in the root of path and disables encryption by writing: \"Disable=1\" This method does not affect encryption of files and subdirectories below the indicated directory. Declaration [SecurityCritical] public static void DisableEncryption(string path) Parameters Type Name Description String path The name of the directory for which to disable encryption. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DisableEncryption(String, PathFormat) [AlphaFS] Disables encryption of the specified directory and the files in it. This method only creates/modifies the file \"Desktop.ini\" in the root of path and disables encryption by writing: \"Disable=1\" This method does not affect encryption of files and subdirectories below the indicated directory. Declaration [SecurityCritical] public static void DisableEncryption(string path, PathFormat pathFormat) Parameters Type Name Description String path The name of the directory for which to disable encryption. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnableCompression(String) [AlphaFS] Enables NTFS compression of the specified directory and the files in it. Declaration [SecurityCritical] public static void EnableCompression(string path) Parameters Type Name Description String path A path to a directory to compress. Remarks This method enables the directory-compression attribute. It will not compress the current contents of the directory. However, newly created files and directories will be compressed. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnableCompression(String, PathFormat) [AlphaFS] Enables NTFS compression of the specified directory and the files in it. Declaration [SecurityCritical] public static void EnableCompression(string path, PathFormat pathFormat) Parameters Type Name Description String path A path to a directory to compress. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method enables the directory-compression attribute. It will not compress the current contents of the directory. However, newly created files and directories will be compressed. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnableCompressionTransacted(KernelTransaction, String) [AlphaFS] Enables NTFS compression of the specified directory and the files in it. Declaration [SecurityCritical] public static void EnableCompressionTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path to a directory to compress. Remarks This method enables the directory-compression attribute. It will not compress the current contents of the directory. However, newly created files and directories will be compressed. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnableCompressionTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Enables NTFS compression of the specified directory and the files in it. Declaration [SecurityCritical] public static void EnableCompressionTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path to a directory to compress. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method enables the directory-compression attribute. It will not compress the current contents of the directory. However, newly created files and directories will be compressed. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnableEncryption(String) [AlphaFS] Enables encryption of the specified directory and the files in it. This method only creates/modifies the file \"Desktop.ini\" in the root of path and enables encryption by writing: \"Disable=0\" This method does not affect encryption of files and subdirectories below the indicated directory. Declaration [SecurityCritical] public static void EnableEncryption(string path) Parameters Type Name Description String path The name of the directory for which to enable encryption. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnableEncryption(String, PathFormat) [AlphaFS] Enables encryption of the specified directory and the files in it. This method only creates/modifies the file \"Desktop.ini\" in the root of path and enables encryption by writing: \"Disable=0\" This method does not affect encryption of files and subdirectories below the indicated directory. Declaration [SecurityCritical] public static void EnableEncryption(string path, PathFormat pathFormat) Parameters Type Name Description String path The name of the directory for which to enable encryption. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Encrypt(String) [AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it. Declaration [SecurityCritical] public static void Encrypt(string path) Parameters Type Name Description String path A path that describes a directory to encrypt. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Encrypt(String, PathFormat) [AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it. Declaration [SecurityCritical] public static void Encrypt(string path, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to encrypt. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Encrypt(String, Boolean) [AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it. Declaration [SecurityCritical] public static void Encrypt(string path, bool recursive) Parameters Type Name Description String path A path that describes a directory to encrypt. Boolean recursive true to encrypt the directory recursively. false only encrypt the directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Encrypt(String, Boolean, PathFormat) [AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it. Declaration [SecurityCritical] public static void Encrypt(string path, bool recursive, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a directory to encrypt. Boolean recursive true to encrypt the directory recursively. false only encrypt the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateAlternateDataStreams(String) [AlphaFS] Enumerates the streams of type :$DATA from the specified directory. Declaration [SecurityCritical] public static IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreams(string path) Parameters Type Name Description String path The path to the directory to enumerate streams of. Returns Type Description IEnumerable < AlternateDataStreamInfo > The streams of type :$DATA in the specified directory. | Improve this Doc View Source EnumerateAlternateDataStreams(String, PathFormat) [AlphaFS] Enumerates the streams of type :$DATA from the specified directory. Declaration [SecurityCritical] public static IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreams(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the directory to enumerate streams of. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < AlternateDataStreamInfo > The streams of type :$DATA in the specified directory. | Improve this Doc View Source EnumerateAlternateDataStreamsTransacted(KernelTransaction, String) [AlphaFS] Enumerates the streams of type :$DATA from the specified directory. Declaration [SecurityCritical] public static IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreamsTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory to enumerate streams of. Returns Type Description IEnumerable < AlternateDataStreamInfo > The streams of type :$DATA in the specified directory. | Improve this Doc View Source EnumerateAlternateDataStreamsTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Enumerates the streams of type :$DATA from the specified directory. Declaration [SecurityCritical] public static IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreamsTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory to enumerate streams of. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < AlternateDataStreamInfo > The streams of type :$DATA in the specified directory. | Improve this Doc View Source EnumerateDirectories(String) Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path) Parameters Type Name Description String path The directory to search. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String) Returns an enumerable collection of directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String, PathFormat) [AlphaFS] Returns an enumerable collection of directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String, SearchOption) Returns an enumerable collection of directory names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, String, SearchOption, PathFormat) [AlphaFS] Returns an enumerable collection of directory names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectories(string path, string searchPattern, SearchOption searchOption, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String) [AlphaFS] Returns an enumerable collection of directory instances in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of directory instances in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of directory instances in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Returns an enumerable collection of directory instances in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String) [AlphaFS] Returns an enumerable collection of directory instances that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of directory instances that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of directory names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of directory instances that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Returns an enumerable collection of directory instances that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String, SearchOption) [AlphaFS] Returns an enumerable collection of directory names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectoriesTransacted(KernelTransaction, String, String, SearchOption, PathFormat) [AlphaFS] Returns an enumerable collection of directory names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, SearchOption searchOption, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the directories in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileIdBothDirectoryInfo(SafeFileHandle) [AlphaFS] Retrieves information about files in the directory handle specified. Declaration [SecurityCritical] public static IEnumerable<FileIdBothDirectoryInfo> EnumerateFileIdBothDirectoryInfo(SafeFileHandle handle) Parameters Type Name Description SafeFileHandle handle An open handle to the directory from which to retrieve information. Returns Type Description IEnumerable < FileIdBothDirectoryInfo > An IEnumerable of FileIdBothDirectoryInfo records for each file system entry in the specified diretory. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateFileIdBothDirectoryInfo(String) [AlphaFS] Retrieves information about files in the directory specified by path in ReadWrite mode. Declaration [SecurityCritical] public static IEnumerable<FileIdBothDirectoryInfo> EnumerateFileIdBothDirectoryInfo(string path) Parameters Type Name Description String path A path to a directory from which to retrieve information. Returns Type Description IEnumerable < FileIdBothDirectoryInfo > An enumeration of FileIdBothDirectoryInfo records for each file system entry in the specified diretory. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateFileIdBothDirectoryInfo(String, PathFormat) [AlphaFS] Retrieves information about files in the directory specified by path in ReadWrite mode. Declaration [SecurityCritical] public static IEnumerable<FileIdBothDirectoryInfo> EnumerateFileIdBothDirectoryInfo(string path, PathFormat pathFormat) Parameters Type Name Description String path A path to a directory from which to retrieve information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < FileIdBothDirectoryInfo > An enumeration of FileIdBothDirectoryInfo records for each file system entry in the specified diretory. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateFileIdBothDirectoryInfo(String, FileShare) [AlphaFS] Retrieves information about files in the directory specified by path in specified FileShare mode. Declaration [SecurityCritical] public static IEnumerable<FileIdBothDirectoryInfo> EnumerateFileIdBothDirectoryInfo(string path, FileShare shareMode) Parameters Type Name Description String path A path to a directory from which to retrieve information. FileShare shareMode The FileShare mode with which to open a handle to the directory. Returns Type Description IEnumerable < FileIdBothDirectoryInfo > An enumeration of FileIdBothDirectoryInfo records for each file system entry in the specified diretory. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateFileIdBothDirectoryInfo(String, FileShare, PathFormat) [AlphaFS] Retrieves information about files in the directory specified by path in specified FileShare mode. Declaration [SecurityCritical] public static IEnumerable<FileIdBothDirectoryInfo> EnumerateFileIdBothDirectoryInfo(string path, FileShare shareMode, PathFormat pathFormat) Parameters Type Name Description String path A path to a directory from which to retrieve information. FileShare shareMode The FileShare mode with which to open a handle to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < FileIdBothDirectoryInfo > An enumeration of FileIdBothDirectoryInfo records for each file system entry in the specified diretory. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateFileIdBothDirectoryInfoTransacted(KernelTransaction, String) [AlphaFS] Retrieves information about files in the directory specified by path in ReadWrite mode. Declaration [SecurityCritical] public static IEnumerable<FileIdBothDirectoryInfo> EnumerateFileIdBothDirectoryInfoTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path to a directory from which to retrieve information. Returns Type Description IEnumerable < FileIdBothDirectoryInfo > An enumeration of FileIdBothDirectoryInfo records for each file system entry in the specified diretory. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateFileIdBothDirectoryInfoTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Retrieves information about files in the directory specified by path in ReadWrite mode. Declaration [SecurityCritical] public static IEnumerable<FileIdBothDirectoryInfo> EnumerateFileIdBothDirectoryInfoTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path to a directory from which to retrieve information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < FileIdBothDirectoryInfo > An enumeration of FileIdBothDirectoryInfo records for each file system entry in the specified diretory. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateFileIdBothDirectoryInfoTransacted(KernelTransaction, String, FileShare) [AlphaFS] Retrieves information about files in the directory specified by path in specified FileShare mode. Declaration [SecurityCritical] public static IEnumerable<FileIdBothDirectoryInfo> EnumerateFileIdBothDirectoryInfoTransacted(KernelTransaction transaction, string path, FileShare shareMode) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path to a directory from which to retrieve information. FileShare shareMode The FileShare mode with which to open a handle to the directory. Returns Type Description IEnumerable < FileIdBothDirectoryInfo > An enumeration of FileIdBothDirectoryInfo records for each file system entry in the specified diretory. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateFileIdBothDirectoryInfoTransacted(KernelTransaction, String, FileShare, PathFormat) [AlphaFS] Retrieves information about files in the directory specified by path in specified FileShare mode. Declaration [SecurityCritical] public static IEnumerable<FileIdBothDirectoryInfo> EnumerateFileIdBothDirectoryInfoTransacted(KernelTransaction transaction, string path, FileShare shareMode, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path to a directory from which to retrieve information. FileShare shareMode The FileShare mode with which to open a handle to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < FileIdBothDirectoryInfo > An enumeration of FileIdBothDirectoryInfo records for each file system entry in the specified diretory. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateFiles(String) Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path) Parameters Type Name Description String path The directory to search. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String) Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String, SearchOption) Returns an enumerable collection of file names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, String, SearchOption, PathFormat) [AlphaFS] Returns an enumerable collection of file names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFiles(string path, string searchPattern, SearchOption searchOption, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String) [AlphaFS] Returns an enumerable collection of file instances that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file instances that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file instances that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Returns an enumerable collection of file instances that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String, SearchOption) [AlphaFS] Returns an enumerable collection of file instances instances that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFilesTransacted(KernelTransaction, String, String, SearchOption, PathFormat) [AlphaFS] Returns an enumerable collection of file instances instances that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFilesTransacted(KernelTransaction transaction, string path, string searchPattern, SearchOption searchOption, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of the full names (including paths) for the files in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String) Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path) Parameters Type Name Description String path The directory to search. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, String) Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, String, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, String, SearchOption) Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntries(String, String, SearchOption, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntries(string path, string searchPattern, SearchOption searchOption, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names in a specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, String) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, String, SearchOption) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntriesTransacted(KernelTransaction, String, String, SearchOption, PathFormat) [AlphaFS] Returns an enumerable collection of file names and directory names that match a searchPattern in a specified path , and optionally searches subdirectories. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<string> EnumerateFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern, SearchOption searchOption, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of file system entries in the directory specified by path and that match the specified searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path) Parameters Type Name Description String path The directory to search. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, String) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, string searchPattern) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, string searchPattern, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, string searchPattern, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path using DirectoryEnumerationOptions . Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path using DirectoryEnumerationOptions . Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfos<T>(String, String, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfos<T>(string path, string searchPattern, PathFormat pathFormat) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries in a specified path. Declaration [SecurityCritical] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, String) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, string searchPattern) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, String, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, String, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path using DirectoryEnumerationOptions . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, String, DirectoryEnumerationOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path using DirectoryEnumerationOptions . Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, string searchPattern, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction, String, String, PathFormat) [AlphaFS] Returns an enumerable collection of file system entries that match a searchPattern in a specified path. Declaration [SecurityCritical] [Obsolete(\"Argument searchPattern is obsolete. The DirectoryEnumerationFilters argument provides better filter criteria.\")] public static IEnumerable<T> EnumerateFileSystemEntryInfosTransacted<T>(KernelTransaction transaction, string path, string searchPattern, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable <T> The matching file system entries. The type of the items is determined by the type T . Type Parameters Name Description T The type to return. This may be one of the following types: Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateLogicalDrives() [AlphaFS] Enumerates the drive names of all logical drives on the Computer with the ready status. Declaration [SecurityCritical] public static IEnumerable<DriveInfo> EnumerateLogicalDrives() Returns Type Description IEnumerable < DriveInfo > An IEnumerable of type DriveInfo that represents the logical drives on the Computer. | Improve this Doc View Source EnumerateLogicalDrives(Boolean, Boolean) [AlphaFS] Enumerates the drive names of all logical drives on the Computer. Declaration [SecurityCritical] public static IEnumerable<DriveInfo> EnumerateLogicalDrives(bool fromEnvironment, bool isReady) Parameters Type Name Description Boolean fromEnvironment Retrieve logical drives as known by the Environment. Boolean isReady Retrieve only when accessible (IsReady) logical drives. Returns Type Description IEnumerable < DriveInfo > An IEnumerable of type DriveInfo that represents the logical drives on the Computer. | Improve this Doc View Source Exists(String) Determines whether the given path refers to an existing directory on disk. Declaration [SecurityCritical] public static bool Exists(string path) Parameters Type Name Description String path The path to test. Returns Type Description Boolean Returns true if path refers to an existing directory. Returns false if the directory does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. | Improve this Doc View Source Exists(String, PathFormat) [AlphaFS] Determines whether the given path refers to an existing directory on disk. Declaration [SecurityCritical] public static bool Exists(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to test. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if path refers to an existing directory. Returns false if the directory does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. | Improve this Doc View Source ExistsDrive(KernelTransaction, String) [AlphaFS] Checks if specified path is a local- or network drive. Declaration public static bool ExistsDrive(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to check, such as: \"C:\" or \"\\server\\c$\". Returns Type Description Boolean true if the drive exists, false otherwise. | Improve this Doc View Source ExistsDrive(KernelTransaction, String, Boolean) [AlphaFS] Checks if specified path is a local- or network drive. Declaration [Obsolete(\"This function will be removed.\")] public static bool ExistsDrive(KernelTransaction transaction, string path, bool throwIfDriveNotExists) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to check, such as: \"C:\" or \"\\server\\c$\". Boolean throwIfDriveNotExists Throws DeviceNotReadyException when drive is not found. Returns Type Description Boolean true if the drive exists, false otherwise. | Improve this Doc View Source ExistsDrive(String) [AlphaFS] Checks if specified path is a local- or network drive. Declaration public static bool ExistsDrive(string path) Parameters Type Name Description String path The path to check, such as: \"C:\" or \"\\server\\c$\". Returns Type Description Boolean true if the drive exists, false otherwise. | Improve this Doc View Source ExistsJunction(KernelTransaction, String) [AlphaFS] Determines whether the given path refers to an existing directory junction on disk. Declaration [Obsolete(\"Use ExistsJunctionTransacted method.\")] [SecurityCritical] public static bool ExistsJunction(KernelTransaction transaction, string junctionPath) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path to test. Returns Type Description Boolean Returns true if junctionPath refers to an existing directory junction. Returns false if the directory junction does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. Exceptions Type Condition ArgumentException ArgumentNullException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source ExistsJunction(KernelTransaction, String, PathFormat) [AlphaFS] Determines whether the given path refers to an existing directory junction on disk. Declaration [Obsolete(\"Use ExistsJunctionTransacted method.\")] [SecurityCritical] public static bool ExistsJunction(KernelTransaction transaction, string junctionPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path to test. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if junctionPath refers to an existing directory junction. Returns false if the directory junction does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. Exceptions Type Condition ArgumentException ArgumentNullException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source ExistsJunction(String) [AlphaFS] Determines whether the given path refers to an existing directory junction on disk. Declaration [SecurityCritical] public static bool ExistsJunction(string junctionPath) Parameters Type Name Description String junctionPath The path to test. Returns Type Description Boolean Returns true if junctionPath refers to an existing directory junction. Returns false if the directory junction does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. Exceptions Type Condition ArgumentException ArgumentNullException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source ExistsJunction(String, PathFormat) [AlphaFS] Determines whether the given path refers to an existing directory junction on disk. Declaration [SecurityCritical] public static bool ExistsJunction(string junctionPath, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path to test. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if junctionPath refers to an existing directory junction. Returns false if the directory junction does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. Exceptions Type Condition ArgumentException ArgumentNullException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source ExistsJunctionTransacted(KernelTransaction, String) [AlphaFS] Determines whether the given path refers to an existing directory junction on disk. Declaration [SecurityCritical] public static bool ExistsJunctionTransacted(KernelTransaction transaction, string junctionPath) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path to test. Returns Type Description Boolean Returns true if junctionPath refers to an existing directory junction. Returns false if the directory junction does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. Exceptions Type Condition ArgumentException ArgumentNullException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source ExistsJunctionTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Determines whether the given path refers to an existing directory junction on disk. Declaration [SecurityCritical] public static bool ExistsJunctionTransacted(KernelTransaction transaction, string junctionPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String junctionPath The path to test. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if junctionPath refers to an existing directory junction. Returns false if the directory junction does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. Exceptions Type Condition ArgumentException ArgumentNullException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source ExistsTransacted(KernelTransaction, String) [AlphaFS] Determines whether the given path refers to an existing directory on disk. Declaration [SecurityCritical] public static bool ExistsTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to test. Returns Type Description Boolean Returns true if path refers to an existing directory. Returns false if the directory does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. | Improve this Doc View Source ExistsTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Determines whether the given path refers to an existing directory on disk. Declaration [SecurityCritical] public static bool ExistsTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to test. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if path refers to an existing directory. Returns false if the directory does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. | Improve this Doc View Source ExportEncryptedDirectoryRaw(String, Stream) [AlphaFS] Backs up (export) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ExportEncryptedDirectoryRaw(string fileName, Stream outputStream) Parameters Type Name Description String fileName The name of the file to be backed up. Stream outputStream The destination stream to which the backup data will be written. Remarks The directory being backed up is not decrypted; it is backed up in its encrypted state. If the caller does not have access to the key for the file, the caller needs Backup to export encrypted files. See PrivilegeEnabler . To backup an encrypted directory call one of the overloads and specify the directory to backup along with the destination stream of the backup data. This function is intended for the backup of only encrypted directories; see BackupFileStream for backup of unencrypted directories. Note that this method does not back up the files inside the directory, only the directory entry itself. | Improve this Doc View Source ExportEncryptedDirectoryRaw(String, Stream, PathFormat) [AlphaFS] Backs up (export) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ExportEncryptedDirectoryRaw(string fileName, Stream outputStream, PathFormat pathFormat) Parameters Type Name Description String fileName The name of the file to be backed up. Stream outputStream The destination stream to which the backup data will be written. PathFormat pathFormat The path format of the fileName parameter. Remarks The directory being backed up is not decrypted; it is backed up in its encrypted state. If the caller does not have access to the key for the file, the caller needs Backup to export encrypted files. See PrivilegeEnabler . To backup an encrypted directory call one of the overloads and specify the directory to backup along with the destination stream of the backup data. This function is intended for the backup of only encrypted directories; see BackupFileStream for backup of unencrypted directories. Note that this method does not back up the files inside the directory, only the directory entry itself. | Improve this Doc View Source GetAccessControl(SafeFileHandle) [AlphaFS] Gets a DirectorySecurity object that encapsulates the access control list (ACL) entries for the specified directory handle. Declaration [SecurityCritical] public static DirectorySecurity GetAccessControl(SafeFileHandle handle) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle to a directory containing a DirectorySecurity object that describes the directory's access control list (ACL) information. Returns Type Description DirectorySecurity A DirectorySecurity object that encapsulates the access control rules for the file described by the handle parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(SafeFileHandle, AccessControlSections) [AlphaFS] Gets a DirectorySecurity object that encapsulates the specified type of access control list (ACL) entries for a particular directory handle. Declaration [SecurityCritical] public static DirectorySecurity GetAccessControl(SafeFileHandle handle, AccessControlSections includeSections) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle to a directory containing a DirectorySecurity object that describes the directory's access control list (ACL) information. AccessControlSections includeSections One (or more) of the AccessControlSections values that specifies the type of access control list (ACL) information to receive. Returns Type Description DirectorySecurity A DirectorySecurity object that encapsulates the access control rules for the directory described by the handle parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(String) Gets a DirectorySecurity object that encapsulates the access control list (ACL) entries for the specified directory. Declaration [SecurityCritical] public static DirectorySecurity GetAccessControl(string path) Parameters Type Name Description String path The path to a directory containing a DirectorySecurity object that describes the file's access control list (ACL) information. Returns Type Description DirectorySecurity A DirectorySecurity object that encapsulates the access control rules for the file described by the path parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(String, PathFormat) [AlphaFS] Gets a DirectorySecurity object that encapsulates the access control list (ACL) entries for the specified directory. Declaration [SecurityCritical] public static DirectorySecurity GetAccessControl(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to a directory containing a DirectorySecurity object that describes the file's access control list (ACL) information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectorySecurity A DirectorySecurity object that encapsulates the access control rules for the file described by the path parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(String, AccessControlSections) Gets a DirectorySecurity object that encapsulates the specified type of access control list (ACL) entries for a particular directory. Declaration [SecurityCritical] public static DirectorySecurity GetAccessControl(string path, AccessControlSections includeSections) Parameters Type Name Description String path The path to a directory containing a DirectorySecurity object that describes the directory's access control list (ACL) information. AccessControlSections includeSections One (or more) of the AccessControlSections values that specifies the type of access control list (ACL) information to receive. Returns Type Description DirectorySecurity A DirectorySecurity object that encapsulates the access control rules for the directory described by the path parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(String, AccessControlSections, PathFormat) [AlphaFS] Gets a DirectorySecurity object that encapsulates the specified type of access control list (ACL) entries for a particular directory. Declaration [SecurityCritical] public static DirectorySecurity GetAccessControl(string path, AccessControlSections includeSections, PathFormat pathFormat) Parameters Type Name Description String path The path to a directory containing a DirectorySecurity object that describes the directory's access control list (ACL) information. AccessControlSections includeSections One (or more) of the AccessControlSections values that specifies the type of access control list (ACL) information to receive. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectorySecurity A DirectorySecurity object that encapsulates the access control rules for the directory described by the path parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetChangeTime(SafeFileHandle) [AlphaFS] Gets the change date and time of the specified directory. Declaration [SecurityCritical] public static DateTime GetChangeTime(SafeFileHandle safeFileHandle) Parameters Type Name Description SafeFileHandle safeFileHandle An open handle to the directory from which to retrieve information. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified directory. This value is expressed in local time. | Improve this Doc View Source GetChangeTime(String) [AlphaFS] Gets the change date and time of the specified directory. Declaration [SecurityCritical] public static DateTime GetChangeTime(string path) Parameters Type Name Description String path The directory for which to obtain creation date and time information. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified directory. This value is expressed in local time. | Improve this Doc View Source GetChangeTime(String, PathFormat) [AlphaFS] Gets the change date and time of the specified directory. Declaration [SecurityCritical] public static DateTime GetChangeTime(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to obtain creation date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the change date and time for the specified directory. This value is expressed in local time. | Improve this Doc View Source GetChangeTimeTransacted(KernelTransaction, String) [AlphaFS] Gets the change date and time of the specified directory. Declaration [SecurityCritical] public static DateTime GetChangeTimeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain creation date and time information. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified directory. This value is expressed in local time. | Improve this Doc View Source GetChangeTimeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the change date and time of the specified directory. Declaration [SecurityCritical] public static DateTime GetChangeTimeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain creation date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the change date and time for the specified directory. This value is expressed in local time. | Improve this Doc View Source GetChangeTimeUtc(String) [AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified directory. Declaration [SecurityCritical] public static DateTime GetChangeTimeUtc(string path) Parameters Type Name Description String path The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified directory. This value is expressed in UTC time. | Improve this Doc View Source GetChangeTimeUtc(String, PathFormat) [AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified directory. Declaration [SecurityCritical] public static DateTime GetChangeTimeUtc(string path, PathFormat pathFormat) Parameters Type Name Description String path The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the change date and time for the specified directory. This value is expressed in UTC time. | Improve this Doc View Source GetChangeTimeUtcTransacted(KernelTransaction, String) [AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified directory. Declaration [SecurityCritical] public static DateTime GetChangeTimeUtcTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified directory. This value is expressed in UTC time. | Improve this Doc View Source GetChangeTimeUtcTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified directory. Declaration [SecurityCritical] public static DateTime GetChangeTimeUtcTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the change date and time for the specified directory. This value is expressed in UTC time. | Improve this Doc View Source GetCreationTime(String) Gets the creation date and time of the specified directory. Declaration [SecurityCritical] public static DateTime GetCreationTime(string path) Parameters Type Name Description String path The directory for which to obtain creation date and time information. Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified directory. This value is expressed in local time. | Improve this Doc View Source GetCreationTime(String, PathFormat) [AlphaFS] Gets the creation date and time of the specified directory. Declaration [SecurityCritical] public static DateTime GetCreationTime(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to obtain creation date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified directory. This value is expressed in local time. | Improve this Doc View Source GetCreationTimeTransacted(KernelTransaction, String) [AlphaFS] Gets the creation date and time of the specified directory. Declaration [SecurityCritical] public static DateTime GetCreationTimeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain creation date and time information. Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified directory. This value is expressed in local time. | Improve this Doc View Source GetCreationTimeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the creation date and time of the specified directory. Declaration [SecurityCritical] public static DateTime GetCreationTimeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain creation date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified directory. This value is expressed in local time. | Improve this Doc View Source GetCreationTimeUtc(String) Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory. Declaration [SecurityCritical] public static DateTime GetCreationTimeUtc(string path) Parameters Type Name Description String path The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format. Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified directory. This value is expressed in UTC time. | Improve this Doc View Source GetCreationTimeUtc(String, PathFormat) [AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory. Declaration [SecurityCritical] public static DateTime GetCreationTimeUtc(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified directory. This value is expressed in UTC time. | Improve this Doc View Source GetCreationTimeUtcTransacted(KernelTransaction, String) [AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory. Declaration [SecurityCritical] public static DateTime GetCreationTimeUtcTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format. Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified directory. This value is expressed in UTC time. | Improve this Doc View Source GetCreationTimeUtcTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified directory. Declaration [SecurityCritical] public static DateTime GetCreationTimeUtcTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified directory. This value is expressed in UTC time. | Improve this Doc View Source GetCurrentDirectory() Gets the current working directory of the application. MSDN: Multithreaded applications and shared library code should not use the GetCurrentDirectory function and should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process, therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value. This limitation also applies to the SetCurrentDirectory and GetFullPathName functions. The exception being when the application is guaranteed to be running in a single thread, for example parsing file names from the command line argument string in the main thread prior to creating any additional threads. Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported. Declaration [SecurityCritical] public static string GetCurrentDirectory() Returns Type Description String The path of the current working directory without a trailing directory separator. | Improve this Doc View Source GetDirectories(String) Returns the names of subdirectories (including their paths) in the specified directory. Declaration [SecurityCritical] public static string[] GetDirectories(string path) Parameters Type Name Description String path The directory to search. Returns Type Description String [] An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found. Remarks The names returned by this method are prefixed with the directory information provided in path. The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetDirectories(String, String) Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory. Declaration [SecurityCritical] public static string[] GetDirectories(string path, string searchPattern) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description String [] An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found. Remarks The names returned by this method are prefixed with the directory information provided in path. The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetDirectories(String, String, SearchOption) Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories. Declaration [SecurityCritical] public static string[] GetDirectories(string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description String [] An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found. Remarks The names returned by this method are prefixed with the directory information provided in path. The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetDirectoriesTransacted(KernelTransaction, String) [AlphaFS] Returns the names of subdirectories (including their paths) in the specified directory. Declaration [SecurityCritical] public static string[] GetDirectoriesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. Returns Type Description String [] An array of the full names (including paths) of subdirectories in the specified path, or an empty array if no directories are found. Remarks The names returned by this method are prefixed with the directory information provided in path. The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetDirectoriesTransacted(KernelTransaction, String, String) [AlphaFS] Returns the names of subdirectories (including their paths) that match the specified search pattern in the specified directory. Declaration [SecurityCritical] public static string[] GetDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description String [] An array of the full names (including paths) of the subdirectories that match the search pattern in the specified directory, or an empty array if no directories are found. Remarks The names returned by this method are prefixed with the directory information provided in path. The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetDirectoriesTransacted(KernelTransaction, String, String, SearchOption) [AlphaFS] Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories. Declaration [SecurityCritical] public static string[] GetDirectoriesTransacted(KernelTransaction transaction, string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description String [] An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found. Remarks The names returned by this method are prefixed with the directory information provided in path. The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetDirectoryRoot(String) Returns the volume information, root information, or both for the specified path. Declaration [SecurityCritical] public static string GetDirectoryRoot(string path) Parameters Type Name Description String path The path of a file or directory. Returns Type Description String The volume information, root information, or both for the specified path, or null if path path does not contain root directory information. Exceptions Type Condition ArgumentException ArgumentNullException NotSupportedException | Improve this Doc View Source GetDirectoryRoot(String, PathFormat) [AlphaFS] Returns the volume information, root information, or both for the specified path. Declaration [SecurityCritical] public static string GetDirectoryRoot(string path, PathFormat pathFormat) Parameters Type Name Description String path The path of a file or directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The volume information, root information, or both for the specified path, or null if path path does not contain root directory information. Exceptions Type Condition ArgumentException ArgumentNullException NotSupportedException | Improve this Doc View Source GetDirectoryRootTransacted(KernelTransaction, String) [AlphaFS] Returns the volume information, root information, or both for the specified path. Declaration [SecurityCritical] public static string GetDirectoryRootTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path of a file or directory. Returns Type Description String The volume information, root information, or both for the specified path, or null if path path does not contain root directory information. Exceptions Type Condition ArgumentException ArgumentNullException NotSupportedException | Improve this Doc View Source GetDirectoryRootTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Returns the volume information, root information, or both for the specified path. Declaration [SecurityCritical] public static string GetDirectoryRootTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path of a file or directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The volume information, root information, or both for the specified path, or null if path path does not contain root directory information. Exceptions Type Condition ArgumentException ArgumentNullException NotSupportedException | Improve this Doc View Source GetFileIdInfo(String) [AlphaFS] Gets the unique identifier for a directory. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public static FileIdInfo GetFileIdInfo(string path) Parameters Type Name Description String path The path to the directory. Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a directory can change over time. | Improve this Doc View Source GetFileIdInfo(String, PathFormat) [AlphaFS] Gets the unique identifier for a directory. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public static FileIdInfo GetFileIdInfo(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a directory can change over time. | Improve this Doc View Source GetFileIdInfoTransacted(KernelTransaction, String) [AlphaFS] Gets the unique identifier for a directory. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public static FileIdInfo GetFileIdInfoTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a directory can change over time. | Improve this Doc View Source GetFileIdInfoTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the unique identifier for a directory. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public static FileIdInfo GetFileIdInfoTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a directory can change over time. | Improve this Doc View Source GetFileInfoByHandle(SafeFileHandle) [AlphaFS] Retrieves file information for the specified SafeFileHandle . Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandle(SafeFileHandle handle) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle connected to the open file or directory from which to retrieve the information. Returns Type Description ByHandleFileInfo A ByHandleFileInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the directory ID for a directory can change over time. | Improve this Doc View Source GetFileInfoByHandle(String) [AlphaFS] Retrieves file information for the specified directory. Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandle(string path) Parameters Type Name Description String path The path to the directory. Returns Type Description ByHandleFileInfo A ByHandleFileInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the directory ID for a directory can change over time. | Improve this Doc View Source GetFileInfoByHandle(String, PathFormat) [AlphaFS] Retrieves file information for the specified directory. Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandle(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description ByHandleFileInfo A ByHandleFileInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the directory ID for a directory can change over time. | Improve this Doc View Source GetFileInfoByHandleTransacted(KernelTransaction, String) [AlphaFS] Retrieves file information for the specified directory. Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandleTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Returns Type Description ByHandleFileInfo A ByHandleFileInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the directory ID for a directory can change over time. | Improve this Doc View Source GetFileInfoByHandleTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Retrieves file information for the specified directory. Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandleTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description ByHandleFileInfo A ByHandleFileInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the directory ID for a directory can change over time. | Improve this Doc View Source GetFiles(String) Returns the names of files (including their paths) in the specified directory. Declaration [SecurityCritical] public static string[] GetFiles(string path) Parameters Type Name Description String path The directory to search. Returns Type Description String [] An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found. Remarks The returned file names are appended to the supplied path parameter. The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required. The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFiles(String, String) Returns the names of files (including their paths) that match the specified search pattern in the specified directory. Declaration [SecurityCritical] public static string[] GetFiles(string path, string searchPattern) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description String [] An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found. Remarks The returned file names are appended to the supplied path parameter. The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required. The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFiles(String, String, SearchOption) Returns the names of files (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories. Declaration [SecurityCritical] public static string[] GetFiles(string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description String [] An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found. Remarks The returned file names are appended to the supplied path parameter. The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required. The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFilesTransacted(KernelTransaction, String) [AlphaFS] Returns the names of files (including their paths) in the specified directory. Declaration [SecurityCritical] public static string[] GetFilesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. Returns Type Description String [] An array of the full names (including paths) for the files in the specified directory, or an empty array if no files are found. Remarks The returned file names are appended to the supplied path parameter. The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required. The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFilesTransacted(KernelTransaction, String, String) [AlphaFS] Returns the names of files (including their paths) that match the specified search pattern in the specified directory. Declaration [SecurityCritical] public static string[] GetFilesTransacted(KernelTransaction transaction, string path, string searchPattern) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description String [] An array of the full names (including paths) for the files in the specified directory that match the specified search pattern, or an empty array if no files are found. Remarks The returned file names are appended to the supplied path parameter. The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required. The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFilesTransacted(KernelTransaction, String, String, SearchOption) [AlphaFS] Returns the names of files (including their paths) that match the specified search pattern in the current directory, and optionally searches subdirectories. Declaration [SecurityCritical] public static string[] GetFilesTransacted(KernelTransaction transaction, string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description String [] An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found. Remarks The returned file names are appended to the supplied path parameter. The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required. The EnumerateFiles and GetFiles methods differ as follows: When you use EnumerateFiles, you can start enumerating the collection of names before the whole collection is returned; when you use GetFiles, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemEntries(String) Returns the names of all files and subdirectories in the specified directory. Declaration [SecurityCritical] public static string[] GetFileSystemEntries(string path) Parameters Type Name Description String path The directory for which file and subdirectory names are returned. Returns Type Description String [] An string[] array of the names of files and subdirectories in the specified directory. Remarks The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries, you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemEntries(String, String) Returns an array of file system entries that match the specified search criteria. Declaration [SecurityCritical] public static string[] GetFileSystemEntries(string path, string searchPattern) Parameters Type Name Description String path The path to be searched. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description String [] An string[] array of file system entries that match the specified search criteria. Remarks The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries, you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemEntries(String, String, SearchOption) Gets an array of all the file names and directory names that match a searchPattern in a specified path, and optionally searches subdirectories. Declaration [SecurityCritical] public static string[] GetFileSystemEntries(string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description String [] An string[] array of file system entries that match the specified search criteria. Remarks The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries, you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemEntriesTransacted(KernelTransaction, String) [AlphaFS] Returns the names of all files and subdirectories in the specified directory. Declaration [SecurityCritical] public static string[] GetFileSystemEntriesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which file and subdirectory names are returned. Returns Type Description String [] An string[] array of the names of files and subdirectories in the specified directory. Remarks The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries, you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemEntriesTransacted(KernelTransaction, String, String) [AlphaFS] Returns an array of file system entries that match the specified search criteria. Declaration [SecurityCritical] public static string[] GetFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to be searched. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description String [] An string[] array of file system entries that match the specified search criteria. Remarks The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries, you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemEntriesTransacted(KernelTransaction, String, String, SearchOption) [AlphaFS] Gets an array of all the file names and directory names that match a searchPattern in a specified path, and optionally searches subdirectories. Declaration [SecurityCritical] public static string[] GetFileSystemEntriesTransacted(KernelTransaction transaction, string path, string searchPattern, SearchOption searchOption) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory to search. String searchPattern The search string to match against the names of directories in path . This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description String [] An string[] array of file system entries that match the specified search criteria. Remarks The EnumerateFileSystemEntries and GetFileSystemEntries methods differ as follows: When you use EnumerateFileSystemEntries, you can start enumerating the collection of entries before the whole collection is returned; when you use GetFileSystemEntries, you must wait for the whole array of entries to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateFiles can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemEntryInfo(String) [AlphaFS] Gets the FileSystemEntryInfo of the directory on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfo(string path) Parameters Type Name Description String path The path to the directory. Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the directory. | Improve this Doc View Source GetFileSystemEntryInfo(String, PathFormat) [AlphaFS] Gets the FileSystemEntryInfo of the directory on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfo(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the directory. | Improve this Doc View Source GetFileSystemEntryInfo(String, Boolean) [AlphaFS] Gets the FileSystemEntryInfo of the directory on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfo(string path, bool continueOnException) Parameters Type Name Description String path The path to the directory. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as ACLs protected directories or non-accessible reparse points. Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the directory. | Improve this Doc View Source GetFileSystemEntryInfo(String, Boolean, PathFormat) [AlphaFS] Gets the FileSystemEntryInfo of the directory on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfo(string path, bool continueOnException, PathFormat pathFormat) Parameters Type Name Description String path The path to the directory. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as ACLs protected directories or non-accessible reparse points. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the directory. | Improve this Doc View Source GetFileSystemEntryInfoTransacted(KernelTransaction, String) [AlphaFS] Gets the FileSystemEntryInfo of the directory on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfoTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the directory. | Improve this Doc View Source GetFileSystemEntryInfoTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the FileSystemEntryInfo of the directory on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfoTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the directory. | Improve this Doc View Source GetFileSystemEntryInfoTransacted(KernelTransaction, String, Boolean) [AlphaFS] Gets the FileSystemEntryInfo of the directory on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfoTransacted(KernelTransaction transaction, string path, bool continueOnException) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as ACLs protected directories or non-accessible reparse points. Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the directory. | Improve this Doc View Source GetFileSystemEntryInfoTransacted(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Gets the FileSystemEntryInfo of the directory on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfoTransacted(KernelTransaction transaction, string path, bool continueOnException, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as ACLs protected directories or non-accessible reparse points. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the directory. | Improve this Doc View Source GetLastAccessTime(String) Gets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTime(string path) Parameters Type Name Description String path The directory for which to obtain access date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTime(String, PathFormat) [AlphaFS] Gets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTime(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to obtain access date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTimeTransacted(KernelTransaction, String) [AlphaFS] Gets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain access date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTimeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain access date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTimeUtc(String) Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeUtc(string path) Parameters Type Name Description String path The directory for which to obtain access date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTimeUtc(String, PathFormat) [AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeUtc(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to obtain access date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTimeUtcTransacted(KernelTransaction, String) [AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain access date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTimeUtcTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain access date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTime(String) Gets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTime(string path) Parameters Type Name Description String path The directory for which to obtain write date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTime(String, PathFormat) [AlphaFS] Gets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTime(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to obtain write date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTimeTransacted(KernelTransaction, String) [AlphaFS] Gets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain write date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTimeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain write date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTimeUtc(String) Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeUtc(string path) Parameters Type Name Description String path The directory for which to obtain write date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTimeUtc(String, PathFormat) [AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeUtc(string path, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to obtain write date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTimeUtcTransacted(KernelTransaction, String) [AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain write date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTimeUtcTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified directory was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to obtain write date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified directory was last written to. This value is expressed in local time. | Improve this Doc View Source GetLinkTargetInfo(String) [AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system. Declaration [SecurityCritical] public static LinkTargetInfo GetLinkTargetInfo(string path) Parameters Type Name Description String path The path to the reparse point. Returns Type Description LinkTargetInfo An instance of LinkTargetInfo or SymbolicLinkTargetInfo containing information about the symbolic link or mount point pointed to by path . Exceptions Type Condition ArgumentException ArgumentNullException NotAReparsePointException NotSupportedException UnrecognizedReparsePointException | Improve this Doc View Source GetLinkTargetInfo(String, PathFormat) [AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system. Declaration [SecurityCritical] public static LinkTargetInfo GetLinkTargetInfo(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description LinkTargetInfo An instance of LinkTargetInfo or SymbolicLinkTargetInfo containing information about the symbolic link or mount point pointed to by path . Exceptions Type Condition ArgumentException ArgumentNullException NotAReparsePointException NotSupportedException UnrecognizedReparsePointException | Improve this Doc View Source GetLinkTargetInfoTransacted(KernelTransaction, String) [AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system. Declaration [SecurityCritical] public static LinkTargetInfo GetLinkTargetInfoTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the reparse point. Returns Type Description LinkTargetInfo An instance of LinkTargetInfo or SymbolicLinkTargetInfo containing information about the symbolic link or mount point pointed to by path . Exceptions Type Condition ArgumentException ArgumentNullException NotAReparsePointException NotSupportedException UnrecognizedReparsePointException | Improve this Doc View Source GetLinkTargetInfoTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system. Declaration [SecurityCritical] public static LinkTargetInfo GetLinkTargetInfoTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description LinkTargetInfo An instance of LinkTargetInfo or SymbolicLinkTargetInfo containing information about the symbolic link or mount point pointed to by path . Exceptions Type Condition ArgumentException ArgumentNullException NotAReparsePointException NotSupportedException UnrecognizedReparsePointException | Improve this Doc View Source GetLogicalDrives() Retrieves the names of the logical drives on the Computer in the form \"<drive letter>:&quot;. Declaration [SecurityCritical] public static string[] GetLogicalDrives() Returns Type Description String [] An array of type String that represents the logical drives on the Computer. | Improve this Doc View Source GetLogicalDrives(Boolean, Boolean) [AlphaFS] Retrieves the names of the logical drives on the Computer in the form \"C:&quot;. Declaration [SecurityCritical] public static string[] GetLogicalDrives(bool fromEnvironment, bool isReady) Parameters Type Name Description Boolean fromEnvironment Retrieve logical drives as known by the Environment. Boolean isReady Retrieve only when accessible (IsReady) logical drives. Returns Type Description String [] An array of type String that represents the logical drives on the Computer. | Improve this Doc View Source GetParent(String) Retrieves the parent directory of the specified path, including both absolute and relative paths. Declaration [SecurityCritical] public static DirectoryInfo GetParent(string path) Parameters Type Name Description String path The path for which to retrieve the parent directory. Returns Type Description DirectoryInfo The parent directory, or null if path is the root directory, including the root of a UNC server or share name. | Improve this Doc View Source GetParent(String, PathFormat) [AlphaFS] Retrieves the parent directory of the specified path, including both absolute and relative paths. Declaration [SecurityCritical] public static DirectoryInfo GetParent(string path, PathFormat pathFormat) Parameters Type Name Description String path The path for which to retrieve the parent directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo The parent directory, or null if path is the root directory, including the root of a UNC server or share name. | Improve this Doc View Source GetParentTransacted(KernelTransaction, String) [AlphaFS] Retrieves the parent directory of the specified path, including both absolute and relative paths. Declaration [SecurityCritical] public static DirectoryInfo GetParentTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path for which to retrieve the parent directory. Returns Type Description DirectoryInfo The parent directory, or null if path is the root directory, including the root of a UNC server or share name. | Improve this Doc View Source GetParentTransacted(KernelTransaction, String, PathFormat) Retrieves the parent directory of the specified path, including both absolute and relative paths. Declaration [SecurityCritical] public static DirectoryInfo GetParentTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path for which to retrieve the parent directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo The parent directory, or null if path is the root directory, including the root of a UNC server or share name. | Improve this Doc View Source GetProperties(String) [AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points. Properties include aggregated info from FileAttributes of each encountered file system object, plus additional ones: Total, File, Size and Error. Total: is the total number of enumerated objects. File: is the total number of files. File is considered when object is neither Directory nor ReparsePoint . Size: is the total size of enumerated objects. Error: is the total number of errors encountered during enumeration. Declaration [SecurityCritical] public static Dictionary<string, long> GetProperties(string path) Parameters Type Name Description String path The target directory. Returns Type Description Dictionary < String , Int64 > A dictionary mapping the keys mentioned above to their respective aggregated values. Remarks Directory: is an object which has Directory attribute without ReparsePoint one. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetProperties(String, DirectoryEnumerationOptions) [AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points. Properties include aggregated info from FileAttributes of each encountered file system object, plus additional ones: Total, File, Size and Error. Total: is the total number of enumerated objects. File: is the total number of files. File is considered when object is neither Directory nor ReparsePoint . Size: is the total size of enumerated objects. Error: is the total number of errors encountered during enumeration. Declaration [SecurityCritical] public static Dictionary<string, long> GetProperties(string path, DirectoryEnumerationOptions options) Parameters Type Name Description String path The target directory. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description Dictionary < String , Int64 > A dictionary mapping the keys mentioned above to their respective aggregated values. Remarks Directory: is an object which has Directory attribute without ReparsePoint one. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetProperties(String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points. Properties include aggregated info from FileAttributes of each encountered file system object, plus additional ones: Total, File, Size and Error. Total: is the total number of enumerated objects. File: is the total number of files. File is considered when object is neither Directory nor ReparsePoint . Size: is the total size of enumerated objects. Error: is the total number of errors encountered during enumeration. Declaration [SecurityCritical] public static Dictionary<string, long> GetProperties(string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description String path The target directory. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Dictionary < String , Int64 > A dictionary mapping the keys mentioned above to their respective aggregated values. Remarks Directory: is an object which has Directory attribute without ReparsePoint one. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetProperties(String, PathFormat) [AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points. Properties include aggregated info from FileAttributes of each encountered file system object, plus additional ones: Total, File, Size and Error. Total: is the total number of enumerated objects. File: is the total number of files. File is considered when object is neither Directory nor ReparsePoint . Size: is the total size of enumerated objects. Error: is the total number of errors encountered during enumeration. Declaration [SecurityCritical] public static Dictionary<string, long> GetProperties(string path, PathFormat pathFormat) Parameters Type Name Description String path The target directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Dictionary < String , Int64 > A dictionary mapping the keys mentioned above to their respective aggregated values. Remarks Directory: is an object which has Directory attribute without ReparsePoint one. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetPropertiesTransacted(KernelTransaction, String) [AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points. Properties include aggregated info from FileAttributes of each encountered file system object, plus additional ones: Total, File, Size and Error. Total: is the total number of enumerated objects. File: is the total number of files. File is considered when object is neither Directory nor ReparsePoint . Size: is the total size of enumerated objects. Error: is the total number of errors encountered during enumeration. Declaration [SecurityCritical] public static Dictionary<string, long> GetPropertiesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The target directory. Returns Type Description Dictionary < String , Int64 > A dictionary mapping the keys mentioned above to their respective aggregated values. Remarks Directory: is an object which has Directory attribute without ReparsePoint one. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetPropertiesTransacted(KernelTransaction, String, DirectoryEnumerationOptions) [AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points. Properties include aggregated info from FileAttributes of each encountered file system object, plus additional ones: Total, File, Size and Error. Total: is the total number of enumerated objects. File: is the total number of files. File is considered when object is neither Directory nor ReparsePoint . Size: is the total size of enumerated objects. Error: is the total number of errors encountered during enumeration. Declaration [SecurityCritical] public static Dictionary<string, long> GetPropertiesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The target directory. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description Dictionary < String , Int64 > A dictionary mapping the keys mentioned above to their respective aggregated values. Remarks Directory: is an object which has Directory attribute without ReparsePoint one. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetPropertiesTransacted(KernelTransaction, String, DirectoryEnumerationOptions, PathFormat) [AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points. Properties include aggregated info from FileAttributes of each encountered file system object, plus additional ones: Total, File, Size and Error. Total: is the total number of enumerated objects. File: is the total number of files. File is considered when object is neither Directory nor ReparsePoint . Size: is the total size of enumerated objects. Error: is the total number of errors encountered during enumeration. Declaration [SecurityCritical] public static Dictionary<string, long> GetPropertiesTransacted(KernelTransaction transaction, string path, DirectoryEnumerationOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The target directory. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Dictionary < String , Int64 > A dictionary mapping the keys mentioned above to their respective aggregated values. Remarks Directory: is an object which has Directory attribute without ReparsePoint one. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetPropertiesTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the properties of the particular directory without following any symbolic links or mount points. Properties include aggregated info from FileAttributes of each encountered file system object, plus additional ones: Total, File, Size and Error. Total: is the total number of enumerated objects. File: is the total number of files. File is considered when object is neither Directory nor ReparsePoint . Size: is the total size of enumerated objects. Error: is the total number of errors encountered during enumeration. Declaration [SecurityCritical] public static Dictionary<string, long> GetPropertiesTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The target directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Dictionary < String , Int64 > A dictionary mapping the keys mentioned above to their respective aggregated values. Remarks Directory: is an object which has Directory attribute without ReparsePoint one. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetSize(String) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSize(string path) Parameters Type Name Description String path The path to the directory. Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSize(String, PathFormat) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSize(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSize(String, Boolean) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSize(string path, bool sizeOfAllStreams) Parameters Type Name Description String path The path to the directory. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSize(String, Boolean, PathFormat) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSize(string path, bool sizeOfAllStreams, PathFormat pathFormat) Parameters Type Name Description String path The path to the directory. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSize(String, Boolean, Boolean) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSize(string path, bool sizeOfAllStreams, bool recursive) Parameters Type Name Description String path The path to the directory. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. Boolean recursive true to include subdirectories. Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSize(String, Boolean, Boolean, PathFormat) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSize(string path, bool sizeOfAllStreams, bool recursive, PathFormat pathFormat) Parameters Type Name Description String path The path to the directory. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. Boolean recursive true to include subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String, Boolean) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path, bool sizeOfAllStreams) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path, bool sizeOfAllStreams, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String, Boolean, Boolean) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path, bool sizeOfAllStreams, bool recursive) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. Boolean recursive true to include subdirectories. Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String, Boolean, Boolean, PathFormat) [AlphaFS] Retrieves the size of all alternate data streams of the specified directory and it files. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path, bool sizeOfAllStreams, bool recursive, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the directory. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. Boolean recursive true to include subdirectories. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The size of all alternate data streams of the specified directory and its files. | Improve this Doc View Source HasInheritedPermissions(String) [AlphaFS] Checks if the directory has permission inheritance enabled. Declaration public static bool HasInheritedPermissions(string path) Parameters Type Name Description String path The full path to the directory to check. Returns Type Description Boolean true if permission inheritance is enabled, false if permission inheritance is disabled. | Improve this Doc View Source HasInheritedPermissions(String, PathFormat) [AlphaFS] Checks if the directory has permission inheritance enabled. Declaration public static bool HasInheritedPermissions(string path, PathFormat pathFormat) Parameters Type Name Description String path The full path to the directory to check. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean true if permission inheritance is enabled, false if permission inheritance is disabled. | Improve this Doc View Source ImportEncryptedDirectoryRaw(Stream, String) [AlphaFS] Restores (import) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ImportEncryptedDirectoryRaw(Stream inputStream, string destinationPath) Parameters Type Name Description Stream inputStream The stream to read previously backed up data from. String destinationPath The path of the destination directory to restore to. Remarks If the caller does not have access to the key for the directory, the caller needs Backup to restore encrypted directories. See PrivilegeEnabler . To restore an encrypted directory call one of the overloads and specify the file to restore along with the destination stream of the restored data. This function is intended for the restoration of only encrypted directories; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source ImportEncryptedDirectoryRaw(Stream, String, PathFormat) [AlphaFS] Restores (import) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ImportEncryptedDirectoryRaw(Stream inputStream, string destinationPath, PathFormat pathFormat) Parameters Type Name Description Stream inputStream The stream to read previously backed up data from. String destinationPath The path of the destination directory to restore to. PathFormat pathFormat The path format of the destinationPath parameter. Remarks If the caller does not have access to the key for the directory, the caller needs Backup to restore encrypted directories. See PrivilegeEnabler . To restore an encrypted directory call one of the overloads and specify the file to restore along with the destination stream of the restored data. This function is intended for the restoration of only encrypted directories; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source ImportEncryptedDirectoryRaw(Stream, String, Boolean) [AlphaFS] Restores (import) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ImportEncryptedDirectoryRaw(Stream inputStream, string destinationPath, bool overwriteHidden) Parameters Type Name Description Stream inputStream The stream to read previously backed up data from. String destinationPath The path of the destination directory to restore to. Boolean overwriteHidden If set to true a hidden directory will be overwritten on import. Remarks If the caller does not have access to the key for the directory, the caller needs Backup to restore encrypted directories. See PrivilegeEnabler . To restore an encrypted directory call one of the overloads and specify the file to restore along with the destination stream of the restored data. This function is intended for the restoration of only encrypted directories; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source ImportEncryptedDirectoryRaw(Stream, String, Boolean, PathFormat) [AlphaFS] Restores (import) encrypted directories. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ImportEncryptedDirectoryRaw(Stream inputStream, string destinationPath, bool overwriteHidden, PathFormat pathFormat) Parameters Type Name Description Stream inputStream The stream to read previously backed up data from. String destinationPath The path of the destination directory to restore to. Boolean overwriteHidden If set to true a hidden directory will be overwritten on import. PathFormat pathFormat The path format of the destinationPath parameter. Remarks If the caller does not have access to the key for the directory, the caller needs Backup to restore encrypted directories. See PrivilegeEnabler . To restore an encrypted directory call one of the overloads and specify the file to restore along with the destination stream of the restored data. This function is intended for the restoration of only encrypted directories; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source IsEmpty(String) [AlphaFS] Determines whether the given directory is empty; i.e. it contains no files and no subdirectories. Declaration [SecurityCritical] public static bool IsEmpty(string directoryPath) Parameters Type Name Description String directoryPath The path to the directory. Returns Type Description Boolean Returns true when the directory contains no file system objects. Returns false when directory contains at least one file system object. | Improve this Doc View Source IsEmpty(String, PathFormat) [AlphaFS] Determines whether the given directory is empty; i.e. it contains no files and no subdirectories. Declaration [SecurityCritical] public static bool IsEmpty(string directoryPath, PathFormat pathFormat) Parameters Type Name Description String directoryPath The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true when the directory contains no file system objects. Returns false when directory contains at least one file system object. | Improve this Doc View Source IsEmptyTransacted(KernelTransaction, String) [AlphaFS] Determines whether the given directory is empty; i.e. it contains no files and no subdirectories. Declaration [SecurityCritical] public static bool IsEmptyTransacted(KernelTransaction transaction, string directoryPath) Parameters Type Name Description KernelTransaction transaction The transaction. String directoryPath The path to the directory. Returns Type Description Boolean Returns true when the directory contains no file system objects. Returns false when directory contains at least one file system object. | Improve this Doc View Source IsEmptyTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Determines whether the given directory is empty; i.e. it contains no files and no subdirectories. Declaration [SecurityCritical] public static bool IsEmptyTransacted(KernelTransaction transaction, string directoryPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String directoryPath The path to the directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true when the directory contains no file system objects. Returns false when directory contains at least one file system object. | Improve this Doc View Source Move(String, String) Moves a file or a directory and its contents to a new location. Declaration [SecurityCritical] public static void Move(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. Remarks This method does not work across disk volumes. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions) [AlphaFS] Moves a file or a directory and its contents to a new location, MoveOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a file or a directory and its contents to a new location, MoveOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a file or a directory and its contents to a new location, MoveOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, PathFormat) [AlphaFS] Moves a file or a directory and its contents to a new location, MoveOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, PathFormat) [AlphaFS] Moves a file or a directory and its contents to a new location. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory path. String destinationPath The destination directory path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String) [AlphaFS] Moves a file or a directory and its contents to a new location. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions) [AlphaFS] Moves a file or a directory and its contents to a new location, MoveOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a file or a directory and its contents to a new location, MoveOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a file or a directory and its contents to a new location, MoveOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, PathFormat) [AlphaFS] Moves a file or a directory and its contents to a new location, MoveOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Moves a file or a directory and its contents to a new location. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory path. String destinationPath The destination directory path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks This method does not work across disk volumes. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source SetAccessControl(SafeFileHandle, DirectorySecurity) Applies access control list (ACL) entries described by a DirectorySecurity object to the specified directory. Declaration [SecurityCritical] public static void SetAccessControl(SafeFileHandle handle, DirectorySecurity directorySecurity) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle to a file to add or remove access control list (ACL) entries from. DirectorySecurity directorySecurity A DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter. | Improve this Doc View Source SetAccessControl(SafeFileHandle, DirectorySecurity, AccessControlSections) Applies access control list (ACL) entries described by a DirectorySecurity object to the specified directory. Declaration [SecurityCritical] public static void SetAccessControl(SafeFileHandle handle, DirectorySecurity directorySecurity, AccessControlSections includeSections) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle to a file to add or remove access control list (ACL) entries from. DirectorySecurity directorySecurity A DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter. AccessControlSections includeSections One or more of the AccessControlSections values that specifies the type of access control list (ACL) information to set. | Improve this Doc View Source SetAccessControl(String, DirectorySecurity) Applies access control list (ACL) entries described by a DirectorySecurity object to the specified directory. Declaration [SecurityCritical] public static void SetAccessControl(string path, DirectorySecurity directorySecurity) Parameters Type Name Description String path A directory to add or remove access control list (ACL) entries from. DirectorySecurity directorySecurity A DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter. | Improve this Doc View Source SetAccessControl(String, DirectorySecurity, PathFormat) [AlphaFS] Applies access control list (ACL) entries described by a DirectorySecurity object to the specified directory. Declaration [SecurityCritical] public static void SetAccessControl(string path, DirectorySecurity directorySecurity, PathFormat pathFormat) Parameters Type Name Description String path A directory to add or remove access control list (ACL) entries from. DirectorySecurity directorySecurity A DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetAccessControl(String, DirectorySecurity, AccessControlSections) Applies access control list (ACL) entries described by a DirectorySecurity object to the specified directory. Declaration [SecurityCritical] public static void SetAccessControl(string path, DirectorySecurity directorySecurity, AccessControlSections includeSections) Parameters Type Name Description String path A directory to add or remove access control list (ACL) entries from. DirectorySecurity directorySecurity A DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter. AccessControlSections includeSections One or more of the AccessControlSections values that specifies the type of access control list (ACL) information to set. Remarks Note that unlike SetAccessControl(String, FileSecurity) this method does not automatically determine what parts of the specified DirectorySecurity instance has been modified. Instead, the parameter includeSections is used to specify what entries from directorySecurity to apply to path . | Improve this Doc View Source SetAccessControl(String, DirectorySecurity, AccessControlSections, PathFormat) [AlphaFS] Applies access control list (ACL) entries described by a DirectorySecurity object to the specified directory. Declaration [SecurityCritical] public static void SetAccessControl(string path, DirectorySecurity directorySecurity, AccessControlSections includeSections, PathFormat pathFormat) Parameters Type Name Description String path A directory to add or remove access control list (ACL) entries from. DirectorySecurity directorySecurity A DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter. AccessControlSections includeSections One or more of the AccessControlSections values that specifies the type of access control list (ACL) information to set. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Note that unlike SetAccessControl(String, FileSecurity) this method does not automatically determine what parts of the specified DirectorySecurity instance has been modified. Instead, the parameter includeSections is used to specify what entries from directorySecurity to apply to path . | Improve this Doc View Source SetCreationTime(String, DateTime) Sets the date and time the directory was created. Declaration [SecurityCritical] public static void SetCreationTime(string path, DateTime creationTime) Parameters Type Name Description String path The directory for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. | Improve this Doc View Source SetCreationTime(String, DateTime, PathFormat) [AlphaFS] Sets the date and time the directory was created. Declaration [SecurityCritical] public static void SetCreationTime(string path, DateTime creationTime, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTime(String, DateTime, Boolean) [AlphaFS] Sets the date and time the directory was created. Declaration [SecurityCritical] public static void SetCreationTime(string path, DateTime creationTime, bool modifyReparsePoint) Parameters Type Name Description String path The directory for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetCreationTime(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time the directory was created. Declaration [SecurityCritical] public static void SetCreationTime(string path, DateTime creationTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeTransacted(KernelTransaction transaction, string path, DateTime creationTime) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. | Improve this Doc View Source SetCreationTimeTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeTransacted(KernelTransaction transaction, string path, DateTime creationTime, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeTransacted(KernelTransaction transaction, string path, DateTime creationTime, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetCreationTimeTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeTransacted(KernelTransaction transaction, string path, DateTime creationTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeUtc(String, DateTime) Sets the date and time, in coordinated universal time (UTC), that the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc) Parameters Type Name Description String path The directory for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetCreationTimeUtc(String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeUtc(String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc, bool modifyReparsePoint) Parameters Type Name Description String path The directory for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetCreationTimeUtc(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeUtcTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetCreationTimeUtcTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetCreationTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the directory was created. Declaration [SecurityCritical] public static void SetCreationTimeUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCurrentDirectory(String) Sets the application's current working directory to the specified directory. MSDN: Multithreaded applications and shared library code should not use the GetCurrentDirectory function and should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process, therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value. This limitation also applies to the SetCurrentDirectory and GetFullPathName functions. The exception being when the application is guaranteed to be running in a single thread, for example parsing file names from the command line argument string in the main thread prior to creating any additional threads. Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported. Declaration [SecurityCritical] public static void SetCurrentDirectory(string path) Parameters Type Name Description String path The path to which the current working directory is set. | Improve this Doc View Source SetCurrentDirectory(String, PathFormat) Sets the application's current working directory to the specified directory. MSDN: Multithreaded applications and shared library code should not use the GetCurrentDirectory function and should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process, therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value. This limitation also applies to the SetCurrentDirectory and GetFullPathName functions. The exception being when the application is guaranteed to be running in a single thread, for example parsing file names from the command line argument string in the main thread prior to creating any additional threads. Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported. Declaration [SecurityCritical] public static void SetCurrentDirectory(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to which the current working directory is set. PathFormat pathFormat Indicates the format of the path parameter. | Improve this Doc View Source SetLastAccessTime(String, DateTime) Sets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTime(string path, DateTime lastAccessTime) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. | Improve this Doc View Source SetLastAccessTime(String, DateTime, PathFormat) [AlphaFS] Sets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTime(string path, DateTime lastAccessTime, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTime(String, DateTime, Boolean) [AlphaFS] Sets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTime(string path, DateTime lastAccessTime, bool modifyReparsePoint) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastAccessTime(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTime(string path, DateTime lastAccessTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeTransacted(KernelTransaction transaction, string path, DateTime lastAccessTime) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. | Improve this Doc View Source SetLastAccessTimeTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeTransacted(KernelTransaction transaction, string path, DateTime lastAccessTime, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeTransacted(KernelTransaction transaction, string path, DateTime lastAccessTime, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastAccessTimeTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeTransacted(KernelTransaction transaction, string path, DateTime lastAccessTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeUtc(String, DateTime) Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc) Parameters Type Name Description String path The directory for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetLastAccessTimeUtc(String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeUtc(String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc, bool modifyReparsePoint) Parameters Type Name Description String path The directory for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastAccessTimeUtc(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeUtcTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastAccessTimeUtc) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetLastAccessTimeUtcTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastAccessTimeUtc, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastAccessTimeUtc, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastAccessTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastAccessTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTime(String, DateTime) Sets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTime(string path, DateTime lastWriteTime) Parameters Type Name Description String path The directory for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. | Improve this Doc View Source SetLastWriteTime(String, DateTime, PathFormat) [AlphaFS] Sets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTime(string path, DateTime lastWriteTime, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTime(String, DateTime, Boolean) [AlphaFS] Sets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTime(string path, DateTime lastWriteTime, bool modifyReparsePoint) Parameters Type Name Description String path The directory for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastWriteTime(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTime(string path, DateTime lastWriteTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeTransacted(KernelTransaction transaction, string path, DateTime lastWriteTime) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. | Improve this Doc View Source SetLastWriteTimeTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeTransacted(KernelTransaction transaction, string path, DateTime lastWriteTime, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeTransacted(KernelTransaction transaction, string path, DateTime lastWriteTime, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastWriteTimeTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeTransacted(KernelTransaction transaction, string path, DateTime lastWriteTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeUtc(String, DateTime) Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc) Parameters Type Name Description String path The directory for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetLastWriteTimeUtc(String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeUtc(String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc, bool modifyReparsePoint) Parameters Type Name Description String path The directory for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastWriteTimeUtc(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeUtcTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastWriteTimeUtc) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetLastWriteTimeUtcTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastWriteTimeUtc, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastWriteTimeUtc, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastWriteTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified directory was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastWriteTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestamps(String, DateTime, DateTime, DateTime) [AlphaFS] Sets all the date and time stamps for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestamps(string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime) Parameters Type Name Description String path The directory for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. | Improve this Doc View Source SetTimestamps(String, DateTime, DateTime, DateTime, PathFormat) [AlphaFS] Sets all the date and time stamps for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestamps(string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestamps(String, DateTime, DateTime, DateTime, Boolean) [AlphaFS] Sets all the date and time stamps for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestamps(string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, bool modifyReparsePoint) Parameters Type Name Description String path The directory for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetTimestamps(String, DateTime, DateTime, DateTime, Boolean, PathFormat) [AlphaFS] Sets all the date and time stamps for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestamps(string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsTransacted(KernelTransaction, String, DateTime, DateTime, DateTime) [AlphaFS] Sets all the date and time stamps for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsTransacted(KernelTransaction transaction, string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. | Improve this Doc View Source SetTimestampsTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, PathFormat) [AlphaFS] Sets all the date and time stamps for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsTransacted(KernelTransaction transaction, string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, Boolean) [AlphaFS] Sets all the date and time stamps for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsTransacted(KernelTransaction transaction, string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetTimestampsTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, Boolean, PathFormat) [AlphaFS] Sets all the date and time stamps for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsTransacted(KernelTransaction transaction, string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsUtc(String, DateTime, DateTime, DateTime) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsUtc(string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc) Parameters Type Name Description String path The directory for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetTimestampsUtc(String, DateTime, DateTime, DateTime, PathFormat) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsUtc(string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsUtc(String, DateTime, DateTime, DateTime, Boolean) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsUtc(string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, bool modifyReparsePoint) Parameters Type Name Description String path The directory for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetTimestampsUtc(String, DateTime, DateTime, DateTime, Boolean, PathFormat) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsUtc(string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The directory for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsUtcTransacted(KernelTransaction, String, DateTime, DateTime, DateTime) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetTimestampsUtcTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, PathFormat) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsUtcTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, Boolean) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetTimestampsUtcTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, Boolean, PathFormat) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified directory, at once. Declaration [SecurityCritical] public static void SetTimestampsUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The directory for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source TransferTimestamps(String, String) [AlphaFS] Copies the date and timestamps for the specified directories. Declaration [Obsolete(\"Use new method name: CopyTimestamp\")] [SecurityCritical] public static void TransferTimestamps(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. | Improve this Doc View Source TransferTimestamps(String, String, PathFormat) [AlphaFS] Copies the date and timestamps for the specified directories. Declaration [Obsolete(\"Use new method name: CopyTimestamp\")] [SecurityCritical] public static void TransferTimestamps(string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. | Improve this Doc View Source TransferTimestampsTransacted(KernelTransaction, String, String) [AlphaFS] Copies the date and timestamps for the specified directories. Declaration [Obsolete(\"Use new method name: CopyTimestampsTransacted\")] [SecurityCritical] public static void TransferTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. Remarks This method uses BackupSemantics flag to get Timestamp changed for directories. | Improve this Doc View Source TransferTimestampsTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Copies the date and timestamps for the specified directories. Declaration [Obsolete(\"Use new method name: CopyTimestampsTransacted\")] [SecurityCritical] public static void TransferTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source directory to get the date and time stamps from. String destinationPath The destination directory to set the date and time stamps. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method uses BackupSemantics flag to get Timestamp changed for directories."
  },
  "api/Alphaleonis.Win32.Filesystem.DeviceGuid.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DeviceGuid.html",
    "title": "Enum DeviceGuid | AlphaFS",
    "keywords": "Enum DeviceGuid System-Defined Device Interface Classes Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum DeviceGuid Remarks http://msdn.microsoft.com/en-us/library/windows/hardware/ff541389%28v=vs.85%29.aspx Fields Name Description ApplicationLaunchButton The GUID_DEVICE_APPLICATIONLAUNCH_BUTTON device interface class is defined for Advanced Configuration and Power Interface (ACPI) application start buttons. Battery The GUID_DEVICE_BATTERY device interface class is defined for battery devices. Bluetooth The GUID_BTHPORT_DEVICE_INTERFACE device interface class is defined for Bluetooth radios. Brightness The GUID_DEVINTERFACE_BRIGHTNESS device interface class is defined for display adapter drivers that operate in the context of the Windows Vista Display Driver Model and support brightness control of monitor child devices. Bus1394 The BUS1394_CLASS_GUID device interface class is defined for 1394 bus devices. Cdrom The GUID_DEVINTERFACE_CDROM device interface class is defined for CD-ROM storage devices. CdromChanger The GUID_DEVINTERFACE_CDCHANGER device interface class is defined for CD-ROM changer devices. ComPort The GUID_DEVINTERFACE_COMPORT device interface class is defined for COM ports. Disk The GUID_DEVINTERFACE_DISK device interface class is defined for hard disk storage devices. DisplayAdapter The GUID_DEVINTERFACE_DISPLAY_ADAPTER device interface class is defined for display views that are supported by display adapters. DisplayDeviceArrival The GUID_DISPLAY_DEVICE_ARRIVAL device interface class is defined for display adapters. Floppy The GUID_DEVINTERFACE_FLOPPY device interface class is defined for floppy disk storage devices. Guid61883 The GUID_61883_CLASS device interface class is defined for devices in the 61883 device setup class. Hid The GUID_DEVINTERFACE_HID device interface class is defined for HID collections. I2C The GUID_DEVINTERFACE_I2C device interface class is defined for display adapter drivers that operate in the context of the Windows Vista Display Driver Model and perform I2C transactions with monitor child devices. Keyboard The GUID_DEVINTERFACE_KEYBOARD device interface class is defined for keyboard devices. Lid The GUID_DEVICE_LID device interface class is defined for Advanced Configuration and Power Interface (ACPI) lid devices. MediumChanger The GUID_DEVINTERFACE_MEDIUMCHANGER device interface class is defined for medium changer devices. Memory The GUID_DEVICE_MEMORY device interface class is defined for Advanced Configuration and Power Interface (ACPI) memory devices. MessageIndicator The GUID_DEVICE_MESSAGE_INDICATOR device interface class is defined for Advanced Configuration and Power Interface (ACPI) message indicator devices. Modem The GUID_DEVINTERFACE_MODEM device interface class is defined for modem devices. Monitor The GUID_DEVINTERFACE_MONITOR device interface class is defined for monitor devices. Mouse The GUID_DEVINTERFACE_MOUSE device interface class is defined for mouse devices. Network The GUID_DEVINTERFACE_NET device interface class is defined for network devices. OutputProtectionManagement The GUID_DEVINTERFACE_OPM device interface class is defined for display adapter drivers that operate in the context of the Windows Vista Display Driver Model and support output protection management (OPM) for monitor child devices. Parallel The GUID_DEVINTERFACE_PARALLEL device interface class is defined for parallel ports that support an IEEE 1284-compatible hardware interface. ParallelClass The GUID_DEVINTERFACE_PARCLASS device interface class is defined for devices that are attached to a parallel port. Partition The GUID_DEVINTERFACE_PARTITION device interface class is defined for partition devices. Processor The GUID_DEVICE_PROCESSOR device interface class is defined for Advanced Configuration and Power Interface (ACPI) processor devices. SerialEnumBusEnumerator The GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR device interface class is defined for Plug and Play (PnP) serial ports. StillImage The GUID_DEVINTERFACE_IMAGE device interface class is defined for WIA devices and Still Image (STI) devices, including digital cameras and scanners. StoragePort The GUID_DEVINTERFACE_STORAGEPORT device interface class is defined for storage port devices. SysButton The GUID_DEVICE_SYS_BUTTON device interface classis defined for Advanced Configuration and Power Interface (ACPI) system power button devices. Tape The GUID_DEVINTERFACE_TAPE device interface class is defined for tape storage devices. ThermalZone The GUID_DEVICE_THERMAL_ZONE device interface class is defined for Advanced Configuration and Power Interface (ACPI) thermal zone devices. UsbDevice The GUID_DEVINTERFACE_USB_DEVICE device interface class is defined for USB devices that are attached to a USB hub. UsbHostController The GUID_DEVINTERFACE_USB_HOST_CONTROLLER device interface class is defined for USB host controller devices. UsbHub The GUID_DEVINTERFACE_USB_HUB device interface class is defined for USB hub devices. VideoOutputArrival The GUID_DEVINTERFACE_VIDEO_OUTPUT_ARRIVAL device interface class is defined for child devices of display devices. Volume The GUID_DEVINTERFACE_VOLUME device interface class is defined for volume devices. Wpd The GUID_DEVINTERFACE_WPD device interface class is defined for Windows Portable Devices (WPD). WpdPrivate The GUID_DEVINTERFACE_WPD_PRIVATE device interface class is defined for specialized Windows Portable Devices (WPD). WriteOnceDisk The GUID_DEVINTERFACE_WRITEONCEDISK device interface class is defined for write-once disk devices."
  },
  "api/Alphaleonis.Win32.Filesystem.Device.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Device.html",
    "title": "Class Device | AlphaFS",
    "keywords": "Class Device Provides static methods to retrieve device resource information from a local or remote host. Inheritance Object Device Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public static class Device Methods | Improve this Doc View Source EnumerateDevices(DeviceGuid) [AlphaFS] Enumerates all available devices on the local host. Declaration [SecurityCritical] public static IEnumerable<DeviceInfo> EnumerateDevices(DeviceGuid deviceGuid) Parameters Type Name Description DeviceGuid deviceGuid One of the DeviceGuid devices. Returns Type Description IEnumerable < DeviceInfo > IEnumerable<T> instances of type DeviceGuid from the local host. | Improve this Doc View Source EnumerateDevices(String, DeviceGuid) [AlphaFS] Enumerates all available devices of type DeviceGuid on the local or remote host. Declaration [SecurityCritical] public static IEnumerable<DeviceInfo> EnumerateDevices(string hostName, DeviceGuid deviceGuid) Parameters Type Name Description String hostName The name of the local or remote host on which the device resides. null refers to the local host. DeviceGuid deviceGuid One of the DeviceGuid devices. Returns Type Description IEnumerable < DeviceInfo > IEnumerable<T> instances of type DeviceGuid for the specified hostName ."
  },
  "api/Alphaleonis.Win32.Filesystem.CopyOptions.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.CopyOptions.html",
    "title": "Enum CopyOptions | AlphaFS",
    "keywords": "Enum CopyOptions Flags that specify how a file or directoryis to be copied. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum CopyOptions Fields Name Description AllowDecryptedDestination An attempt to copy an encrypted file will succeed even if the destination copy cannot be encrypted. CopySymbolicLink Similar to XCOPY /B parameter: Copies the Symbolic Link itself versus the target of the link. If the source file is a symbolic link, the destination file is also a symbolic link pointing to the same file that the source symbolic link is pointing to. CopyTimestamp The original source timestamp is preserved. FailIfExists The copy operation fails immediately if the target file already exists. NoBuffering The copy operation is performed using unbuffered I/O, bypassing system I/O cache resources. Recommended for very large file transfers. None No CopyOptions used, this allows overwriting the file. OpenSourceForWrite The file is copied and the original file is opened for write access. Restartable Progress of the copy is tracked in the target file in case the copy fails. The failed copy can be restarted at a later time by specifying the same values forexisting file name and new file name as those used in the call that failed. This can significantly slow down the copy operation as the new file may be flushed multiple times during the copy operation."
  },
  "api/Alphaleonis.Win32.Filesystem.ByHandleFileInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.ByHandleFileInfo.html",
    "title": "Class ByHandleFileInfo | AlphaFS",
    "keywords": "Class ByHandleFileInfo Contains information that the GetFileInformationByHandle function retrieves. Inheritance Object ByHandleFileInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] [SecurityCritical] public sealed class ByHandleFileInfo Properties | Improve this Doc View Source Attributes Gets the file attributes. Declaration public FileAttributes Attributes { get; } Property Value Type Description FileAttributes The file attributes. | Improve this Doc View Source CreationTime Gets the time this entry was created. Declaration public DateTime CreationTime { get; } Property Value Type Description DateTime The time this entry was created. | Improve this Doc View Source CreationTimeUtc Gets the time, in coordinated universal time (UTC), this entry was created. Declaration public DateTime CreationTimeUtc { get; } Property Value Type Description DateTime The time, in coordinated universal time (UTC), this entry was created. | Improve this Doc View Source FileIndex Gets the unique identifier associated with the file. The identifier and the volume serial number uniquely identify a file on a single computer. To determine whether two open handles represent the same file, combine the identifier and the volume serial number for each file and compare them. Declaration public long FileIndex { get; } Property Value Type Description Int64 The unique identifier of the file. | Improve this Doc View Source FileSize Gets the size of the file. Declaration public long FileSize { get; } Property Value Type Description Int64 The size of the file. | Improve this Doc View Source LastAccessTime Gets the time this entry was last accessed. For a file, the structure specifies the last time that a file is read from or written to. For a directory, the structure specifies when the directory is created. For both files and directories, the specified date is correct, but the time of day is always set to midnight. If the underlying file system does not support the last access time, this member is zero (0). Declaration public DateTime LastAccessTime { get; } Property Value Type Description DateTime The time this entry was last accessed. | Improve this Doc View Source LastAccessTimeUtc Gets the time, in coordinated universal time (UTC), this entry was last accessed. For a file, the structure specifies the last time that a file is read from or written to. For a directory, the structure specifies when the directory is created. For both files and directories, the specified date is correct, but the time of day is always set to midnight. If the underlying file system does not support the last access time, this member is zero (0). Declaration public DateTime LastAccessTimeUtc { get; } Property Value Type Description DateTime The time, in coordinated universal time (UTC), this entry was last accessed. | Improve this Doc View Source LastWriteTime Gets the time this entry was last modified. For a file, the structure specifies the last time that a file is written to. For a directory, the structure specifies when the directory is created. If the underlying file system does not support the last access time, this member is zero (0). Declaration public DateTime LastWriteTime { get; } Property Value Type Description DateTime The time this entry was last modified. | Improve this Doc View Source LastWriteTimeUtc Gets the time, in coordinated universal time (UTC), this entry was last modified. For a file, the structure specifies the last time that a file is written to. For a directory, the structure specifies when the directory is created. If the underlying file system does not support the last access time, this member is zero (0). Declaration public DateTime LastWriteTimeUtc { get; } Property Value Type Description DateTime The time, in coordinated universal time (UTC), this entry was last modified. | Improve this Doc View Source NumberOfLinks Gets the number of links to this file. For the FAT file system this member is always 1. For the NTFS file system, it can be more than 1. Declaration public int NumberOfLinks { get; } Property Value Type Description Int32 The number of links to this file. | Improve this Doc View Source VolumeSerialNumber Gets the serial number of the volume that contains a file. Declaration public long VolumeSerialNumber { get; } Property Value Type Description Int64 The serial number of the volume that contains a file."
  },
  "api/Alphaleonis.Win32.Filesystem.BackupStreamInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.BackupStreamInfo.html",
    "title": "Class BackupStreamInfo | AlphaFS",
    "keywords": "Class BackupStreamInfo The BackupStreamInfo structure contains stream header data. Inheritance Object BackupStreamInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public sealed class BackupStreamInfo Properties | Improve this Doc View Source Attribute Gets the attributes of the data to facilitate cross-operating system transfer. Declaration public StreamAttribute Attribute { get; } Property Value Type Description StreamAttribute Attributes of the data to facilitate cross-operating system transfer. | Improve this Doc View Source Name Gets a string that specifies the name of the alternative data stream. Declaration public string Name { get; } Property Value Type Description String A string that specifies the name of the alternative data stream. | Improve this Doc View Source Size Gets the size of the data in the substream, in bytes. Declaration public long Size { get; } Property Value Type Description Int64 The size of the data in the substream, in bytes. | Improve this Doc View Source StreamType Gets the type of the data in the stream. Declaration public StreamId StreamType { get; } Property Value Type Description StreamId The type of the data in the stream. See Also BackupFileStream"
  },
  "api/Alphaleonis.Win32.Security.ProcessContext.html": {
    "href": "api/Alphaleonis.Win32.Security.ProcessContext.html",
    "title": "Class ProcessContext | AlphaFS",
    "keywords": "Class ProcessContext [AlphaFS] Class to determine the context of the current process. Inheritance Object ProcessContext Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Security Assembly : AlphaFS.dll Syntax public static class ProcessContext Properties | Improve this Doc View Source IsAdministrator [AlphaFS] Determines if the current process is run in the context of an Administrator. Declaration public static bool IsAdministrator { get; } Property Value Type Description Boolean true if the current process is run in the context of an Administrator; otherwise, false . | Improve this Doc View Source IsElevatedProcess [AlphaFS] Determines if UAC is enabled and that the current process is in an elevated state. If the current User is the default Administrator then the process is assumed to be in an elevated state. This assumption is made because by default, the default Administrator (disabled by default) gets all access rights without showing an UAC prompt. Declaration public static bool IsElevatedProcess { get; } Property Value Type Description Boolean true if UAC is enabled and the current process is in an elevated state; otherwise, false . | Improve this Doc View Source IsUacEnabled [AlphaFS] Determines if UAC is enabled by reading the \"EnableLUA\" registry key of the local Computer. Declaration public static bool IsUacEnabled { get; } Property Value Type Description Boolean true if the UAC status was successfully read from registry; otherwise, false . | Improve this Doc View Source IsWindowsService [AlphaFS] Determines if the current process is run in the context of a Windows Service. Declaration public static bool IsWindowsService { get; } Property Value Type Description Boolean true if the current process is run in the context of a Windows Service; otherwise, false ."
  },
  "api/Alphaleonis.Win32.Security.PrivilegeEnabler.html": {
    "href": "api/Alphaleonis.Win32.Security.PrivilegeEnabler.html",
    "title": "Class PrivilegeEnabler | AlphaFS",
    "keywords": "Class PrivilegeEnabler Used to enable one or more privileges. The privileges specified will be enabled during the lifetime of the instance. Users create an instance of this object in a using statement to ensure that it is properly disposed when the elevated privileges are no longer needed. Inheritance Object PrivilegeEnabler Implements IDisposable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Security Assembly : AlphaFS.dll Syntax public sealed class PrivilegeEnabler : IDisposable Constructors | Improve this Doc View Source PrivilegeEnabler(Privilege, Privilege[]) Initializes a new instance of the PrivilegeEnabler class. This will enable the privileges specified (unless already enabled), and ensure that they are disabled again when the object is disposed. (Any privileges already enabled will not be disabled). Declaration public PrivilegeEnabler(Privilege privilege, params Privilege[] privileges) Parameters Type Name Description Privilege privilege The privilege to enable. Privilege [] privileges Additional privileges to enable. Properties | Improve this Doc View Source EnabledPrivileges Gets the enabled privileges. Note that this might not contain all privileges specified to the constructor. Only the privileges actually enabled by this instance is returned. Declaration public IEnumerable<Privilege> EnabledPrivileges { get; } Property Value Type Description IEnumerable < Privilege > The enabled privileges. Methods | Improve this Doc View Source Dispose() Makes sure any privileges enabled by this instance are disabled. Declaration public void Dispose() Implements System.IDisposable"
  },
  "api/Alphaleonis.Win32.OperatingSystem.EnumProcessorArchitecture.html": {
    "href": "api/Alphaleonis.Win32.OperatingSystem.EnumProcessorArchitecture.html",
    "title": "Enum OperatingSystem.EnumProcessorArchitecture | AlphaFS",
    "keywords": "Enum OperatingSystem.EnumProcessorArchitecture A set of flags to indicate the current processor architecture for which the operating system is targeted and running. Namespace : Alphaleonis.Win32 Assembly : AlphaFS.dll Syntax public enum EnumProcessorArchitecture Fields Name Description IA64 PROCESSOR_ARCHITECTURE_IA64 The system is running on a Itanium processor. Unknown PROCESSOR_ARCHITECTURE_UNKNOWN Unknown architecture. X64 PROCESSOR_ARCHITECTURE_AMD64 The system is running a 64-bit version of Windows. X86 PROCESSOR_ARCHITECTURE_INTEL The system is running a 32-bit version of Windows."
  },
  "api/Alphaleonis.Win32.OperatingSystem.EnumOsName.html": {
    "href": "api/Alphaleonis.Win32.OperatingSystem.EnumOsName.html",
    "title": "Enum OperatingSystem.EnumOsName | AlphaFS",
    "keywords": "Enum OperatingSystem.EnumOsName A set of flags that describe the named Windows versions. Namespace : Alphaleonis.Win32 Assembly : AlphaFS.dll Syntax public enum EnumOsName Remarks The values of the enumeration are ordered. A later released operating system version has a higher number, so comparisons between named versions are meaningful. Fields Name Description Earlier A Windows version earlier than Windows 2000. Later A later version of Windows than currently installed. Windows10 Windows 10 Windows2000 Windows 2000 (Server or Professional). Windows7 Windows 7. Windows8 Windows 8. Windows81 Windows 8.1. WindowsServer2003 Windows Server 2003. WindowsServer2008 Windows Server 2008. WindowsServer2008R2 Windows Server 2008 R2. WindowsServer2012 Windows Server 2012. WindowsServer2012R2 Windows Server 2012 R2 WindowsServer2016 Windows Server 2016 WindowsVista Windows Vista. WindowsXP Windows XP."
  },
  "api/Alphaleonis.Win32.Network.html": {
    "href": "api/Alphaleonis.Win32.Network.html",
    "title": "Namespace Alphaleonis.Win32.Network | AlphaFS",
    "keywords": "Namespace Alphaleonis.Win32.Network This namespace contains network related classes. Classes DfsInfo Contains information about a Distributed File System (DFS) root or link. This class cannot be inherited. This structure contains the name, status, GUID, time-out, number of targets, and information about each target of the root or link. DfsStorageInfo Contains information about a DFS root or link target in a DFS namespace or from the cache maintained by the DFS client. This class cannot be inherited. DriveConnection Used to create a temporary connection to a network resource that will be disconnected once this instance is disposed. Host Provides static methods to retrieve network resource information from a local- or remote host. NetworkConnectionInfo Represents a connection to a network. NetworkInfo Represents a network on the local machine. It can also represent a collection of network connections with a similar network signature. OpenConnectionInfo Contains the identification number of a connection, number of open files, connection time, number of users on the connection, and the type of connection. OpenResourceInfo Contains the identification number and other pertinent information about files, devices, and pipes. This class cannot be inherited. ServerStatisticsInfo Contains operating statistics for the Server service. SessionInfo Contains information about Server Message Block (SMB) shares. This class cannot be inherited. ShareInfo Contains information about Server Message Block (SMB) shares. This class cannot be inherited. WorkstationStatisticsInfo Contains operating statistics for the Workstation service. Enums AccessPermissions A set of bit flags that describe the permissions for the shared resource's on servers running with share-level security. ConnectivityStates Specifies types of network connectivity state. DfsPropertyFlags A set of bit flags that describe specific properties of a DFS namespace, root, or link. DfsStorageStates A set of bit flags that describe the storage state of the DFS root or link target. DfsTargetPriorityClass Defines the set of possible DFS target priority class settings. DfsVolumeStates A set of bit flags that describe the state of the DFS root or link; the state of the DFS namespace root cannot be changed. One DfsVolumeStates flag is set, and one DFS_VOLUME_FLAVOR flag is set. DomainType Specifies the domain type of a network. NetworkCategory Specifies the category type of a network. NetworkConnectivityLevels Specifies what types of networks are enumerated. SessionInfoLevel The SessionInfo information level. ShareInfoLevel The ShareInfo information level. ShareResourceTypes Contains information about the shared resource. ShareType The type of the shared resource."
  },
  "api/Alphaleonis.Win32.Network.WorkstationStatisticsInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.WorkstationStatisticsInfo.html",
    "title": "Class WorkstationStatisticsInfo | AlphaFS",
    "keywords": "Class WorkstationStatisticsInfo Contains operating statistics for the Workstation service. Inheritance Object WorkstationStatisticsInfo Implements IEquatable < WorkstationStatisticsInfo > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Serializable] public sealed class WorkstationStatisticsInfo : IEquatable<WorkstationStatisticsInfo> Constructors | Improve this Doc View Source WorkstationStatisticsInfo() Create a WorkstationStatisticsInfo instance from the local host. Declaration public WorkstationStatisticsInfo() | Improve this Doc View Source WorkstationStatisticsInfo(String) Create a WorkstationStatisticsInfo instance from the specified host name. Declaration public WorkstationStatisticsInfo(string hostName) Parameters Type Name Description String hostName The host name. Properties | Improve this Doc View Source BytesReceived The total number of bytes received by the workstation. Declaration public long BytesReceived { get; } Property Value Type Description Int64 | Improve this Doc View Source BytesReceivedUnitSize The total number of bytes received by the workstation, formatted as a unit size. Declaration public string BytesReceivedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source BytesTransmitted The total number of bytes transmitted by the workstation. Declaration public long BytesTransmitted { get; } Property Value Type Description Int64 | Improve this Doc View Source BytesTransmittedUnitSize The total number of bytes transmitted by the workstation, formatted as a unit size. Declaration public string BytesTransmittedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source CacheReadBytesRequested The total number of bytes that have been read by cache I/O requests. Declaration public long CacheReadBytesRequested { get; } Property Value Type Description Int64 | Improve this Doc View Source CacheReadBytesRequestedUnitSize The total number of bytes that have been read by cache I/O requests, formatted as a unit size. Declaration public string CacheReadBytesRequestedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source CacheWriteBytesRequested The total number of bytes that have been written by cache I/O requests. Declaration public long CacheWriteBytesRequested { get; } Property Value Type Description Int64 | Improve this Doc View Source CacheWriteBytesRequestedUnitSize The total number of bytes that have been written by cache I/O requests, formatted as a unit size. Declaration public string CacheWriteBytesRequestedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source CoreConnects The total number of connections to servers supporting the PCNET dialect that have succeeded. Declaration public int CoreConnects { get; } Property Value Type Description Int32 | Improve this Doc View Source CurrentCommands The number of current requests that have not been completed. Declaration public int CurrentCommands { get; } Property Value Type Description Int32 | Improve this Doc View Source FailedCompletionOperations The total number of network operations that failed to complete. Declaration public int FailedCompletionOperations { get; } Property Value Type Description Int32 | Improve this Doc View Source FailedSessions The number of times the workstation attempted to create a session but failed. Declaration public int FailedSessions { get; } Property Value Type Description Int32 | Improve this Doc View Source FailedUseCount The total number of failed network connections for the workstation. Declaration public int FailedUseCount { get; } Property Value Type Description Int32 | Improve this Doc View Source HostName The host name from where the statistics are gathered. Declaration public string HostName { get; } Property Value Type Description String | Improve this Doc View Source HungSessions The total number of sessions that have expired on the workstation. Declaration public int HungSessions { get; } Property Value Type Description Int32 | Improve this Doc View Source InitiallyFailedOperations The total number of network operations that failed to begin. Declaration public int InitiallyFailedOperations { get; } Property Value Type Description Int32 | Improve this Doc View Source Lanman20Connects The total number of connections to servers supporting the LanManager 2.0 dialect that have succeeded. Declaration public int Lanman20Connects { get; } Property Value Type Description Int32 | Improve this Doc View Source Lanman21Connects The total number of connections to servers supporting the LanManager 2.1 dialect that have succeeded. Declaration public int Lanman21Connects { get; } Property Value Type Description Int32 | Improve this Doc View Source LanmanNtConnects The total number of connections to servers supporting the NTLM dialect that have succeeded. Declaration public int LanmanNtConnects { get; } Property Value Type Description Int32 | Improve this Doc View Source LargeReadSmbs The total number of read requests the workstation has sent to servers that are greater than twice the size of the server's negotiated buffer size. Declaration public int LargeReadSmbs { get; } Property Value Type Description Int32 | Improve this Doc View Source LargeWriteSmbs The total number of write requests the workstation has sent to servers that are greater than twice the size of the server's negotiated buffer size. Declaration public int LargeWriteSmbs { get; } Property Value Type Description Int32 | Improve this Doc View Source NetworkErrors The total number of network errors received by the workstation. Declaration public int NetworkErrors { get; } Property Value Type Description Int32 | Improve this Doc View Source NetworkReadBytesRequested The total amount of bytes that have been read by disk I/O requests. Declaration public long NetworkReadBytesRequested { get; } Property Value Type Description Int64 | Improve this Doc View Source NetworkReadBytesRequestedUnitSize The total amount of bytes that have been read by disk I/O requests, formatted as a unit size. Declaration public string NetworkReadBytesRequestedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source NetworkWriteBytesRequested The total number of bytes that have been written by disk I/O requests. Declaration public long NetworkWriteBytesRequested { get; } Property Value Type Description Int64 | Improve this Doc View Source NetworkWriteBytesRequestedUnitSize The total number of bytes that have been written by disk I/O requests, formatted as a unit size. Declaration public string NetworkWriteBytesRequestedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source NonPagingReadBytesRequested The total number of bytes that have been read by non-paging I/O requests. Declaration public long NonPagingReadBytesRequested { get; } Property Value Type Description Int64 | Improve this Doc View Source NonPagingReadBytesRequestedUnitSize The total number of bytes that have been read by non-paging I/O requests, formatted as a unit size. Declaration public string NonPagingReadBytesRequestedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source NonPagingWriteBytesRequested The total number of bytes that have been written by non-paging I/O requests. Declaration public long NonPagingWriteBytesRequested { get; } Property Value Type Description Int64 | Improve this Doc View Source NonPagingWriteBytesRequestedUnitSize The total number of bytes that have been written by non-paging I/O requests, formatted as a unit size. Declaration public string NonPagingWriteBytesRequestedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source PagingReadBytesRequested The total number of bytes that have been read by paging I/O requests. Declaration public long PagingReadBytesRequested { get; } Property Value Type Description Int64 | Improve this Doc View Source PagingReadBytesRequestedUnitSize The total number of bytes that have been read by paging I/O requests, formatted as a unit size. Declaration public string PagingReadBytesRequestedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source PagingWriteBytesRequested The total number of bytes that have been written by paging I/O requests. Declaration public long PagingWriteBytesRequested { get; } Property Value Type Description Int64 | Improve this Doc View Source PagingWriteBytesRequestedUnitSize The total number of bytes that have been written by paging I/O requests, formatted as a unit size. Declaration public string PagingWriteBytesRequestedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source RandomReadOperations The total number of random access reads initiated by the workstation. Declaration public int RandomReadOperations { get; } Property Value Type Description Int32 | Improve this Doc View Source RandomWriteOperations The total number of random access writes initiated by the workstation. Declaration public int RandomWriteOperations { get; } Property Value Type Description Int32 | Improve this Doc View Source RawReadsDenied The total number of raw read requests made by the workstation that have been denied. Declaration public int RawReadsDenied { get; } Property Value Type Description Int32 | Improve this Doc View Source RawWritesDenied The total number of raw write requests made by the workstation that have been denied. Declaration public int RawWritesDenied { get; } Property Value Type Description Int32 | Improve this Doc View Source ReadOperations The total number of read operations initiated by the workstation. Declaration public int ReadOperations { get; } Property Value Type Description Int32 | Improve this Doc View Source ReadSmbs The total number of read requests the workstation has sent to servers. Declaration public int ReadSmbs { get; } Property Value Type Description Int32 | Improve this Doc View Source Reconnects The total number of connections that have failed. Declaration public int Reconnects { get; } Property Value Type Description Int32 | Improve this Doc View Source ServerDisconnects The number of times the workstation was disconnected by a network server. Declaration public int ServerDisconnects { get; } Property Value Type Description Int32 | Improve this Doc View Source Sessions The total number of workstation sessions that were established. Declaration public int Sessions { get; } Property Value Type Description Int32 | Improve this Doc View Source SmallReadSmbs The total number of read requests the workstation has sent to servers that are less than 1/4 of the size of the server's negotiated buffer size. Declaration public int SmallReadSmbs { get; } Property Value Type Description Int32 | Improve this Doc View Source SmallWriteSmbs The total number of write requests the workstation has sent to servers that are less than 1/4 of the size of the server's negotiated buffer size. Declaration public int SmallWriteSmbs { get; } Property Value Type Description Int32 | Improve this Doc View Source SmbsReceived The total number of server message blocks (SMBs) received by the workstation. Declaration public long SmbsReceived { get; } Property Value Type Description Int64 | Improve this Doc View Source SmbsTransmitted The total number of SMBs transmitted by the workstation. Declaration public long SmbsTransmitted { get; } Property Value Type Description Int64 | Improve this Doc View Source StatisticsStartTime The local time statistics collection started. This member also indicates when statistics for the workstations were last cleared. Declaration public DateTime StatisticsStartTime { get; } Property Value Type Description DateTime | Improve this Doc View Source StatisticsStartTimeUtc The time statistics collection started. This member also indicates when statistics for the workstations were last cleared. Declaration public DateTime StatisticsStartTimeUtc { get; } Property Value Type Description DateTime | Improve this Doc View Source UseCount The total number of network connections established by the workstation. Declaration public int UseCount { get; } Property Value Type Description Int32 | Improve this Doc View Source WriteOperations The total number of write operations initiated by the workstation. Declaration public int WriteOperations { get; } Property Value Type Description Int32 | Improve this Doc View Source WriteSmbs The total number of write requests the workstation has sent to servers. Declaration public int WriteSmbs { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(WorkstationStatisticsInfo) Determines whether the specified Object is equal to the current Object. Declaration public bool Equals(WorkstationStatisticsInfo other) Parameters Type Name Description WorkstationStatisticsInfo other Another WorkstationStatisticsInfo instance to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to the current Object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Another object to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current Object. Overrides Object.GetHashCode() | Improve this Doc View Source Refresh() Refreshes the state of the object. Declaration public void Refresh() | Improve this Doc View Source ToString() Returns the local time when statistics collection started or when the statistics were last cleared. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString() Operators | Improve this Doc View Source Equality(WorkstationStatisticsInfo, WorkstationStatisticsInfo) Implements the operator == Declaration public static bool operator ==(WorkstationStatisticsInfo left, WorkstationStatisticsInfo right) Parameters Type Name Description WorkstationStatisticsInfo left A. WorkstationStatisticsInfo right B. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(WorkstationStatisticsInfo, WorkstationStatisticsInfo) Implements the operator != Declaration public static bool operator !=(WorkstationStatisticsInfo left, WorkstationStatisticsInfo right) Parameters Type Name Description WorkstationStatisticsInfo left A. WorkstationStatisticsInfo right B. Returns Type Description Boolean The result of the operator. Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Win32.Network.ShareType.html": {
    "href": "api/Alphaleonis.Win32.Network.ShareType.html",
    "title": "Enum ShareType | AlphaFS",
    "keywords": "Enum ShareType The type of the shared resource. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Flags] public enum ShareType Remarks MSDN: 2.2.2.4 Share Types http://msdn.microsoft.com/en-us/library/cc247110.aspx Fields Name Description All Retriev all known ShareType . ClusterDfs A DFS share in a cluster. ClusterFs A cluster share. ClusterSoFs A Scale-Out cluster share. Device Communication device. DiskTree Disk drive. Ipc Interprocess communication (IPC). PrintQueue Print queue. Special Special share reserved for interprocess communication (IPC$) or remote administration of the server (ADMIN$). Can also refer to administrative shares such as C$, D$, E$, and so forth. Temporary A temporary share that is not persisted for creation each time the file server initializes."
  },
  "api/Alphaleonis.Win32.Network.ShareResourceTypes.html": {
    "href": "api/Alphaleonis.Win32.Network.ShareResourceTypes.html",
    "title": "Enum ShareResourceTypes | AlphaFS",
    "keywords": "Enum ShareResourceTypes Contains information about the shared resource. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Flags] public enum ShareResourceTypes Remarks Minimum supported client: Windows XP [desktop apps only] Minimum supported server: Windows Server 2003 [desktop apps only] Fields Name Description AccessBasedDirectoryEnum SHI1005_FLAGS_ACCESS_BASED_DIRECTORY_ENUM The server will filter directory entries based on the access permissions that the user on the client computer has for the server on which the files reside. Only files for which the user has read access and directories for which the user has FILE_LIST_DIRECTORY access will be returned. If the user has SeBackupPrivilege, all available information will be returned. AllowNamespaceCaching SHI1005_FLAGS_ALLOW_NAMESPACE_CACHING Clients are allowed to cache the namespace of the specified share. Dfs SHI1005_FLAGS_DFS The specified share is present in a DFS tree structure. This flag cannot be set with NetShareSetInfo. DfsRoot SHI1005_FLAGS_DFS_ROOT The specified share is the root volume in a DFS tree structure. This flag cannot be set with NetShareSetInfo. EnableCa SHI1005_FLAGS_ENABLE_CA (0X4000) - Enables server-side functionality needed for peer caching support. Clients on high-latency or low-bandwidth connections can use alternate methods to retrieve data from peers if available, instead of sending requests to the server. This is only supported on shares configured for manual caching (CSC_CACHE_MANUAL_REINT). EnableHash SHI1005_FLAGS_ENABLE_HASH ForceLevel2OpLock SHI1005_FLAGS_FORCE_LEVELII_OPLOCK Prevents exclusive caching modes that can cause delays for highly shared read-only data. ForceSharedDelete SHI1005_FLAGS_FORCE_SHARED_DELETE Shared files in the specified share can be forcibly deleted. None No specific resource type used. RestrictExclusiveOpens SHI1005_FLAGS_RESTRICT_EXCLUSIVE_OPENS The specified share disallows exclusive file opens, where reads to an open file are disallowed."
  },
  "api/Alphaleonis.Win32.Network.ShareInfoLevel.html": {
    "href": "api/Alphaleonis.Win32.Network.ShareInfoLevel.html",
    "title": "Enum ShareInfoLevel | AlphaFS",
    "keywords": "Enum ShareInfoLevel The ShareInfo information level. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax public enum ShareInfoLevel Fields Name Description Info1 Contains information about the shared resource, including the name and type of the resource, and a comment associated with the resource. Info1005 Contains information about the shared resource. Info2 Contains information about the shared resource, including the name, type, and permissions of the resource, comments associated with the resource, the maximum number of concurrent connections, the number of current connections, the local path for the resource, and a password for the current connection. Info502 Contains information about the shared resource, including the name of the resource, type, and permissions, the number of connections, security descriptor, and other pertinent information. Info503 Contains information about the shared resource, including the server name, name of the resource, type, and permissions, the number of connections, and other pertinent information. None No specific information level used."
  },
  "api/Alphaleonis.Win32.Network.ShareInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.ShareInfo.html",
    "title": "Class ShareInfo | AlphaFS",
    "keywords": "Class ShareInfo Contains information about Server Message Block (SMB) shares. This class cannot be inherited. Inheritance Object ShareInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Serializable] public sealed class ShareInfo Properties | Improve this Doc View Source CurrentUses The number of current connections to the resource. Declaration public long CurrentUses { get; } Property Value Type Description Int64 | Improve this Doc View Source DirectoryInfo The DirectoryInfo instance associated with this share. Declaration public DirectoryInfo DirectoryInfo { get; } Property Value Type Description DirectoryInfo | Improve this Doc View Source MaxUses The maximum number of concurrent connections that the shared resource can accommodate. Declaration public long MaxUses { get; } Property Value Type Description Int64 Remarks The number of connections is unlimited if the value specified in this member is –1. | Improve this Doc View Source NetFullPath Returns the full UNC path to the share. Declaration public string NetFullPath { get; } Property Value Type Description String | Improve this Doc View Source NetName The name of the shared resource. Declaration public string NetName { get; } Property Value Type Description String | Improve this Doc View Source Password The share's password (when the server is running with share-level security). Declaration public string Password { get; } Property Value Type Description String | Improve this Doc View Source Path The local path for the shared resource. Declaration public string Path { get; } Property Value Type Description String Remarks For disks, this member is the path being shared. For print queues, this member is the name of the print queue being shared. | Improve this Doc View Source Permissions The shared resource's permissions for servers running with share-level security. Declaration public AccessPermissions Permissions { get; } Property Value Type Description AccessPermissions Remarks Note that Windows does not support share-level security. This member is ignored on a server running user-level security. | Improve this Doc View Source Remark An optional comment about the shared resource. Declaration public string Remark { get; } Property Value Type Description String | Improve this Doc View Source ResourceType The type of share resource. Declaration public ShareResourceTypes ResourceType { get; } Property Value Type Description ShareResourceTypes | Improve this Doc View Source SecurityDescriptor Specifies the SECURITY_DESCRIPTOR associated with this share. Declaration public IntPtr SecurityDescriptor { get; } Property Value Type Description IntPtr | Improve this Doc View Source ServerName A pointer to a string that specifies the DNS or NetBIOS name of the remote server on which the shared resource resides. Declaration public string ServerName { get; } Property Value Type Description String Remarks A value of \"*\" indicates no configured server name. | Improve this Doc View Source ShareLevel The structure level for the ShareInfo instance. Declaration public ShareInfoLevel ShareLevel { get; } Property Value Type Description ShareInfoLevel | Improve this Doc View Source ShareType The type of share. Declaration public ShareType ShareType { get; } Property Value Type Description ShareType Methods | Improve this Doc View Source ToString() Returns the full path to the share. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString()"
  },
  "api/Alphaleonis.Win32.Network.OpenConnectionInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.OpenConnectionInfo.html",
    "title": "Class OpenConnectionInfo | AlphaFS",
    "keywords": "Class OpenConnectionInfo Contains the identification number of a connection, number of open files, connection time, number of users on the connection, and the type of connection. Inheritance Object OpenConnectionInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Serializable] public sealed class OpenConnectionInfo Properties | Improve this Doc View Source ConnectedSeconds Specifies the number of seconds that the connection has been established. Declaration [Obsolete(\"Use ConnectedTime property.\")] public long ConnectedSeconds { get; } Property Value Type Description Int64 | Improve this Doc View Source ConnectedTime Specifies duration that the connection has been established. Declaration public TimeSpan ConnectedTime { get; } Property Value Type Description TimeSpan | Improve this Doc View Source Host The local or remote Host. Declaration [Obsolete(\"Use HostName\")] public string Host { get; } Property Value Type Description String | Improve this Doc View Source HostName The host name of this connection information. Declaration public string HostName { get; } Property Value Type Description String | Improve this Doc View Source Id Specifies a connection identification number. Declaration public long Id { get; } Property Value Type Description Int64 | Improve this Doc View Source NetName Specifies either the server's shared resource name or the Computer name or IP address of the client. The value of this member depends on which name was specified as the qualifier parameter to the function. Declaration public string NetName { get; set; } Property Value Type Description String | Improve this Doc View Source ShareType The type of share. Declaration public ShareType ShareType { get; } Property Value Type Description ShareType | Improve this Doc View Source TotalOpenFiles Specifies the number of files currently open as a result of the connection. Declaration public long TotalOpenFiles { get; } Property Value Type Description Int64 | Improve this Doc View Source TotalUsers Specifies the number of users on the connection. Declaration public long TotalUsers { get; } Property Value Type Description Int64 | Improve this Doc View Source UserName If the server sharing the resource is running with user-level security, the UserName member describes which user made the connection. If the server is running with share-level security, UserName describes which Computer (Computer name) made the connection. Declaration public string UserName { get; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Returns the full path to the share. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString()"
  },
  "api/Alphaleonis.Win32.Network.NetworkInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.NetworkInfo.html",
    "title": "Class NetworkInfo | AlphaFS",
    "keywords": "Class NetworkInfo Represents a network on the local machine. It can also represent a collection of network connections with a similar network signature. Inheritance Object NetworkInfo Implements IEquatable < NetworkInfo > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Serializable] public class NetworkInfo : IEquatable<NetworkInfo> Properties | Improve this Doc View Source Category Gets the category of a network. The categories are trusted, untrusted, or authenticated. This value of this property is not cached. Declaration public NetworkCategory Category { get; } Property Value Type Description NetworkCategory | Improve this Doc View Source Connections Gets the network connections for the network. This value of this property is not cached. Declaration public IEnumerable<NetworkConnectionInfo> Connections { get; } Property Value Type Description IEnumerable < NetworkConnectionInfo > | Improve this Doc View Source ConnectionTime Gets the local date and time when the network was connected. This value of this property is not cached. Declaration public DateTime ConnectionTime { get; } Property Value Type Description DateTime | Improve this Doc View Source ConnectionTimeUtc Gets the date and time when the network was connected. This value of this property is not cached. Declaration public DateTime ConnectionTimeUtc { get; } Property Value Type Description DateTime | Improve this Doc View Source Connectivity Gets the connectivity state of the network. This value of this property is not cached. Declaration public ConnectivityStates Connectivity { get; } Property Value Type Description ConnectivityStates Remarks Connectivity provides information on whether the network is connected, and the protocols in use for network traffic. | Improve this Doc View Source CreationTime Gets the local date and time when the network was created. This value of this property is not cached. Declaration public DateTime CreationTime { get; } Property Value Type Description DateTime | Improve this Doc View Source CreationTimeUtc Gets the date and time when the network was created. This value of this property is not cached. Declaration public DateTime CreationTimeUtc { get; } Property Value Type Description DateTime | Improve this Doc View Source Description Gets a description for the network. This value of this property is not cached. Declaration public string Description { get; } Property Value Type Description String | Improve this Doc View Source DomainType Gets the domain type of the network. This value of this property is not cached. Declaration public DomainType DomainType { get; } Property Value Type Description DomainType Remarks The domain indictates whether the network is an Active Directory Network, and whether the machine has been authenticated by Active Directory. | Improve this Doc View Source IsConnected Gets a value that indicates whether there is network connectivity. This value of this property is not cached. Declaration public bool IsConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source IsConnectedToInternet Gets a value that indicates whether there is Internet connectivity. This value of this property is not cached. Declaration public bool IsConnectedToInternet { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the name of the network. This value of this property is not cached. Declaration public string Name { get; } Property Value Type Description String | Improve this Doc View Source NetworkId Gets a unique identifier for the network. This value of this property is not cached. Declaration public Guid NetworkId { get; } Property Value Type Description Guid Methods | Improve this Doc View Source Equals(NetworkInfo) Determines whether the specified Object is equal to the current Object. Declaration public bool Equals(NetworkInfo other) Parameters Type Name Description NetworkInfo other Another NetworkInfo instance to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to the current Object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Another object to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current Object. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Returns storage device as: \"VendorId ProductId DeviceType DeviceNumber:PartitionNumber\". Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString() Operators | Improve this Doc View Source Equality(NetworkInfo, NetworkInfo) Implements the operator == Declaration public static bool operator ==(NetworkInfo left, NetworkInfo right) Parameters Type Name Description NetworkInfo left A. NetworkInfo right B. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(NetworkInfo, NetworkInfo) Implements the operator != Declaration public static bool operator !=(NetworkInfo left, NetworkInfo right) Parameters Type Name Description NetworkInfo left A. NetworkInfo right B. Returns Type Description Boolean The result of the operator. Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Win32.Network.NetworkConnectivityLevels.html": {
    "href": "api/Alphaleonis.Win32.Network.NetworkConnectivityLevels.html",
    "title": "Enum NetworkConnectivityLevels | AlphaFS",
    "keywords": "Enum NetworkConnectivityLevels Specifies what types of networks are enumerated. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Flags] public enum NetworkConnectivityLevels Fields Name Description All Returns connected and disconnected networks. Connected Returns connected networks. Disconnected Returns disconnected networks. None Unknown."
  },
  "api/Alphaleonis.Win32.Network.NetworkConnectionInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.NetworkConnectionInfo.html",
    "title": "Class NetworkConnectionInfo | AlphaFS",
    "keywords": "Class NetworkConnectionInfo Represents a connection to a network. Inheritance Object NetworkConnectionInfo Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax public class NetworkConnectionInfo Properties | Improve this Doc View Source ConnectionId Gets the unique identifier for this connection. This value of this property is not cached. Declaration public Guid ConnectionId { get; } Property Value Type Description Guid | Improve this Doc View Source Connectivity Gets a value that indicates the connectivity of this connection. This value of this property is not cached. Declaration public ConnectivityStates Connectivity { get; } Property Value Type Description ConnectivityStates | Improve this Doc View Source DomainType Gets a value that indicates whether the network associated with this connection is an Active Directory network and whether the machine has been authenticated by Active Directory. This value of this property is not cached. Declaration public DomainType DomainType { get; } Property Value Type Description DomainType | Improve this Doc View Source IsConnected Gets a value that indicates whether this connection has network connectivity. This value of this property is not cached. Declaration public bool IsConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source IsConnectedToInternet Gets a value that indicates whether this connection has Internet access. This value of this property is not cached. Declaration public bool IsConnectedToInternet { get; } Property Value Type Description Boolean | Improve this Doc View Source NetworkInfo Retrieves an instance that represents the network associated with this connection. This value of this property is not cached. Declaration public NetworkInfo NetworkInfo { get; } Property Value Type Description NetworkInfo A NetworkInfo instance. | Improve this Doc View Source NetworkInterface Gets the network interface for this connection. This value of this property is not cached. Declaration public NetworkInterface NetworkInterface { get; } Property Value Type Description NetworkInterface Methods | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to the current Object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Another object to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current Object. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Returns storage device as: \"VendorId ProductId DeviceType DeviceNumber:PartitionNumber\". Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString() Operators | Improve this Doc View Source Equality(NetworkConnectionInfo, NetworkConnectionInfo) Implements the operator == Declaration public static bool operator ==(NetworkConnectionInfo left, NetworkConnectionInfo right) Parameters Type Name Description NetworkConnectionInfo left A. NetworkConnectionInfo right B. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(NetworkConnectionInfo, NetworkConnectionInfo) Implements the operator != Declaration public static bool operator !=(NetworkConnectionInfo left, NetworkConnectionInfo right) Parameters Type Name Description NetworkConnectionInfo left A. NetworkConnectionInfo right B. Returns Type Description Boolean The result of the operator."
  },
  "api/Alphaleonis.Win32.Network.DfsVolumeStates.html": {
    "href": "api/Alphaleonis.Win32.Network.DfsVolumeStates.html",
    "title": "Enum DfsVolumeStates | AlphaFS",
    "keywords": "Enum DfsVolumeStates A set of bit flags that describe the state of the DFS root or link; the state of the DFS namespace root cannot be changed. One DfsVolumeStates flag is set, and one DFS_VOLUME_FLAVOR flag is set. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Flags] public enum DfsVolumeStates Fields Name Description FlavorAdBlob DFS_VOLUME_FLAVOR_AD_BLOB The system sets this flag if the root is associated with a domain-based DFS namespace. FlavorStandalone DFS_VOLUME_FLAVOR_STANDALONE The system sets this flag if the root is associated with a stand-alone DFS namespace. Inconsistent DFS_VOLUME_STATE_INCONSISTENT The internal DFS database is inconsistent with the specified DFS root or link. Attempts to repair the inconsistency have failed. None No volume state. Offline DFS_VOLUME_STATE_OFFLINE The specified DFS root or link is offline or unavailable. Ok DFS_VOLUME_STATE_OK The specified DFS root or link is in the normal state. Online DFS_VOLUME_STATE_ONLINE The specified DFS root or link is available."
  },
  "api/Alphaleonis.Win32.Network.DfsTargetPriorityClass.html": {
    "href": "api/Alphaleonis.Win32.Network.DfsTargetPriorityClass.html",
    "title": "Enum DfsTargetPriorityClass | AlphaFS",
    "keywords": "Enum DfsTargetPriorityClass Defines the set of possible DFS target priority class settings. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax public enum DfsTargetPriorityClass Fields Name Description DfsGlobalHighPriorityClass The highest priority class for a DFS target. Targets assigned this class receive global preference. DfsGlobalLowPriorityClass The lowest level of priority class for a DFS target. Targets assigned this class receive the least preference globally. DfsInvalidPriorityClass The priority class is not valid. DfsSiteCostHighPriorityClass The highest site cost priority class for a DFS target. Targets assigned this class receive the most preference among targets of the same site cost for a given DFS client. DfsSiteCostLowPriorityClass The lowest site cost priority class for a DFS target. Targets assigned this class receive the least preference among targets of the same site cost for a given DFS client. DfsSiteCostNormalPriorityClass The middle or \"normal\" site cost priority class for a DFS target."
  },
  "api/Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.TransactionAlreadyCommittedException.html",
    "title": "Class TransactionAlreadyCommittedException | AlphaFS",
    "keywords": "Class TransactionAlreadyCommittedException [AlphaFS] It is too late to perform the requested operation, since the Transaction has already been committed. Inheritance Object Exception SystemException TransactionException TransactionAlreadyCommittedException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class TransactionAlreadyCommittedException : TransactionException, ISerializable, _Exception Constructors | Improve this Doc View Source TransactionAlreadyCommittedException() [AlphaFS] Initializes a new instance of the TransactionAlreadyCommittedException class. Declaration public TransactionAlreadyCommittedException() | Improve this Doc View Source TransactionAlreadyCommittedException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the TransactionAlreadyCommittedException class. Declaration protected TransactionAlreadyCommittedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. | Improve this Doc View Source TransactionAlreadyCommittedException(String) [AlphaFS] Initializes a new instance of the TransactionAlreadyCommittedException class. Declaration public TransactionAlreadyCommittedException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source TransactionAlreadyCommittedException(String, Exception) [AlphaFS] Initializes a new instance of the TransactionAlreadyCommittedException class. Declaration public TransactionAlreadyCommittedException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.TransactionAlreadyAbortedException.html",
    "title": "Class TransactionAlreadyAbortedException | AlphaFS",
    "keywords": "Class TransactionAlreadyAbortedException [AlphaFS] It is too late to perform the requested operation, since the Transaction has already been aborted. Inheritance Object Exception SystemException TransactionException TransactionAlreadyAbortedException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class TransactionAlreadyAbortedException : TransactionException, ISerializable, _Exception Constructors | Improve this Doc View Source TransactionAlreadyAbortedException() [AlphaFS] Initializes a new instance of the TransactionAlreadyAbortedException class. Declaration public TransactionAlreadyAbortedException() | Improve this Doc View Source TransactionAlreadyAbortedException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the TransactionAlreadyAbortedException class. Declaration protected TransactionAlreadyAbortedException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The info. StreamingContext context The context. | Improve this Doc View Source TransactionAlreadyAbortedException(String) [AlphaFS] Initializes a new instance of the TransactionAlreadyAbortedException class. Declaration public TransactionAlreadyAbortedException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source TransactionAlreadyAbortedException(String, Exception) [AlphaFS] Initializes a new instance of the TransactionAlreadyAbortedException class. Declaration public TransactionAlreadyAbortedException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.TransactionalConflictException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.TransactionalConflictException.html",
    "title": "Class TransactionalConflictException | AlphaFS",
    "keywords": "Class TransactionalConflictException [AlphaFS] The function attempted to use a name that is reserved for use by another transaction. Inheritance Object Exception SystemException TransactionException TransactionalConflictException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class TransactionalConflictException : TransactionException, ISerializable, _Exception Constructors | Improve this Doc View Source TransactionalConflictException() [AlphaFS] Initializes a new instance of the TransactionalConflictException class. Declaration public TransactionalConflictException() | Improve this Doc View Source TransactionalConflictException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the TransactionalConflictException class. Declaration protected TransactionalConflictException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The info. StreamingContext context The context. | Improve this Doc View Source TransactionalConflictException(String) [AlphaFS] Initializes a new instance of the TransactionalConflictException class. Declaration public TransactionalConflictException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source TransactionalConflictException(String, Exception) [AlphaFS] Initializes a new instance of the TransactionalConflictException class. Declaration public TransactionalConflictException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.SymbolicLinkType.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.SymbolicLinkType.html",
    "title": "Enum SymbolicLinkType | AlphaFS",
    "keywords": "Enum SymbolicLinkType Specifies the type of a symbolic link. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum SymbolicLinkType Fields Name Description Absolute The symbolic link is absolute. Relative The symbolic link is relative."
  },
  "api/Alphaleonis.Win32.Filesystem.Shell32Info.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Shell32Info.html",
    "title": "Class Shell32Info | AlphaFS",
    "keywords": "Class Shell32Info Contains Shell32 information about a file. Inheritance Object Shell32Info Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] [SecurityCritical] public sealed class Shell32Info Constructors | Improve this Doc View Source Shell32Info(String) Initializes a Shell32Info instance. Declaration public Shell32Info(string fileName) Parameters Type Name Description String fileName The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character. Remarks Shell32 is limited to MAX_PATH length. | Improve this Doc View Source Shell32Info(String, PathFormat) Initializes a Shell32Info instance. Declaration public Shell32Info(string fileName, PathFormat pathFormat) Parameters Type Name Description String fileName The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Shell32 is limited to MAX_PATH length. Properties | Improve this Doc View Source Association Gets the Shell file or protocol association from the registry. Declaration public string Association { get; } Property Value Type Description String | Improve this Doc View Source Attributes The attributes of the file object. Declaration public Shell32.GetAttributesOf Attributes { get; } Property Value Type Description Shell32.GetAttributesOf | Improve this Doc View Source Command Gets the Shell command association from the registry. Declaration public string Command { get; } Property Value Type Description String | Improve this Doc View Source ContentType Gets the Shell command association from the registry. Declaration public string ContentType { get; } Property Value Type Description String | Improve this Doc View Source DdeApplication Gets the Shell DDE association from the registry. Declaration public string DdeApplication { get; } Property Value Type Description String | Improve this Doc View Source DefaultIcon Gets the Shell default icon association from the registry. Declaration public string DefaultIcon { get; } Property Value Type Description String | Improve this Doc View Source FriendlyAppName Gets the Shell friendly application name association from the registry. Declaration public string FriendlyAppName { get; } Property Value Type Description String | Improve this Doc View Source FriendlyDocName Gets the Shell friendly document name association from the registry. Declaration public string FriendlyDocName { get; } Property Value Type Description String | Improve this Doc View Source FullPath Represents the fully qualified path of the file. Declaration public string FullPath { get; } Property Value Type Description String | Improve this Doc View Source OpenWithAppName Gets the Shell \"Open With\" command association from the registry. Declaration public string OpenWithAppName { get; } Property Value Type Description String Methods | Improve this Doc View Source GetIcon(Shell32.FileAttributes) Gets an IntPtr handle to the Shell icon that represents the file. Declaration [SecurityCritical] public IntPtr GetIcon(Shell32.FileAttributes iconAttributes) Parameters Type Name Description Shell32.FileAttributes iconAttributes Icon size SmallIcon or LargeIcon . Can also be combined with AddOverlays and others. Returns Type Description IntPtr An IntPtr handle to the Shell icon that represents the file. Remarks Caller is responsible for destroying this handle with DestroyIcon() when no longer needed. | Improve this Doc View Source GetVerbCommand(String) Gets the Shell command association from the registry. Declaration [SecurityCritical] public string GetVerbCommand(string shellVerb) Parameters Type Name Description String shellVerb The shell verb. Returns Type Description String Returns the associated file- or protocol-related Shell command from the registry or string.Empty if no association can be found. | Improve this Doc View Source Refresh() Refreshes the state of the object. Declaration [SecurityCritical] public void Refresh() | Improve this Doc View Source ToString() Returns the path as a string. Declaration public override string ToString() Returns Type Description String The path. Overrides Object.ToString()"
  },
  "api/Alphaleonis.Win32.Filesystem.Shell32.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Shell32.html",
    "title": "Class Shell32 | AlphaFS",
    "keywords": "Class Shell32 Provides access to a file system object, using Shell32. Inheritance Object Shell32 Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public static class Shell32 Methods | Improve this Doc View Source DestroyIcon(IntPtr) Destroys an icon and frees any memory the icon occupied. Declaration public static void DestroyIcon(IntPtr iconHandle) Parameters Type Name Description IntPtr iconHandle An IntPtr handle to an icon. | Improve this Doc View Source GetFileAssociation(String) Gets the file or protocol that is associated with path from the registry. Declaration [SecurityCritical] public static string GetFileAssociation(string path) Parameters Type Name Description String path A path to the file. Returns Type Description String The associated file- or protocol-related string from the registry or string.Empty if no association can be found. | Improve this Doc View Source GetFileContentType(String) Gets the content-type that is associated with path from the registry. Declaration [SecurityCritical] public static string GetFileContentType(string path) Parameters Type Name Description String path A path to the file. Returns Type Description String The associated file- or protocol-related content-type from the registry or string.Empty if no association can be found. | Improve this Doc View Source GetFileDefaultIcon(String) Gets the default icon that is associated with path from the registry. Declaration [SecurityCritical] public static string GetFileDefaultIcon(string path) Parameters Type Name Description String path A path to the file. Returns Type Description String The associated file- or protocol-related default icon from the registry or string.Empty if no association can be found. | Improve this Doc View Source GetFileFriendlyAppName(String) Gets the friendly application name that is associated with path from the registry. Declaration [SecurityCritical] public static string GetFileFriendlyAppName(string path) Parameters Type Name Description String path A path to the file. Returns Type Description String The associated file- or protocol-related friendly application name from the registry or string.Empty if no association can be found. | Improve this Doc View Source GetFileFriendlyDocName(String) Gets the friendly document name that is associated with path from the registry. Declaration [SecurityCritical] public static string GetFileFriendlyDocName(string path) Parameters Type Name Description String path A path to the file. Returns Type Description String The associated file- or protocol-related friendly document name from the registry or string.Empty if no association can be found. | Improve this Doc View Source GetFileIcon(String, Shell32.FileAttributes) Gets an IntPtr handle to the Shell icon that represents the file. Declaration [SecurityCritical] public static IntPtr GetFileIcon(string filePath, Shell32.FileAttributes iconAttributes) Parameters Type Name Description String filePath The path to the file system object which should not exceed maximum path length. Both absolute and relative paths are valid. Shell32.FileAttributes iconAttributes Icon size SmallIcon or LargeIcon . Can also be combined with AddOverlays and others. Returns Type Description IntPtr An IntPtr handle to the Shell icon that represents the file, or IntPtr.Zero on failure. Remarks Caller is responsible for destroying this handle with DestroyIcon() when no longer needed. | Improve this Doc View Source GetFileInfo(String, FileAttributes, Shell32.FileAttributes, Boolean) Retrieves information about an object in the file system, such as a file, folder, directory, or drive root. Declaration [SecurityCritical] public static Shell32.FileInfo GetFileInfo(string filePath, FileAttributes attributes, Shell32.FileAttributes fileAttributes, bool continueOnException) Parameters Type Name Description String filePath The path to the file system object which should not exceed the maximum path length. Both absolute and relative paths are valid. FileAttributes attributes A FileAttributes attribute. Shell32.FileAttributes fileAttributes One ore more Shell32.FileAttributes attributes. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as ACLs protected directories or non-accessible reparse points. Returns Type Description Shell32.FileInfo A Shell32.FileInfo struct instance. Remarks You should call this function from a background thread. Failure to do so could cause the UI to stop responding. Unicode path are supported. | Improve this Doc View Source GetFileOpenWithAppName(String) Gets the \"Open With\" command that is associated with path from the registry. Declaration [SecurityCritical] public static string GetFileOpenWithAppName(string path) Parameters Type Name Description String path A path to the file. Returns Type Description String The associated file- or protocol-related \"Open With\" command from the registry or string.Empty if no association can be found. | Improve this Doc View Source GetFileVerbCommand(String) Gets the Shell command that is associated with path from the registry. Declaration [SecurityCritical] public static string GetFileVerbCommand(string path) Parameters Type Name Description String path A path to the file. Returns Type Description String The associated file- or protocol-related Shell command from the registry or string.Empty if no association can be found. | Improve this Doc View Source GetShell32Info(String) Retrieves an instance of Shell32Info containing information about the specified file. Declaration [SecurityCritical] public static Shell32Info GetShell32Info(string path) Parameters Type Name Description String path A path to the file. Returns Type Description Shell32Info A Shell32Info class instance. | Improve this Doc View Source GetShell32Info(String, PathFormat) Retrieves an instance of Shell32Info containing information about the specified file. Declaration [SecurityCritical] public static Shell32Info GetShell32Info(string path, PathFormat pathFormat) Parameters Type Name Description String path A path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Shell32Info A Shell32Info class instance. | Improve this Doc View Source PathFileExists(String) Determines whether a path to a file system object such as a file or folder is valid. Declaration [SecurityCritical] public static bool PathFileExists(string path) Parameters Type Name Description String path The full path of maximum length the maximum path length to the object to verify. Returns Type Description Boolean true if the file exists; false otherwise"
  },
  "api/Alphaleonis.Win32.Filesystem.Shell32.UrlType.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Shell32.UrlType.html",
    "title": "Enum Shell32.UrlType | AlphaFS",
    "keywords": "Enum Shell32.UrlType Used by method UrlIs() to define a URL type. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum UrlType Fields Name Description IsAppliable Attempt to determine a valid scheme for the URL. IsDirectory Does the URL string end with a directory? IsFileUrl Is the URL a file URL? IsHasQuery Does the URL have an appended query string? IsNoHistory Is the URL a URL that is not typically tracked in navigation history? IsOpaque Is the URL opaque? IsUrl Is the URL valid?"
  },
  "api/Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Shell32.GetAttributesOf.html",
    "title": "Enum Shell32.GetAttributesOf | AlphaFS",
    "keywords": "Enum Shell32.GetAttributesOf SFGAO - Attributes that can be retrieved from a file system object. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum GetAttributesOf Fields Name Description Browsable 0x08000000 - The specified items can be hosted inside a web browser or Windows Explorer frame. CanCopy 0x00000001 - The specified items can be copied. CanDelete 0x00000020 - The specified items can be deleted. CanLink 0x00000004 - Shortcuts can be created for the specified items. CanMove 0x00000002 - The specified items can be moved. CanRename 0x00000010 - The specified items can be renamed. Note that this value is essentially a suggestion; not all namespace clients allow items to be renamed. However, those that do must have this attribute set. Compressed 0x04000000 - The specified items are compressed. DropTarget 0x00000100 - The specified items are drop targets. Encrypted 0x00002000 - The specified items are encrypted and might require special presentation. FileSysAncestor 0x10000000 - The specified folders are either file system folders or contain at least one descendant (child, grandchild, or later) that is a file system folder. FileSystem 0x40000000 - The specified folders or files are part of the file system (that is, they are files, directories, or root directories). Folder 0x20000000 - The specified items are folders. Ghosted 0x00008000 - The specified items are shown as dimmed and unavailable to the user. HasPropSheet 0x00000040 - The specified items have property sheets. HasSubFolder 0x80000000 - The specified folders have subfolders. Hidden 0x00080000 - The item is hidden and should not be displayed unless the Show hidden files and folders option is enabled in Folder Settings. IsSlow 0x00004000 - Accessing the item (through IStream or other storage interfaces) is expected to be a slow operation. Link 0x00010000 - The specified items are shortcuts. NewContent 0x00200000 - The items contain new content, as defined by the particular application. None 0x00000000 - None. NonEnumerated 0x00100000 - The items are nonenumerated items and should be hidden. They are not returned through an enumerator such as that created by the IShellFolder::EnumObjects method. ReadOnly 0x00040000 - The specified items are read-only. In the case of folders, this means that new items cannot be created in those folders. Removable 0x02000000 - The specified items are on removable media or are themselves removable devices. Share 0x00020000 - The specified objects are shared. Storage 0x00000008 - The specified items can be bound to an IStorage object through IShellFolder::BindToObject. For more information about namespace manipulation capabilities, see IStorage. StorageAncestor 0x00800000 - Children of this item are accessible through IStream or IStorage. Stream 0x00400000 - Indicates that the item has a stream associated with it. System 0x00001000 - The specified items are system items. Validate 0x01000000 - When specified as input, instructs the folder to validate that the items contained in a folder or Shell item array exist."
  },
  "api/Alphaleonis.Win32.Filesystem.FinalPathFormats.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.FinalPathFormats.html",
    "title": "Enum FinalPathFormats | AlphaFS",
    "keywords": "Enum FinalPathFormats Determines the format to convert a path to using GetFinalPathNameByHandle(SafeFileHandle) . Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum FinalPathFormats Fields Name Description FileNameOpened Return the opened file name (not normalized). None (FileNameNormalized / VolumeNameDos) Return the normalized drive name. This is the default. VolumeNameGuid Return the path with a volume GUID path instead of the drive name. VolumeNameNone Return the path with no drive information. VolumeNameNT Return the path with the volume device path."
  },
  "api/Alphaleonis.Win32.Filesystem.FileSystemInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.FileSystemInfo.html",
    "title": "Class FileSystemInfo | AlphaFS",
    "keywords": "Class FileSystemInfo Provides the base class for both FileInfo and DirectoryInfo objects. Inheritance Object MarshalByRefObject FileSystemInfo DirectoryInfo FileInfo Implements IEquatable < FileSystemInfo > Inherited Members MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] [ComVisible(true)] public abstract class FileSystemInfo : MarshalByRefObject, IEquatable<FileSystemInfo> Fields | Improve this Doc View Source FullPath Represents the fully qualified path of the file or directory. Declaration protected string FullPath Field Value Type Description String Remarks Classes derived from FileSystemInfo can use the FullPath field to determine the full path of the object being manipulated. | Improve this Doc View Source OriginalPath The path originally specified by the user, whether relative or absolute. Declaration protected string OriginalPath Field Value Type Description String Properties | Improve this Doc View Source Attributes Gets or sets the attributes for the current file or directory. Declaration public FileAttributes Attributes { [SecurityCritical] get; [SecurityCritical] set; } Property Value Type Description FileAttributes FileAttributes of the current FileSystemInfo . Remarks The value of the CreationTime property is pre-cached To get the latest value, call the Refresh method. Exceptions Type Condition FileNotFoundException DirectoryNotFoundException IOException | Improve this Doc View Source CreationTime Gets or sets the creation time of the current file or directory. Declaration public DateTime CreationTime { [SecurityCritical] get; [SecurityCritical] set; } Property Value Type Description DateTime The creation date and time of the current FileSystemInfo object. Remarks The value of the CreationTime property is pre-cached To get the latest value, call the Refresh method. This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. If the file described in the FileSystemInfo object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file. Exceptions Type Condition DirectoryNotFoundException IOException | Improve this Doc View Source CreationTimeUtc Gets or sets the creation time, in coordinated universal time (UTC), of the current file or directory. Declaration [ComVisible(false)] public DateTime CreationTimeUtc { [SecurityCritical] get; [SecurityCritical] set; } Property Value Type Description DateTime The creation date and time in UTC format of the current FileSystemInfo object. Remarks The value of the CreationTimeUtc property is pre-cached To get the latest value, call the Refresh method. This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. To get the latest value, call the Refresh method. If the file described in the FileSystemInfo object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). NTFS-formatted drives may cache file meta-info, such as file creation time, for a short period of time. This process is known as file tunneling. As a result, it may be necessary to explicitly set the creation time of a file if you are overwriting or replacing an existing file. Exceptions Type Condition DirectoryNotFoundException IOException | Improve this Doc View Source DisplayPath Returns the path as a string. Declaration protected string DisplayPath { get; set; } Property Value Type Description String | Improve this Doc View Source EntryInfo [AlphaFS] Gets the instance of the FileSystemEntryInfo class. Declaration public FileSystemEntryInfo EntryInfo { [SecurityCritical] get; } Property Value Type Description FileSystemEntryInfo | Improve this Doc View Source Exists Gets a value indicating whether the file or directory exists. Declaration public abstract bool Exists { get; } Property Value Type Description Boolean true if the file or directory exists; otherwise, false . Remarks The Exists property returns false if any error occurs while trying to determine if the specified file or directory exists. This can occur in situations that raise exceptions such as passing a directory- or file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file or directory. | Improve this Doc View Source Extension Gets the string representing the extension part of the file. Declaration public string Extension { get; } Property Value Type Description String A string containing the FileSystemInfo extension. Remarks The Extension property returns the FileSystemInfo extension, including the period (.). For example, for a file c:\\NewFile.txt, this property returns \".txt\". | Improve this Doc View Source FullName Gets the full path of the directory or file. Declaration public virtual string FullName { [SecurityCritical] get; } Property Value Type Description String A string containing the full path. | Improve this Doc View Source IsDirectory [AlphaFS] The initial \"IsDirectory\" indicator that was passed to the constructor. Declaration protected bool IsDirectory { get; set; } Property Value Type Description Boolean | Improve this Doc View Source LastAccessTime Gets or sets the time the current file or directory was last accessed. Declaration public DateTime LastAccessTime { [SecurityCritical] get; [SecurityCritical] set; } Property Value Type Description DateTime The time that the current file or directory was last accessed. Remarks The value of the LastAccessTime property is pre-cached To get the latest value, call the Refresh method. This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. If the file described in the FileSystemInfo object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. Exceptions Type Condition IOException | Improve this Doc View Source LastAccessTimeUtc Gets or sets the time, in coordinated universal time (UTC), that the current file or directory was last accessed. Declaration [ComVisible(false)] public DateTime LastAccessTimeUtc { [SecurityCritical] get; [SecurityCritical] set; } Property Value Type Description DateTime The UTC time that the current file or directory was last accessed. Remarks The value of the LastAccessTimeUtc property is pre-cached. To get the latest value, call the Refresh method. This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. If the file described in the FileSystemInfo object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. Exceptions Type Condition IOException | Improve this Doc View Source LastWriteTime Gets or sets the time when the current file or directory was last written to. Declaration public DateTime LastWriteTime { get; set; } Property Value Type Description DateTime The time the current file was last written. Remarks The value of the LastWriteTime property is pre-cached. To get the latest value, call the Refresh method. This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. If the file described in the FileSystemInfo object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. Exceptions Type Condition IOException | Improve this Doc View Source LastWriteTimeUtc Gets or sets the time, in coordinated universal time (UTC), when the current file or directory was last written to. Declaration [ComVisible(false)] public DateTime LastWriteTimeUtc { [SecurityCritical] get; [SecurityCritical] set; } Property Value Type Description DateTime The UTC time when the current file was last written to. Remarks The value of the LastWriteTimeUtc property is pre-cached. To get the latest value, call the Refresh method. This method may return an inaccurate value, because it uses native functions whose values may not be continuously updated by the operating system. If the file described in the FileSystemInfo object does not exist, this property will return 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC), adjusted to local time. | Improve this Doc View Source LongFullName The full path of the file system object in Unicode (LongPath) format. Declaration protected string LongFullName { get; set; } Property Value Type Description String | Improve this Doc View Source Name For files, gets the name of the file. For directories, gets the name of the last directory in the hierarchy if a hierarchy exists. Otherwise, the Name property gets the name of the directory. Declaration public abstract string Name { get; } Property Value Type Description String A string that is the name of the parent directory, the name of the last directory in the hierarchy, or the name of a file, including the file name extension. Remarks For a directory, Name returns only the name of the parent directory, such as Dir, not c:\\Dir. For a subdirectory, Name returns only the name of the subdirectory, such as Sub1, not c:\\Dir\\Sub1. For a file, Name returns only the file name and file name extension, such as MyFile.txt, not c:\\Dir\\Myfile.txt. | Improve this Doc View Source Transaction [AlphaFS] Represents the KernelTransaction that was passed to the constructor. Declaration protected KernelTransaction Transaction { get; set; } Property Value Type Description KernelTransaction Methods | Improve this Doc View Source Delete() Deletes a file or directory. Declaration [SecurityCritical] public abstract void Delete() | Improve this Doc View Source Equals(FileSystemInfo) Determines whether the specified Object is equal to the current Object. Declaration public bool Equals(FileSystemInfo other) Parameters Type Name Description FileSystemInfo other Another FileSystemInfo instance to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to the current Object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Another object to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current Object. Overrides Object.GetHashCode() | Improve this Doc View Source Refresh() Refreshes the state of the object. Declaration [SecurityCritical] public void Refresh() Remarks FileSystemInfo.Refresh() takes a snapshot of the file from the current file system. Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98. Calls must be made to Refresh() before attempting to get the attribute information, or the information will be outdated. | Improve this Doc View Source RefreshEntryInfo() [AlphaFS] Refreshes the state of the FileSystemEntryInfo EntryInfo property. Declaration [SecurityCritical] protected void RefreshEntryInfo() Remarks FileSystemInfo.RefreshEntryInfo() takes a snapshot of the file from the current file system. Refresh cannot correct the underlying file system even if the file system returns incorrect or outdated information. This can happen on platforms such as Windows 98. Calls must be made to Refresh() before attempting to get the attribute information, or the information will be outdated. | Improve this Doc View Source ToString() Returns a string that represents the current object. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString() Remarks ToString is the major formatting method in the .NET Framework. It converts an object to its string representation so that it is suitable for display. Operators | Improve this Doc View Source Equality(FileSystemInfo, FileSystemInfo) Implements the operator == Declaration public static bool operator ==(FileSystemInfo left, FileSystemInfo right) Parameters Type Name Description FileSystemInfo left A. FileSystemInfo right B. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(FileSystemInfo, FileSystemInfo) Implements the operator != Declaration public static bool operator !=(FileSystemInfo left, FileSystemInfo right) Parameters Type Name Description FileSystemInfo left A. FileSystemInfo right B. Returns Type Description Boolean The result of the operator. Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.FileSystemEntryInfo.html",
    "title": "Class FileSystemEntryInfo | AlphaFS",
    "keywords": "Class FileSystemEntryInfo Represents information about a file system entry. This class cannot be inherited. Inheritance Object FileSystemEntryInfo Implements IEquatable < FileSystemEntryInfo > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] [SecurityCritical] public sealed class FileSystemEntryInfo : IEquatable<FileSystemEntryInfo> Properties | Improve this Doc View Source AlternateFileName The instance 8.3 version of the filename. Declaration public string AlternateFileName { get; } Property Value Type Description String | Improve this Doc View Source Attributes The instance attributes. Declaration public FileAttributes Attributes { get; } Property Value Type Description FileAttributes | Improve this Doc View Source CreationTime The instance creation time. Declaration public DateTime CreationTime { get; } Property Value Type Description DateTime | Improve this Doc View Source CreationTimeUtc The instance creation time, in coordinated universal time (UTC). Declaration public DateTime CreationTimeUtc { get; } Property Value Type Description DateTime | Improve this Doc View Source Extension The instance file extension. Declaration public string Extension { get; } Property Value Type Description String | Improve this Doc View Source FileName The instance file name. Declaration public string FileName { get; } Property Value Type Description String | Improve this Doc View Source FileSize The instance file size. Declaration public long FileSize { get; } Property Value Type Description Int64 | Improve this Doc View Source FullPath The instance full path. Declaration public string FullPath { get; set; } Property Value Type Description String | Improve this Doc View Source IsArchive The instance is a candidate for backup or removal. Declaration public bool IsArchive { get; } Property Value Type Description Boolean | Improve this Doc View Source IsCompressed The instance is compressed. Declaration public bool IsCompressed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDevice Reserved for future use. Declaration public bool IsDevice { get; } Property Value Type Description Boolean | Improve this Doc View Source IsDirectory The instance is a directory. Declaration public bool IsDirectory { get; } Property Value Type Description Boolean | Improve this Doc View Source IsEncrypted The instance is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and directories. Declaration public bool IsEncrypted { get; } Property Value Type Description Boolean | Improve this Doc View Source IsHidden The instance is hidden, and thus is not included in an ordinary directory listing. Declaration public bool IsHidden { get; } Property Value Type Description Boolean | Improve this Doc View Source IsMountPoint The instance is a mount point. Applicable to local directories and local volumes. Declaration public bool IsMountPoint { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNormal The instance is a standard file that has no special attributes. This attribute is valid only if it is used alone. Declaration public bool IsNormal { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNotContentIndexed The instance will not be indexed by the operating system's content indexing service. Declaration public bool IsNotContentIndexed { get; } Property Value Type Description Boolean | Improve this Doc View Source IsOffline The instance is offline. The data of the file is not immediately available. Declaration public bool IsOffline { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReadOnly The instance is read-only. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReparsePoint The instance contains a reparse point, which is a block of user-defined data associated with a file or a directory. Declaration public bool IsReparsePoint { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSparseFile The instance is a sparse file. Sparse files are typically large files whose data consists of mostly zeros. Declaration public bool IsSparseFile { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSymbolicLink The instance is a symbolic link. Declaration public bool IsSymbolicLink { get; } Property Value Type Description Boolean | Improve this Doc View Source IsSystem The instance is a system file. That is, the file is part of the operating system or is used exclusively by the operating system. Declaration public bool IsSystem { get; } Property Value Type Description Boolean | Improve this Doc View Source IsTemporary The instance is temporary. A temporary file contains data that is needed while an application is executing but is not needed after the application is finished. File systems try to keep all the data in memory for quicker access rather than flushing the data back to mass storage. A temporary file should be deleted by the application as soon as it is no longer needed. Declaration public bool IsTemporary { get; } Property Value Type Description Boolean | Improve this Doc View Source LastAccessTime The instance time this entry was last accessed. Declaration public DateTime LastAccessTime { get; } Property Value Type Description DateTime | Improve this Doc View Source LastAccessTimeUtc The instance time, in coordinated universal time (UTC), this entry was last accessed. Declaration public DateTime LastAccessTimeUtc { get; } Property Value Type Description DateTime | Improve this Doc View Source LastWriteTime The instance time this entry was last modified. Declaration public DateTime LastWriteTime { get; } Property Value Type Description DateTime | Improve this Doc View Source LastWriteTimeUtc The instance time, in coordinated universal time (UTC), this entry was last modified. Declaration public DateTime LastWriteTimeUtc { get; } Property Value Type Description DateTime | Improve this Doc View Source LongFullPath The instance full path in long path format. Declaration public string LongFullPath { get; } Property Value Type Description String | Improve this Doc View Source ReparsePointTag The instance reparse point tag. Declaration public ReparsePointTag ReparsePointTag { get; } Property Value Type Description ReparsePointTag Methods | Improve this Doc View Source Equals(FileSystemEntryInfo) Determines whether the specified Object is equal to the current Object. Declaration public bool Equals(FileSystemEntryInfo other) Parameters Type Name Description FileSystemEntryInfo other Another FileSystemInfo instance to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to the current Object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Another object to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current Object. Overrides Object.GetHashCode() | Improve this Doc View Source ToString() Returns the FullPath of the FileSystemEntryInfo instance. Declaration public override string ToString() Returns Type Description String Returns the FullPath of the FileSystemEntryInfo instance. Overrides Object.ToString() Operators | Improve this Doc View Source Equality(FileSystemEntryInfo, FileSystemEntryInfo) Implements the operator == Declaration public static bool operator ==(FileSystemEntryInfo left, FileSystemEntryInfo right) Parameters Type Name Description FileSystemEntryInfo left A. FileSystemEntryInfo right B. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(FileSystemEntryInfo, FileSystemEntryInfo) Implements the operator != Declaration public static bool operator !=(FileSystemEntryInfo left, FileSystemEntryInfo right) Parameters Type Name Description FileSystemEntryInfo left A. FileSystemEntryInfo right B. Returns Type Description Boolean The result of the operator. Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Win32.Filesystem.FileReadOnlyException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.FileReadOnlyException.html",
    "title": "Class FileReadOnlyException | AlphaFS",
    "keywords": "Class FileReadOnlyException [AlphaFS] The operation could not be completed because the file is read-only. Inheritance Object Exception SystemException UnauthorizedAccessException FileReadOnlyException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class FileReadOnlyException : UnauthorizedAccessException, ISerializable, _Exception Constructors | Improve this Doc View Source FileReadOnlyException() [AlphaFS] Initializes a new instance of the FileReadOnlyException class. Declaration public FileReadOnlyException() | Improve this Doc View Source FileReadOnlyException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the FileReadOnlyException class. Declaration protected FileReadOnlyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The data for serializing or deserializing the object. StreamingContext context The source and destination for the object. | Improve this Doc View Source FileReadOnlyException(String) [AlphaFS] Initializes a new instance of the FileReadOnlyException class. Declaration public FileReadOnlyException(string path) Parameters Type Name Description String path The path to the file. | Improve this Doc View Source FileReadOnlyException(String, Exception) [AlphaFS] Initializes a new instance of the FileReadOnlyException class. Declaration public FileReadOnlyException(string path, Exception innerException) Parameters Type Name Description String path The path to the file. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.BackupFileStream.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.BackupFileStream.html",
    "title": "Class BackupFileStream | AlphaFS",
    "keywords": "Class BackupFileStream The BackupFileStream provides access to data associated with a specific file or directory, including security information and alternative data streams, for backup and restore operations. Inheritance Object MarshalByRefObject Stream BackupFileStream Implements IDisposable Inherited Members Stream.Null Stream.CopyToAsync(Stream) Stream.CopyToAsync(Stream, Int32) Stream.CopyToAsync(Stream, Int32, CancellationToken) Stream.CopyTo(Stream) Stream.CopyTo(Stream, Int32) Stream.Close() Stream.Dispose() Stream.FlushAsync() Stream.FlushAsync(CancellationToken) Stream.CreateWaitHandle() Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object) Stream.EndRead(IAsyncResult) Stream.ReadAsync(Byte[], Int32, Int32) Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken) Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object) Stream.EndWrite(IAsyncResult) Stream.WriteAsync(Byte[], Int32, Int32) Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken) Stream.ReadByte() Stream.WriteByte(Byte) Stream.Synchronized(Stream) Stream.ObjectInvariant() Stream.CanTimeout Stream.ReadTimeout Stream.WriteTimeout MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public sealed class BackupFileStream : Stream, IDisposable Remarks This class uses the BackupRead , BackupSeek and BackupWrite functions from the Win32 API to provide access to the file or directory. Constructors | Improve this Doc View Source BackupFileStream(KernelTransaction, String, FileMode) Initializes a new instance of the BackupFileStream class with the specified path and creation mode. Declaration [SecurityCritical] public BackupFileStream(KernelTransaction transaction, string path, FileMode mode) Parameters Type Name Description KernelTransaction transaction The transaction. String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. Remarks The file will be opened for exclusive access for both reading and writing. | Improve this Doc View Source BackupFileStream(KernelTransaction, String, FileMode, FileSystemRights) Initializes a new instance of the BackupFileStream class with the specified path, creation mode and access rights. Declaration [SecurityCritical] public BackupFileStream(KernelTransaction transaction, string path, FileMode mode, FileSystemRights access) Parameters Type Name Description KernelTransaction transaction The transaction. String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. FileSystemRights access A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file. Remarks The file will be opened for exclusive access. | Improve this Doc View Source BackupFileStream(KernelTransaction, String, FileMode, FileSystemRights, FileShare) Initializes a new instance of the BackupFileStream class with the specified path, creation mode, access rights and sharing permission. Declaration [SecurityCritical] public BackupFileStream(KernelTransaction transaction, string path, FileMode mode, FileSystemRights access, FileShare share) Parameters Type Name Description KernelTransaction transaction The transaction. String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. FileSystemRights access A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file. FileShare share A FileShare constant that determines how the file will be shared by processes. | Improve this Doc View Source BackupFileStream(KernelTransaction, String, FileMode, FileSystemRights, FileShare, ExtendedFileAttributes) Initializes a new instance of the BackupFileStream class with the specified path, creation mode, access rights and sharing permission, and additional file attributes. Declaration [SecurityCritical] public BackupFileStream(KernelTransaction transaction, string path, FileMode mode, FileSystemRights access, FileShare share, ExtendedFileAttributes attributes) Parameters Type Name Description KernelTransaction transaction The transaction. String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. FileSystemRights access A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file. FileShare share A FileShare constant that determines how the file will be shared by processes. ExtendedFileAttributes attributes A ExtendedFileAttributes constant that specifies additional file attributes. | Improve this Doc View Source BackupFileStream(KernelTransaction, String, FileMode, FileSystemRights, FileShare, ExtendedFileAttributes, FileSecurity) Initializes a new instance of the BackupFileStream class with the specified path, creation mode, access rights and sharing permission, additional file attributes, access control and audit security. Declaration [SecurityCritical] public BackupFileStream(KernelTransaction transaction, string path, FileMode mode, FileSystemRights access, FileShare share, ExtendedFileAttributes attributes, FileSecurity security) Parameters Type Name Description KernelTransaction transaction The transaction. String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. FileSystemRights access A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file. FileShare share A FileShare constant that determines how the file will be shared by processes. ExtendedFileAttributes attributes A ExtendedFileAttributes constant that specifies additional file attributes. FileSecurity security A FileSecurity constant that determines the access control and audit security for the file. This parameter This parameter may be null . | Improve this Doc View Source BackupFileStream(SafeFileHandle, FileSystemRights) Initializes a new instance of the BackupFileStream class for the specified file handle, with the specified read/write permission. Declaration [SecurityCritical] public BackupFileStream(SafeFileHandle handle, FileSystemRights access) Parameters Type Name Description SafeFileHandle handle A file handle for the file that this BackupFileStream object will encapsulate. FileSystemRights access A FileSystemRights constant that gets the CanRead and CanWrite properties of the BackupFileStream object. | Improve this Doc View Source BackupFileStream(String, FileMode) Initializes a new instance of the BackupFileStream class with the specified path and creation mode. Declaration [SecurityCritical] public BackupFileStream(string path, FileMode mode) Parameters Type Name Description String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. Remarks The file will be opened for exclusive access for both reading and writing. | Improve this Doc View Source BackupFileStream(String, FileMode, FileSystemRights) Initializes a new instance of the BackupFileStream class with the specified path, creation mode and access rights. Declaration [SecurityCritical] public BackupFileStream(string path, FileMode mode, FileSystemRights access) Parameters Type Name Description String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. FileSystemRights access A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file. Remarks The file will be opened for exclusive access. | Improve this Doc View Source BackupFileStream(String, FileMode, FileSystemRights, FileShare) Initializes a new instance of the BackupFileStream class with the specified path, creation mode, access rights and sharing permission. Declaration [SecurityCritical] public BackupFileStream(string path, FileMode mode, FileSystemRights access, FileShare share) Parameters Type Name Description String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. FileSystemRights access A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file. FileShare share A FileShare constant that determines how the file will be shared by processes. | Improve this Doc View Source BackupFileStream(String, FileMode, FileSystemRights, FileShare, ExtendedFileAttributes) Initializes a new instance of the BackupFileStream class with the specified path, creation mode, access rights and sharing permission, and additional file attributes. Declaration [SecurityCritical] public BackupFileStream(string path, FileMode mode, FileSystemRights access, FileShare share, ExtendedFileAttributes attributes) Parameters Type Name Description String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. FileSystemRights access A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file. FileShare share A FileShare constant that determines how the file will be shared by processes. ExtendedFileAttributes attributes A ExtendedFileAttributes constant that specifies additional file attributes. | Improve this Doc View Source BackupFileStream(String, FileMode, FileSystemRights, FileShare, ExtendedFileAttributes, FileSecurity) Initializes a new instance of the BackupFileStream class with the specified path, creation mode, access rights and sharing permission, additional file attributes, access control and audit security. Declaration [SecurityCritical] public BackupFileStream(string path, FileMode mode, FileSystemRights access, FileShare share, ExtendedFileAttributes attributes, FileSecurity security) Parameters Type Name Description String path A relative or absolute path for the file that the current BackupFileStream object will encapsulate. FileMode mode A FileMode constant that determines how to open or create the file. FileSystemRights access A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file. FileShare share A FileShare constant that determines how the file will be shared by processes. ExtendedFileAttributes attributes A ExtendedFileAttributes constant that specifies additional file attributes. FileSecurity security A FileSecurity constant that determines the access control and audit security for the file. This parameter This parameter may be null . Properties | Improve this Doc View Source CanRead Gets a value indicating whether the current stream supports reading. Declaration public override bool CanRead { get; } Property Value Type Description Boolean true if the stream supports reading, false otherwise. Overrides Stream.CanRead | Improve this Doc View Source CanSeek Gets a value indicating whether the current stream supports seeking. Declaration public override bool CanSeek { get; } Property Value Type Description Boolean This method always returns false . Overrides Stream.CanSeek | Improve this Doc View Source CanWrite Gets a value indicating whether the current stream supports writing. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean true if the stream supports writing, false otherwise. Overrides Stream.CanWrite | Improve this Doc View Source Length When overridden in a derived class, gets the length in bytes of the stream. Declaration public override long Length { get; } Property Value Type Description Int64 This method always throws an exception. Overrides Stream.Length Exceptions Type Condition NotSupportedException | Improve this Doc View Source Position When overridden in a derived class, gets or sets the position within the current stream. Declaration public override long Position { get; set; } Property Value Type Description Int64 This method always throws an exception. Overrides Stream.Position Exceptions Type Condition NotSupportedException Methods | Improve this Doc View Source Dispose(Boolean) Releases the unmanaged resources used by the Stream and optionally releases the managed resources. Declaration protected override void Dispose(bool disposing) Parameters Type Name Description Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides Stream.Dispose(Boolean) | Improve this Doc View Source Finalize() Releases unmanaged resources and performs other cleanup operations before the BackupFileStream is reclaimed by garbage collection. Declaration protected void Finalize() | Improve this Doc View Source Flush() Clears all buffers for this stream and causes any buffered data to be written to the underlying device. Declaration public override void Flush() Overrides Stream.Flush() | Improve this Doc View Source GetAccessControl() Gets a FileSecurity object that encapsulates the access control list (ACL) entries for the file described by the current BackupFileStream object. Declaration [SecurityCritical] public FileSecurity GetAccessControl() Returns Type Description FileSecurity A FileSecurity object that encapsulates the access control list (ACL) entries for the file described by the current BackupFileStream object. Exceptions Type Condition IOException | Improve this Doc View Source Lock(Int64, Int64) Prevents other processes from changing the BackupFileStream while permitting read access. Declaration [SecurityCritical] public void Lock(long position, long length) Parameters Type Name Description Int64 position The beginning of the range to lock. The value of this parameter must be equal to or greater than zero (0). Int64 length The range to be locked. Exceptions Type Condition ArgumentOutOfRangeException ObjectDisposedException | Improve this Doc View Source Read(Byte[], Int32, Int32) Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration public override int Read(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and ( offset + count - 1) replaced by the bytes read from the current source. Int32 offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. Int32 count The maximum number of bytes to be read from the current stream. Returns Type Description Int32 The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Overrides Stream.Read(Byte[], Int32, Int32) Remarks This method will not backup the access-control list (ACL) data for the file or directory. Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException NotSupportedException ObjectDisposedException | Improve this Doc View Source Read(Byte[], Int32, Int32, Boolean) When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read. Declaration [SecurityCritical] public int Read(byte[] buffer, int offset, int count, bool processSecurity) Parameters Type Name Description Byte [] buffer An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and ( offset + count - 1) replaced by the bytes read from the current source. Int32 offset The zero-based byte offset in buffer at which to begin storing the data read from the current stream. Int32 count The maximum number of bytes to be read from the current stream. Boolean processSecurity Indicates whether the function will backup the access-control list (ACL) data for the file or directory. Returns Type Description Int32 The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached. Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException NotSupportedException ObjectDisposedException | Improve this Doc View Source ReadStreamInfo() Reads a stream header from the current BackupFileStream . Declaration [SecurityCritical] public BackupStreamInfo ReadStreamInfo() Returns Type Description BackupStreamInfo The stream header read from the current BackupFileStream , or null if the end-of-file was reached before the required number of bytes of a header could be read. Remarks The stream must be positioned at where an actual header starts for the returned object to represent valid information. Exceptions Type Condition IOException | Improve this Doc View Source Seek(Int64, SeekOrigin) When overridden in a derived class, sets the position within the current stream. Declaration public override long Seek(long offset, SeekOrigin origin) Parameters Type Name Description Int64 offset A byte offset relative to the origin parameter. SeekOrigin origin A value of type SeekOrigin indicating the reference point used to obtain the new position. Returns Type Description Int64 The new position within the current stream. Overrides Stream.Seek(Int64, SeekOrigin) Remarks note This stream does not support seeking using this method, and calling this method will always throw NotSupportedException . See Skip(Int64) for an alternative way of seeking forward. Exceptions Type Condition NotSupportedException | Improve this Doc View Source SetAccessControl(ObjectSecurity) Applies access control list (ACL) entries described by a FileSecurity object to the file described by the current BackupFileStream object. Declaration [SecurityCritical] public void SetAccessControl(ObjectSecurity fileSecurity) Parameters Type Name Description ObjectSecurity fileSecurity A FileSecurity object that describes an ACL entry to apply to the current file. | Improve this Doc View Source SetLength(Int64) When overridden in a derived class, sets the length of the current stream. Declaration public override void SetLength(long value) Parameters Type Name Description Int64 value The desired length of the current stream in bytes. Overrides Stream.SetLength(Int64) Remarks This method is not supported by the BackupFileStream class, and calling it will always generate a NotSupportedException . Exceptions Type Condition NotSupportedException | Improve this Doc View Source Skip(Int64) Skips ahead the specified number of bytes from the current stream. Declaration [SecurityCritical] public long Skip(long bytes) Parameters Type Name Description Int64 bytes The number of bytes to skip. Returns Type Description Int64 The number of bytes actually skipped. Remarks This method represents the Win32 API implementation of BackupSeek . Applications use the Skip(Int64) method to skip portions of a data stream that cause errors. This function does not seek across stream headers. For example, this function cannot be used to skip the stream name. If an application attempts to seek past the end of a substream, the function fails, the return value indicates the actual number of bytes the function seeks, and the file position is placed at the start of the next stream header. | Improve this Doc View Source Unlock(Int64, Int64) Allows access by other processes to all or part of a file that was previously locked. Declaration [SecurityCritical] public void Unlock(long position, long length) Parameters Type Name Description Int64 position The beginning of the range to unlock. Int64 length The range to be unlocked. Exceptions Type Condition ArgumentOutOfRangeException ArgumentOutOfRangeException ObjectDisposedException | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration public override void Write(byte[] buffer, int offset, int count) Parameters Type Name Description Byte [] buffer An array of bytes. This method copies count bytes from buffer to the current stream. Int32 offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. Int32 count The number of bytes to be written to the current stream. Overrides Stream.Write(Byte[], Int32, Int32) Remarks This method will not process the access-control list (ACL) data for the file or directory. Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException NotSupportedException ObjectDisposedException | Improve this Doc View Source Write(Byte[], Int32, Int32, Boolean) When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written. Declaration [SecurityCritical] public void Write(byte[] buffer, int offset, int count, bool processSecurity) Parameters Type Name Description Byte [] buffer An array of bytes. This method copies count bytes from buffer to the current stream. Int32 offset The zero-based byte offset in buffer at which to begin copying bytes to the current stream. Int32 count The number of bytes to be written to the current stream. Boolean processSecurity Specifies whether the function will restore the access-control list (ACL) data for the file or directory. If this is true you need to specify TakeOwnership and ChangePermissions access when opening the file or directory handle. If the handle does not have those access rights, the operating system denies access to the ACL data, and ACL data restoration will not occur. Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException NotSupportedException ObjectDisposedException Implements System.IDisposable"
  },
  "api/Alphaleonis.Win32.Filesystem.AlreadyExistsException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.AlreadyExistsException.html",
    "title": "Class AlreadyExistsException | AlphaFS",
    "keywords": "Class AlreadyExistsException [AlphaFS] The exception that is thrown when an attempt to create a file or directory that already exists was made. Both ERROR_ALREADY_EXISTS and ERROR_FILE_EXISTS can cause this Exception. Inheritance Object Exception SystemException IOException AlreadyExistsException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class AlreadyExistsException : IOException, ISerializable, _Exception Constructors | Improve this Doc View Source AlreadyExistsException() [AlphaFS] Initializes a new instance of the AlreadyExistsException class. Declaration public AlreadyExistsException() | Improve this Doc View Source AlreadyExistsException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the AlreadyExistsException class. Declaration protected AlreadyExistsException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The data for serializing or deserializing the object. StreamingContext context The source and destination for the object. | Improve this Doc View Source AlreadyExistsException(String) [AlphaFS] Initializes a new instance of the AlreadyExistsException class. Both ERROR_ALREADY_EXISTS and ERROR_FILE_EXISTS can cause this Exception. Declaration public AlreadyExistsException(string message) Parameters Type Name Description String message The custom error message.. | Improve this Doc View Source AlreadyExistsException(String, Boolean) [AlphaFS] Initializes a new instance of the AlreadyExistsException class. Declaration public AlreadyExistsException(string path, bool isPath) Parameters Type Name Description String path The path to the file system object. Boolean isPath Always set to true when using this constructor. | Improve this Doc View Source AlreadyExistsException(String, Exception) [AlphaFS] Initializes a new instance of the AlreadyExistsException class. Declaration public AlreadyExistsException(string path, Exception innerException) Parameters Type Name Description String path The path to the file system object. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Network.DriveConnection.html": {
    "href": "api/Alphaleonis.Win32.Network.DriveConnection.html",
    "title": "Class DriveConnection | AlphaFS",
    "keywords": "Class DriveConnection Used to create a temporary connection to a network resource that will be disconnected once this instance is disposed. Inheritance Object DriveConnection Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax public sealed class DriveConnection : IDisposable Constructors | Improve this Doc View Source DriveConnection(String) Creates a temporary connection to a network resource. The function can redirect a local device to a network resource, using the current user credentials. Declaration public DriveConnection(string remoteName) Parameters Type Name Description String remoteName The network resource to connect to. The string can be up to MAX_PATH characters in length. | Improve this Doc View Source DriveConnection(String, NetworkCredential, Boolean) Creates a temporary connection to a network resource. The function can redirect a local device to a network resource, can be supplied. Declaration public DriveConnection(string remoteName, NetworkCredential credentials, bool prompt) Parameters Type Name Description String remoteName The network resource to connect to. The string can be up to MAX_PATH characters in length. NetworkCredential credentials An instance of which provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication. Boolean prompt true always pops-up an authentication dialog box. | Improve this Doc View Source DriveConnection(String, String, String, Boolean) Creates a temporary connection to a network resource. The function can redirect a local device to a network resource, using a user name and password. Declaration public DriveConnection(string remoteName, string userName, string password, bool prompt) Parameters Type Name Description String remoteName The network resource to connect to. The string can be up to MAX_PATH characters in length. String userName The user name for making the connection. If userName is null , the function uses the default user name. (The user context for the process provides the default user name) String password The password to be used for making the network connection. If password is null , the function uses the current default password associated with the user specified by userName . Boolean prompt true always pops-up an authentication dialog box. Properties | Improve this Doc View Source LocalName The last available drive letter used for this connection. Declaration public string LocalName { get; } Property Value Type Description String The last available drive letter used for this connection. | Improve this Doc View Source Share The path originally specified by the user. Declaration public string Share { get; } Property Value Type Description String The path originally specified by the user. Methods | Improve this Doc View Source Dispose() Releases all resources used by the DriveConnection class. Declaration public void Dispose() | Improve this Doc View Source Finalize() DriveConnection class destructor. Declaration protected void Finalize() | Improve this Doc View Source ToString() Returns the last available drive letter used for this connection. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString() Implements System.IDisposable"
  },
  "api/Alphaleonis.Win32.Network.DomainType.html": {
    "href": "api/Alphaleonis.Win32.Network.DomainType.html",
    "title": "Enum DomainType | AlphaFS",
    "keywords": "Enum DomainType Specifies the domain type of a network. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax public enum DomainType Fields Name Description DomainAuthenticated The Network is an Active Directory Network, and this machine is authenticated against it. DomainNetwork The Network is an Active Directory Network, but this machine is not authenticated against it. None The Network is not an Active Directory Network."
  },
  "api/Alphaleonis.Win32.Filesystem.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.html",
    "title": "Namespace Alphaleonis.Win32.Filesystem | AlphaFS",
    "keywords": "Namespace Alphaleonis.Win32.Filesystem The Filesystem namespace contains classes to access and work with the local filesystem. Many of the classes in this namespace are replicas of the ones available in the System.IO namespace, but with added functionality. All methods in this namespace accept long windows unicode paths (i.e. paths starting with \\\\?\\ ). Additional classes and methods are provided to provide more advanced functionality than that of System.IO . Classes AlreadyExistsException [AlphaFS] The exception that is thrown when an attempt to create a file or directory that already exists was made. Both ERROR_ALREADY_EXISTS and ERROR_FILE_EXISTS can cause this Exception. BackupFileStream The BackupFileStream provides access to data associated with a specific file or directory, including security information and alternative data streams, for backup and restore operations. BackupStreamInfo The BackupStreamInfo structure contains stream header data. ByHandleFileInfo Contains information that the GetFileInformationByHandle function retrieves. CopyMoveResult Class for CopyMoveResult that contains the results for the Copy or Move action. Device Provides static methods to retrieve device resource information from a local or remote host. DeviceInfo Provides access to information of a device, on a local or remote host. DeviceNotReadyException [AlphaFS] The requested operation could not be completed because the device is not ready. Directory Exposes static methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited. DirectoryEnumerationFilters [AlphaFS] Specifies a set of custom filters to be used with enumeration methods of Directory , e.g., EnumerateDirectories(String) , EnumerateFiles(String) , or EnumerateFileSystemEntries(String) . DirectoryInfo Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited. DirectoryNotEmptyException [AlphaFS] The operation could not be completed because the directory is not empty. DirectoryReadOnlyException [AlphaFS] The operation could not be completed because the directory is read-only. DiskSpaceInfo Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread. This class cannot be inherited. DriveInfo Provides access to information on a local or remote drive. File Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of FileStream objects. FileIdBothDirectoryInfo [AlphaFS] Contains information about files in the specified directory. Used for directory handles. FileInfo Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of FileStream objects. This class cannot be inherited. FileReadOnlyException [AlphaFS] The operation could not be completed because the file is read-only. FileSystemEntryInfo Represents information about a file system entry. This class cannot be inherited. FileSystemInfo Provides the base class for both FileInfo and DirectoryInfo objects. InvalidTransactionException [AlphaFS] The transaction handle associated with this operation is not valid. KernelTransaction A KTM transaction object for use with the transacted operations in Alphaleonis.Win32.Filesystem . LinkTargetInfo Information about the target of a symbolic link or mount point. NotAReparsePointException [AlphaFS] The file or directory was not a reparse point. NotSameDeviceException [AlphaFS] The exception that is thrown when an attempt perform an operation across difference devices when this is not supported. Path Performs operations on String instances that contain file or directory path information. These operations are performed in a cross-platform manner. SafeFindFileHandle Represents a wrapper class for a handle used by the FindFirstFile/FindNextFile Win32 API functions. SafeFindVolumeHandle Represents a wrapper class for a handle used by the FindFirstVolume/FindNextVolume methods of the Win32 API. Shell32 Provides access to a file system object, using Shell32. Shell32Info Contains Shell32 information about a file. SymbolicLinkTargetInfo Represents information about a symbolic link. TransactionalConflictException [AlphaFS] The function attempted to use a name that is reserved for use by another transaction. TransactionAlreadyAbortedException [AlphaFS] It is too late to perform the requested operation, since the Transaction has already been aborted. TransactionAlreadyCommittedException [AlphaFS] It is too late to perform the requested operation, since the Transaction has already been committed. TransactionException [AlphaFS] The exception that is thrown when an attempt to create a file or directory that already exists was made. UnrecognizedReparsePointException [AlphaFS] The function attempted to use a name that is reserved for use by another transaction. UnsupportedRemoteTransactionException [AlphaFS] The remote server or share does not support transacted file operations. Volume [AlphaFS] Static class providing utility methods for working with Microsoft Windows devices and volumes. VolumeInfo Contains information about a filesystem Volume. Structs AlternateDataStreamInfo Information about an alternate data stream. FileIdInfo Contains information that the GetFileInformationByHandle function retrieves. Shell32.FileInfo SHFILEINFO structure, contains information about a file system object. Enums CopyMoveProgressCallbackReason Used by CopyFileXxx and MoveFileXxx. The reason that CopyMoveProgressRoutine was called. CopyMoveProgressResult Used by CopyFileXxx and MoveFileXxx. The CopyMoveProgressRoutine function should return one of the following values. CopyOptions Flags that specify how a file or directoryis to be copied. DeviceGuid System-Defined Device Interface Classes DirectoryEnumerationOptions [AlphaFS] Directory enumeration options, flags that specify how a directory is to be enumerated. DosDeviceAttributes Defines the controllable aspects of the Volume.DefineDosDevice() method. ExtendedFileAttributes Specifies how the operating system should open a file. FileEncryptionStatus Represents the encryption status of the specified file. FinalPathFormats Determines the format to convert a path to using GetFinalPathNameByHandle(SafeFileHandle) . GetFullPathOptions A bitfield of flags for specifying options for various internal operations that convert paths to full paths. MoveOptions Used by MoveFileXxx.Flags that specify how a file or directory is to be moved. PathFormat Indicates the format of a path passed to a method. ReparsePointTag Enumeration specifying the different reparse point tags. Shell32.AssociationAttributes Provides information for the IQueryAssociations interface methods, used by Shell32. Shell32.AssociationString ASSOCSTR enumeration - Used by the AssocQueryString() function to define the type of string that is to be returned. Shell32.FileAttributes Shell32 FileAttributes structure, used to retrieve the different types of a file system object. Shell32.GetAttributesOf SFGAO - Attributes that can be retrieved from a file system object. Shell32.UrlType Used by method UrlIs() to define a URL type. StreamAttribute Attributes of data to facilitate cross-operating system transfer. This member can be one or more of the following values. StreamId The type of the data contained in the backup stream. This member can be one of the following values. SymbolicLinkTarget Indicates whether the link target is a file or directory. SymbolicLinkType Specifies the type of a symbolic link. Delegates CopyMoveProgressRoutine Callback used by CopyFileXxx and MoveFileXxx to report progress about the copy/move operation. ErrorHandler [AlphaFS] Represents the method that will handle an error raised during retrieving file system entries."
  },
  "api/Alphaleonis.Win32.Filesystem.VolumeInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.VolumeInfo.html",
    "title": "Class VolumeInfo | AlphaFS",
    "keywords": "Class VolumeInfo Contains information about a filesystem Volume. Inheritance Object VolumeInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] [SecurityCritical] public sealed class VolumeInfo Constructors | Improve this Doc View Source VolumeInfo(SafeFileHandle) Initializes a VolumeInfo instance. Declaration [SecurityCritical] public VolumeInfo(SafeFileHandle volumeHandle) Parameters Type Name Description SafeFileHandle volumeHandle An instance to a SafeFileHandle handle. | Improve this Doc View Source VolumeInfo(SafeFileHandle, Boolean, Boolean) Initializes a VolumeInfo instance. Declaration [SecurityCritical] public VolumeInfo(SafeFileHandle volumeHandle, bool refresh, bool continueOnException) Parameters Type Name Description SafeFileHandle volumeHandle An instance to a SafeFileHandle handle. Boolean refresh Refreshes the state of the object. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. | Improve this Doc View Source VolumeInfo(String) Initializes a VolumeInfo instance. Declaration [SecurityCritical] public VolumeInfo(string volumeName) Parameters Type Name Description String volumeName A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\server\\share. Exceptions Type Condition ArgumentNullException ArgumentException | Improve this Doc View Source VolumeInfo(String, Boolean, Boolean) Initializes a VolumeInfo instance. Declaration [SecurityCritical] public VolumeInfo(string driveName, bool refresh, bool continueOnException) Parameters Type Name Description String driveName A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \"\\server\\share\". Boolean refresh Refreshes the state of the object. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Properties | Improve this Doc View Source CasePreservedNames The specified volume supports preserved case of file names when it places a name on disk. Declaration public bool CasePreservedNames { get; } Property Value Type Description Boolean | Improve this Doc View Source CaseSensitiveSearch The specified volume supports case-sensitive file names. Declaration public bool CaseSensitiveSearch { get; } Property Value Type Description Boolean | Improve this Doc View Source Compression The specified volume supports file-based compression. Declaration public bool Compression { get; } Property Value Type Description Boolean | Improve this Doc View Source DirectAccess The specified volume is a direct access (DAX) volume. Declaration public bool DirectAccess { get; } Property Value Type Description Boolean | Improve this Doc View Source FileSystemName Gets the name of the file system, for example, the FAT file system or the NTFS file system. Declaration public string FileSystemName { get; } Property Value Type Description String The name of the file system. | Improve this Doc View Source FullPath The full path to the volume. Declaration public string FullPath { get; } Property Value Type Description String | Improve this Doc View Source Guid The volume GUID. Declaration public string Guid { get; } Property Value Type Description String | Improve this Doc View Source MaximumComponentLength Gets the maximum length of a file name component that the file system supports. Declaration public int MaximumComponentLength { get; set; } Property Value Type Description Int32 The maximum length of a file name component that the file system supports. | Improve this Doc View Source Name Gets the label of the volume. Declaration public string Name { get; } Property Value Type Description String The label of the volume. Remarks This property is the label assigned to the volume, such \"MyDrive\" | Improve this Doc View Source NamedStreams The specified volume supports named streams. Declaration public bool NamedStreams { get; } Property Value Type Description Boolean | Improve this Doc View Source PersistentAcls The specified volume preserves and enforces access control lists (ACL). Declaration public bool PersistentAcls { get; } Property Value Type Description Boolean | Improve this Doc View Source ReadOnlyVolume The specified volume is read-only. Declaration public bool ReadOnlyVolume { get; } Property Value Type Description Boolean | Improve this Doc View Source SequentialWriteOnce The specified volume supports a single sequential write. Declaration public bool SequentialWriteOnce { get; } Property Value Type Description Boolean | Improve this Doc View Source SerialNumber Gets the volume serial number that the operating system assigns when a hard disk is formatted. Declaration public long SerialNumber { get; } Property Value Type Description Int64 The volume serial number that the operating system assigns when a hard disk is formatted. | Improve this Doc View Source SupportsEncryption The specified volume supports the Encrypted File System (EFS). Declaration public bool SupportsEncryption { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsExtendedAttributes The specified volume supports extended attributes. Declaration public bool SupportsExtendedAttributes { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsHardLinks The specified volume supports hard links. Declaration public bool SupportsHardLinks { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsObjectIds The specified volume supports object identifiers. Declaration public bool SupportsObjectIds { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsOpenByFileId The file system supports open by FileID. Declaration public bool SupportsOpenByFileId { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsRemoteStorage The specified volume supports remote storage. (This property does not appear on MSDN) Declaration public bool SupportsRemoteStorage { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsReparsePoints The specified volume supports re-parse points. Declaration public bool SupportsReparsePoints { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsSparseFiles The specified volume supports sparse files. Declaration public bool SupportsSparseFiles { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsTransactions The specified volume supports transactions. Declaration public bool SupportsTransactions { get; } Property Value Type Description Boolean | Improve this Doc View Source SupportsUsnJournal The specified volume supports update sequence number (USN) journals. Declaration public bool SupportsUsnJournal { get; } Property Value Type Description Boolean | Improve this Doc View Source UnicodeOnDisk The specified volume supports Unicode in file names as they appear on disk. Declaration public bool UnicodeOnDisk { get; } Property Value Type Description Boolean | Improve this Doc View Source VolumeIsCompressed The specified volume is a compressed volume, for example, a DoubleSpace volume. Declaration public bool VolumeIsCompressed { get; } Property Value Type Description Boolean | Improve this Doc View Source VolumeQuotas The specified volume supports disk quotas. Declaration public bool VolumeQuotas { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source Refresh() Refreshes the state of the object. Declaration public void Refresh() | Improve this Doc View Source ToString() Returns the full path of the volume. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString()"
  },
  "api/Alphaleonis.Win32.Filesystem.Volume.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Volume.html",
    "title": "Class Volume | AlphaFS",
    "keywords": "Class Volume [AlphaFS] Static class providing utility methods for working with Microsoft Windows devices and volumes. Inheritance Object Volume Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public static class Volume Methods | Improve this Doc View Source DefineDosDevice(String, String) [AlphaFS] Defines, redefines, or deletes MS-DOS device names. Declaration [SecurityCritical] public static void DefineDosDevice(string deviceName, string targetPath) Parameters Type Name Description String deviceName An MS-DOS device name string specifying the device the function is defining, redefining, or deleting. String targetPath An MS-DOS path that will implement this device. | Improve this Doc View Source DefineDosDevice(String, String, DosDeviceAttributes) [AlphaFS] Defines, redefines, or deletes MS-DOS device names. Declaration [SecurityCritical] public static void DefineDosDevice(string deviceName, string targetPath, DosDeviceAttributes deviceAttributes) Parameters Type Name Description String deviceName An MS-DOS device name string specifying the device the function is defining, redefining, or deleting. String targetPath An MS-DOS path that will implement this device. If deviceAttributes parameter has the RawTargetPath flag specified, targetPath is used as-is. DosDeviceAttributes deviceAttributes The controllable aspects of the DefineDosDevice function, DosDeviceAttributes flags which will be combined with the default. | Improve this Doc View Source DeleteCurrentVolumeLabel() [AlphaFS] Deletes the label of the file system volume that is the root of the current directory. Declaration [SecurityCritical] public static void DeleteCurrentVolumeLabel() | Improve this Doc View Source DeleteDosDevice(String) [AlphaFS] Deletes an MS-DOS device name. Declaration [SecurityCritical] public static void DeleteDosDevice(string deviceName) Parameters Type Name Description String deviceName An MS-DOS device name specifying the device to delete. | Improve this Doc View Source DeleteDosDevice(String, String) [AlphaFS] Deletes an MS-DOS device name. Declaration [SecurityCritical] public static void DeleteDosDevice(string deviceName, string targetPath) Parameters Type Name Description String deviceName An MS-DOS device name string specifying the device to delete. String targetPath A pointer to a path string that will implement this device. The string is an MS-DOS path string unless the RawTargetPath flag is specified, in which case this string is a path string. | Improve this Doc View Source DeleteDosDevice(String, String, DosDeviceAttributes, Boolean) [AlphaFS] Deletes an MS-DOS device name. Declaration [SecurityCritical] public static void DeleteDosDevice(string deviceName, string targetPath, DosDeviceAttributes deviceAttributes, bool exactMatch) Parameters Type Name Description String deviceName An MS-DOS device name string specifying the device to delete. String targetPath A pointer to a path string that will implement this device. The string is an MS-DOS path string unless the RawTargetPath flag is specified, in which case this string is a path string. DosDeviceAttributes deviceAttributes The controllable aspects of the DefineDosDevice function DosDeviceAttributes flags which will be combined with the default. Boolean exactMatch Only delete MS-DOS device on an exact name match. If exactMatch is true , targetPath must be the same path used to create the mapping. | Improve this Doc View Source DeleteDosDevice(String, String, Boolean) [AlphaFS] Deletes an MS-DOS device name. Declaration [SecurityCritical] public static void DeleteDosDevice(string deviceName, string targetPath, bool exactMatch) Parameters Type Name Description String deviceName An MS-DOS device name string specifying the device to delete. String targetPath A pointer to a path string that will implement this device. The string is an MS-DOS path string unless the RawTargetPath flag is specified, in which case this string is a path string. Boolean exactMatch Only delete MS-DOS device on an exact name match. If exactMatch is true , targetPath must be the same path used to create the mapping. | Improve this Doc View Source DeleteVolumeLabel(String) [AlphaFS] Deletes the label of a file system volume. Declaration [SecurityCritical] public static void DeleteVolumeLabel(string rootPathName) Parameters Type Name Description String rootPathName The root directory of a file system volume. This is the volume the function will remove the label. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source DeleteVolumeMountPoint(String) [AlphaFS] Deletes a Drive letter or mounted folder. Declaration [SecurityCritical] public static void DeleteVolumeMountPoint(string volumeMountPoint) Parameters Type Name Description String volumeMountPoint The Drive letter or mounted folder to be deleted. For example, X:\\ or Y:\\MountX. Remarks Deleting a mounted folder does not cause the underlying directory to be deleted. | Improve this Doc View Source EnumerateVolumeMountPoints(String) [AlphaFS] Returns an enumerable collection of String of all mounted folders (volume mount points) on the specified volume. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateVolumeMountPoints(string volumeGuid) Parameters Type Name Description String volumeGuid A String containing the volume Guid . Returns Type Description IEnumerable < String > An enumerable collection of String of all volume mount points on the specified volume. Exceptions Type Condition ArgumentNullException ArgumentException | Improve this Doc View Source EnumerateVolumePathNames(String) [AlphaFS] Returns an enumerable collection of String drive letters and mounted folder paths for the specified volume. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateVolumePathNames(string volumeGuid) Parameters Type Name Description String volumeGuid A volume Guid path: \\?\\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}. Returns Type Description IEnumerable < String > An enumerable collection of String containing the path names for the specified volume. Exceptions Type Condition ArgumentNullException ArgumentException | Improve this Doc View Source EnumerateVolumes() [AlphaFS] Returns an enumerable collection of String volumes on the computer. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateVolumes() Returns Type Description IEnumerable < String > An enumerable collection of String volume names on the computer. | Improve this Doc View Source GetCurrentDriveType() [AlphaFS] Determines the disk DriveType , based on the root of the current directory. Declaration [SecurityCritical] public static DriveType GetCurrentDriveType() Returns Type Description DriveType A DriveType enum value. | Improve this Doc View Source GetDiskFreeSpace(String) [AlphaFS] Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread. Declaration [SecurityCritical] public static DiskSpaceInfo GetDiskFreeSpace(string drivePath) Parameters Type Name Description String drivePath A path to a drive. For example: \"C:&quot;, \"\\server\\share\", or \"\\?\\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}&quot;. Returns Type Description DiskSpaceInfo A class instance. Remarks The calling application must have FILE_LIST_DIRECTORY access rights for this directory. | Improve this Doc View Source GetDiskFreeSpace(String, Nullable<Boolean>) [AlphaFS] Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread. Declaration [SecurityCritical] public static DiskSpaceInfo GetDiskFreeSpace(string drivePath, bool? spaceInfoType) Parameters Type Name Description String drivePath A path to a drive. For example: \"C:&quot;, \"\\server\\share\", or \"\\?\\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}&quot;. Nullable < Boolean > spaceInfoType null gets both size- and disk cluster information. true Get only disk cluster information, false Get only size information. Returns Type Description DiskSpaceInfo A class instance. Remarks The calling application must have FILE_LIST_DIRECTORY access rights for this directory. | Improve this Doc View Source GetDriveFormat(String) [AlphaFS] Gets the name of the file system, such as NTFS or FAT32. Declaration [SecurityCritical] public static string GetDriveFormat(string drivePath) Parameters Type Name Description String drivePath A path to a drive. For example: \"C:&quot;, \"\\server\\share\", or \"\\?\\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}&quot;. Returns Type Description String The name of the file system on the specified drive or null on failure or if not available. Remarks Use DriveFormat to determine what formatting a drive uses. | Improve this Doc View Source GetDriveNameForNtDeviceName(String) [AlphaFS] Gets the drive letter from an MS-DOS device name. For example: \"\\Device\\HarddiskVolume2\" returns \"C:&quot;. Declaration public static string GetDriveNameForNtDeviceName(string deviceName) Parameters Type Name Description String deviceName An MS-DOS device name. Returns Type Description String The drive letter from an MS-DOS device name. | Improve this Doc View Source GetDriveType(String) [AlphaFS] Determines the disk DriveType . Declaration [SecurityCritical] public static DriveType GetDriveType(string drivePath) Parameters Type Name Description String drivePath A path to a drive. For example: \"C:&quot;, \"\\server\\share\", or \"\\?\\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}&quot; Returns Type Description DriveType A DriveType enum value. | Improve this Doc View Source GetUniqueVolumeNameForPath(String) [AlphaFS] Get the unique volume name for the given path. Declaration [SecurityCritical] public static string GetUniqueVolumeNameForPath(string volumePathName) Parameters Type Name Description String volumePathName A path string. Both absolute and relative file and directory names, for example \"..\", is acceptable in this path. If you specify a relative file or directory name without a volume qualifier, GetUniqueVolumeNameForPath returns the Drive letter of the current volume. Returns Type Description String Returns the unique volume name in the form: \"\\\\?\\Volume{GUID}\\\", or null on error or if unavailable. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source GetVolumeDeviceName(String) [AlphaFS] Retrieves the Win32 Device name from the Volume name. Declaration [SecurityCritical] public static string GetVolumeDeviceName(string volumeName) Parameters Type Name Description String volumeName Name of the Volume. Returns Type Description String The Win32 Device name from the Volume name, for example: \"\\Device\\HarddiskVolume2\", or null on error or if unavailable. Remarks This is the same method as QueryDosDevice(String) . Exceptions Type Condition ArgumentNullException FileNotFoundException | Improve this Doc View Source GetVolumeDisplayName(String) [AlphaFS] Gets the shortest display name for the specified volumeName . Declaration [SecurityCritical] public static string GetVolumeDisplayName(string volumeName) Parameters Type Name Description String volumeName A volume Guid path: \\?\\Volume{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}. Returns Type Description String The shortest display name for the specified volume found, or null if no display names were found. Remarks This method basically returns the shortest string returned by EnumerateVolumePathNames(String) | Improve this Doc View Source GetVolumeGuid(String) [AlphaFS] Retrieves a volume Guid path for the volume that is associated with the specified volume mount point (drive letter, volume GUID path, or mounted folder). Declaration [SecurityCritical] public static string GetVolumeGuid(string volumeMountPoint) Parameters Type Name Description String volumeMountPoint The path of a mounted folder (for example, \"Y:\\MountX&quot;) or a drive letter (for example, \"X:&quot;). Returns Type Description String The unique volume name of the form: \"\\?\\Volume{GUID}&quot;. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source GetVolumeGuidForNtDeviceName(String) [AlphaFS] Tranlates DosDevicePath to a Volume GUID. For example: \"\\Device\\HarddiskVolumeX\\path\\filename.ext\" can translate to: \"\\path filename.ext\" or: \"\\?\\Volume{GUID}\\path\\filename.ext\". Declaration public static string GetVolumeGuidForNtDeviceName(string dosDevice) Parameters Type Name Description String dosDevice A DosDevicePath, for example: \\Device\\HarddiskVolumeX\\path\\filename.ext. Returns Type Description String A translated dos path. | Improve this Doc View Source GetVolumeInfo(SafeFileHandle) [AlphaFS] Retrieves information about the file system and volume associated with the specified root file or directorystream. Declaration [SecurityCritical] public static VolumeInfo GetVolumeInfo(SafeFileHandle volumeHandle) Parameters Type Name Description SafeFileHandle volumeHandle An instance to a SafeFileHandle handle. Returns Type Description VolumeInfo A VolumeInfo instance describing the volume associatied with the specified root directory. | Improve this Doc View Source GetVolumeInfo(String) [AlphaFS] Retrieves information about the file system and volume associated with the specified root file or directorystream. Declaration [SecurityCritical] public static VolumeInfo GetVolumeInfo(string volumePath) Parameters Type Name Description String volumePath A path that contains the root directory. Returns Type Description VolumeInfo A VolumeInfo instance describing the volume associatied with the specified root directory. | Improve this Doc View Source GetVolumeLabel(String) [AlphaFS] Retrieve the label of a file system volume. Declaration [SecurityCritical] public static string GetVolumeLabel(string volumePath) Parameters Type Name Description String volumePath A path to a volume. For example: \"C:&quot;, \"\\server\\share\", or \"\\?\\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}&quot;. Returns Type Description String The the label of the file system volume. This function can return string.Empty since a volume label is generally not mandatory. | Improve this Doc View Source GetVolumePathName(String) [AlphaFS] Retrieves the volume mount point where the specified path is mounted. Declaration [SecurityCritical] public static string GetVolumePathName(string path) Parameters Type Name Description String path The path to the volume, for example: \"C:\\Windows\". Returns Type Description String Returns the nearest volume root path for a given directory. The volume path name, for example: \"C:\\Windows\" returns: \"C:\\\". Exceptions Type Condition ArgumentNullException | Improve this Doc View Source IsReady(String) [AlphaFS] Gets a value indicating whether a drive is ready. Declaration [SecurityCritical] public static bool IsReady(string drivePath) Parameters Type Name Description String drivePath A path to a drive. For example: \"C:&quot;, \"\\server\\share\", or \"\\?\\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}&quot;. Returns Type Description Boolean true if drivePath is ready; otherwise, false . | Improve this Doc View Source IsSameVolume(String, String) [AlphaFS] Determines whether the volume of two file system objects is the same, by comparing their serial numbers. Declaration [SecurityCritical] public static bool IsSameVolume(string path1, string path2) Parameters Type Name Description String path1 The first filesystem object with full path information. String path2 The second file system object with full path information. Returns Type Description Boolean true if both filesytem objects reside on the same volume, false otherwise. | Improve this Doc View Source IsVolume(String) [AlphaFS] Determines whether the specified volume name is a defined volume on the current computer. Declaration [SecurityCritical] public static bool IsVolume(string volumeMountPoint) Parameters Type Name Description String volumeMountPoint A path to a volume. For example: \"C:&quot;, \"\\server\\share\", or \"\\?\\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}&quot;. Returns Type Description Boolean true on success, false otherwise. | Improve this Doc View Source QueryAllDosDevices() [AlphaFS] Retrieves a sorted list of all existing MS-DOS device names. Declaration [SecurityCritical] public static IEnumerable<string> QueryAllDosDevices() Returns Type Description IEnumerable < String > An IEnumerable<T> sorted list of all existing MS-DOS device names. | Improve this Doc View Source QueryDosDevice(String) [AlphaFS] Retrieves the current mapping for a particular MS-DOS device name. Declaration [SecurityCritical] public static string QueryDosDevice(string deviceName) Parameters Type Name Description String deviceName An MS-DOS device name string specifying the target of the query, such as: \"C:\", \"D:\" or \"\\?\\Volume{GUID}\". Returns Type Description String The current mapping for a particular MS-DOS device name. Exceptions Type Condition ArgumentNullException FileNotFoundException | Improve this Doc View Source SetCurrentVolumeLabel(String) [AlphaFS] Sets the label of the file system volume that is the root of the current directory. Declaration [SecurityCritical] public static void SetCurrentVolumeLabel(string volumeName) Parameters Type Name Description String volumeName A name for the volume. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source SetVolumeLabel(String, String) [AlphaFS] Sets the label of a file system volume. Declaration [SecurityCritical] public static void SetVolumeLabel(string volumePath, string volumeName) Parameters Type Name Description String volumePath A path to a volume. For example: \"C:\\\", \"\\\\server\\share\", or \"\\\\?\\Volume{c0580d5e-2ad6-11dc-9924-806e6f6e6963}\\\" If this parameter is null , the function uses the current drive. String volumeName A name for the volume. If this parameter is null , the function deletes any existing label from the specified volume and does not assign a new label. | Improve this Doc View Source SetVolumeMountPoint(String, String) [AlphaFS] Associates a volume with a Drive letter or a directory on another volume. Declaration [SecurityCritical] public static void SetVolumeMountPoint(string volumeMountPoint, string volumeGuid) Parameters Type Name Description String volumeMountPoint The user-mode path to be associated with the volume. This may be a Drive letter (for example, \"X:&quot;) or a directory on another volume (for example, \"Y:\\MountX&quot;). String volumeGuid A String containing the volume Guid . Exceptions Type Condition ArgumentException ArgumentNullException"
  },
  "api/Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.UnsupportedRemoteTransactionException.html",
    "title": "Class UnsupportedRemoteTransactionException | AlphaFS",
    "keywords": "Class UnsupportedRemoteTransactionException [AlphaFS] The remote server or share does not support transacted file operations. Inheritance Object Exception SystemException TransactionException UnsupportedRemoteTransactionException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class UnsupportedRemoteTransactionException : TransactionException, ISerializable, _Exception Constructors | Improve this Doc View Source UnsupportedRemoteTransactionException() [AlphaFS] Initializes a new instance of the UnsupportedRemoteTransactionException class. Declaration public UnsupportedRemoteTransactionException() | Improve this Doc View Source UnsupportedRemoteTransactionException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the UnsupportedRemoteTransactionException class. Declaration protected UnsupportedRemoteTransactionException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The object that holds the serialized object data. StreamingContext context The contextual information about the source or destination. | Improve this Doc View Source UnsupportedRemoteTransactionException(String) [AlphaFS] Initializes a new instance of the UnsupportedRemoteTransactionException class. Declaration public UnsupportedRemoteTransactionException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source UnsupportedRemoteTransactionException(String, Exception) [AlphaFS] Initializes a new instance of the UnsupportedRemoteTransactionException class. Declaration public UnsupportedRemoteTransactionException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.SymbolicLinkTargetInfo.html",
    "title": "Class SymbolicLinkTargetInfo | AlphaFS",
    "keywords": "Class SymbolicLinkTargetInfo Represents information about a symbolic link. Inheritance Object LinkTargetInfo SymbolicLinkTargetInfo Inherited Members LinkTargetInfo.PrintName LinkTargetInfo.SubstituteName Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public class SymbolicLinkTargetInfo : LinkTargetInfo Properties | Improve this Doc View Source LinkType Gets the type of the link. Declaration public SymbolicLinkType LinkType { get; } Property Value Type Description SymbolicLinkType The type of the link."
  },
  "api/Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.SymbolicLinkTarget.html",
    "title": "Enum SymbolicLinkTarget | AlphaFS",
    "keywords": "Enum SymbolicLinkTarget Indicates whether the link target is a file or directory. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum SymbolicLinkTarget Remarks Used by Win32 API CreateSymbolicLink()/CreateSymbolicLinkTransacted() Fields Name Description Directory The link target is a directory. File The link target is a file."
  },
  "api/Alphaleonis.Win32.Filesystem.StreamId.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.StreamId.html",
    "title": "Enum StreamId | AlphaFS",
    "keywords": "Enum StreamId The type of the data contained in the backup stream. This member can be one of the following values. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum StreamId Fields Name Description BackupAlternateData Alternative data streams. This corresponds to the NTFS $DATA stream type on a named data stream. BackupData Standard data. This corresponds to the NTFS $DATA stream type on the default (unnamed) data stream. BackupEaData Extended attribute data. This corresponds to the NTFS $EA stream type. BackupLink Hard link information. This corresponds to the NTFS $FILE_NAME stream type. BackupObjectId Objects identifiers. This corresponds to the NTFS $OBJECT_ID stream type. BackupPropertyData Property data. BackupReparseData Reparse points. This corresponds to the NTFS $REPARSE_POINT stream type. BackupSecurityData Security descriptor data. BackupSparseBlock Sparse file. This corresponds to the NTFS $DATA stream type for a sparse file. BackupTxfsData Transactional NTFS (TxF) data stream. None This indicates an error."
  },
  "api/Alphaleonis.Win32.Filesystem.StreamAttribute.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.StreamAttribute.html",
    "title": "Enum StreamAttribute | AlphaFS",
    "keywords": "Enum StreamAttribute Attributes of data to facilitate cross-operating system transfer. This member can be one or more of the following values. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum StreamAttribute Fields Name Description ContainsProperties Reserved. ContainsSecurity The backup stream contains security information. This attribute applies only to backup stream of type BackupSecurityData . ModifiedWhenRead Attribute set if the stream contains data that is modified when read. Allows the backup application to know that verification of data will fail. None This backup stream has no special attributes. SparseAttribute The backup stream is part of a sparse file stream. This attribute applies only to backup stream of type BackupData , BackupAlternateData , and BackupSparseBlock ."
  },
  "api/Alphaleonis.Win32.Filesystem.Shell32.AssociationString.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Shell32.AssociationString.html",
    "title": "Enum Shell32.AssociationString | AlphaFS",
    "keywords": "Enum Shell32.AssociationString ASSOCSTR enumeration - Used by the AssocQueryString() function to define the type of string that is to be returned. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum AssociationString Fields Name Description Command A command string associated with a Shell verb. ContentType Describes a general type of MIME file association, such as image and bmp, so that applications can make general assumptions about a specific file type. DdeApplication The application name in a DDE broadcast. DdeCommand A template for DDE commands. DdeIfExec The DDE command to use to create a process. DdeTopic The topic name in a DDE broadcast. DefaultIcon Returns the path to the icon resources to use by default for this association. Positive numbers indicate an index into the dll's resource table, while negative numbers indicate a resource ID. An example of the syntax for the resource is \"c:\\myfolder\\myfile.dll,-1\". DelegateExecute For a verb invoked through COM and the IExecuteCommand interface, you can use this flag to retrieve the IExecuteCommand object's CLSID. This CLSID is registered in the verb's command subkey as the DelegateExecute entry. The verb is specified in the supplied file parameter in the call to IQueryAssociations::GetString. DropTarget For a verb invoked through COM and the IDropTarget interface, you can use this flag to retrieve the IDropTarget object's CLSID. This CLSID is registered in the DropTarget subkey. The verb is specified in the supplied file parameter in the call to IQueryAssociations::GetString. Executable An executable from a Shell verb command string. For example, this string is found as the (Default) value for a subkey such as HKEY_CLASSES_ROOT\\ApplicationName\\shell\\Open\\command. If the command uses Rundll.exe, set the RemapRunDll flag in the attributes parameter of IQueryAssociations::GetString to retrieve the target executable. FriendlyAppName The friendly name of an executable file. FriendlyDocName The friendly name of a document type. InfoTip Corresponds to the InfoTip registry value. Returns an info tip for an item, or list of properties in the form of an IPropertyDescriptionList from which to create an info tip, such as when hovering the cursor over a file name. The list of properties can be parsed with PSGetPropertyDescriptionListFromString. Max The maximum defined Shell32.AssociationString value, used for validation purposes. None None. NoOpen Ignore the information associated with the open subkey. QuickTip Corresponds to the QuickTip registry value. This is the same as InfoTip , except that it always returns a list of property names in the form of an IPropertyDescriptionList. The difference between this value and InfoTip is that this returns properties that are safe for any scenario that causes slow property retrieval, such as offline or slow networks. Some of the properties returned from InfoTip might not be appropriate for slow property retrieval scenarios. The list of properties can be parsed with PSGetPropertyDescriptionListFromString. ShellExtension For an object that has a Shell extension associated with it, you can use this to retrieve the CLSID of that Shell extension object by passing a string representation of the IID of the interface you want to retrieve as the pwszExtra parameter of IQueryAssociations::GetString. For example, if you want to retrieve a handler that implements the IExtractImage interface, you would specify \"{BB2E617C-0920-11d1-9A0B-00C04FC2D6C1}\", which is the IID of IExtractImage. ShellNewValue Look under the ShellNew subkey. SupportedUriProtocols (No description available on MSDN) TileInfo Corresponds to the TileInfo registry value. Contains a list of properties to be displayed for a particular file type in a Windows Explorer window that is in tile view. This is the same as InfoTip , but, like QuickTip , it also returns a list of property names in the form of an IPropertyDescriptionList. The list of properties can be parsed with PSGetPropertyDescriptionListFromString."
  },
  "api/Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Shell32.AssociationAttributes.html",
    "title": "Enum Shell32.AssociationAttributes | AlphaFS",
    "keywords": "Enum Shell32.AssociationAttributes Provides information for the IQueryAssociations interface methods, used by Shell32. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum AssociationAttributes Fields Name Description IgnoreBaseClass Specifies that the BaseClass value should be ignored. InitByExeName Identifies the value of the supplied file parameter (3rd parameter of function GetFileAssociation()) as an executable file name. InitDefaultToFolder Specifies that when an IQueryAssociation method does not find the requested value under the root key, it should attempt to retrieve the comparable value from the Folder subkey. InitDefaultToStar Specifies that when an IQueryAssociation method does not find the requested value under the root key, it should attempt to retrieve the comparable value from the * subkey. InitFixedProgId Specifies that the supplied ProgID should be mapped using the system defaults, rather than the current user defaults. InitIgnoreUnknown Specifies that the \"Unknown\" ProgID should be ignored; instead, fail. InitNoRemapClsid Instructs not to map CLSID values to ProgID values. IsProtocol Specifies that the value is a protocol, and should be mapped using the current user defaults. NoFixUps Instructs IQueryAssociations methods not to fix errors in the registry, such as the friendly name of a function not matching the one found in the .exe file. None None. NoTruncate Specifies that the return string should not be truncated. Instead, return an error value and the required size for the complete string. NoUserSettings Specifies that only HKEY_CLASSES_ROOT should be searched, and that HKEY_CURRENT_USER should be ignored. RemapRunDll Instructs IQueryAssociations methods to ignore Rundll.exe and return information about its target. Typically IQueryAssociations methods return information about the first .exe or .dll in a command string. If a command uses Rundll.exe, setting this flag tells the method to ignore Rundll.exe and return information about its target. Verify Instructs IQueryAssociations methods to verify that data is accurate. This setting allows IQueryAssociations methods to read data from the user's hard disk for verification. For example, they can check the friendly name in the registry against the one stored in the .exe file."
  },
  "api/Alphaleonis.Win32.Filesystem.File.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.File.html",
    "title": "Class File | AlphaFS",
    "keywords": "Class File Provides static methods for the creation, copying, deletion, moving, and opening of a single file, and aids in the creation of FileStream objects. Inheritance Object File Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public static class File Methods | Improve this Doc View Source AppendAllLines(String, IEnumerable<String>) Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file. Declaration [SecurityCritical] public static void AppendAllLines(string path, IEnumerable<string> contents) Parameters Type Name Description String path The file to append the lines to. The file is created if it doesn't already exist. IEnumerable < String > contents The lines to append to the file. Remarks The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllLines(String, IEnumerable<String>, PathFormat) [AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file. Declaration [SecurityCritical] public static void AppendAllLines(string path, IEnumerable<string> contents, PathFormat pathFormat) Parameters Type Name Description String path The file to append the lines to. The file is created if it doesn't already exist. IEnumerable < String > contents The lines to append to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllLines(String, IEnumerable<String>, Encoding) Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file. Declaration [SecurityCritical] public static void AppendAllLines(string path, IEnumerable<string> contents, Encoding encoding) Parameters Type Name Description String path The file to append the lines to. The file is created if it doesn't already exist. IEnumerable < String > contents The lines to append to the file. Encoding encoding The character Encoding to use. Remarks The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllLines(String, IEnumerable<String>, Encoding, PathFormat) [AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file. Declaration [SecurityCritical] public static void AppendAllLines(string path, IEnumerable<string> contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to append the lines to. The file is created if it doesn't already exist. IEnumerable < String > contents The lines to append to the file. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllLinesTransacted(KernelTransaction, String, IEnumerable<String>) [AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file. Declaration [SecurityCritical] public static void AppendAllLinesTransacted(KernelTransaction transaction, string path, IEnumerable<string> contents) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to append the lines to. The file is created if it doesn't already exist. IEnumerable < String > contents The lines to append to the file. Remarks The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllLinesTransacted(KernelTransaction, String, IEnumerable<String>, PathFormat) [AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file. Declaration [SecurityCritical] public static void AppendAllLinesTransacted(KernelTransaction transaction, string path, IEnumerable<string> contents, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to append the lines to. The file is created if it doesn't already exist. IEnumerable < String > contents The lines to append to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllLinesTransacted(KernelTransaction, String, IEnumerable<String>, Encoding) [AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file. Declaration [SecurityCritical] public static void AppendAllLinesTransacted(KernelTransaction transaction, string path, IEnumerable<string> contents, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to append the lines to. The file is created if it doesn't already exist. IEnumerable < String > contents The lines to append to the file. Encoding encoding The character Encoding to use. Remarks The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllLinesTransacted(KernelTransaction, String, IEnumerable<String>, Encoding, PathFormat) [AlphaFS] Appends lines to a file, and then closes the file. If the specified file does not exist, this method creates a file, writes the specified lines to the file, and then closes the file. Declaration [SecurityCritical] public static void AppendAllLinesTransacted(KernelTransaction transaction, string path, IEnumerable<string> contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to append the lines to. The file is created if it doesn't already exist. IEnumerable < String > contents The lines to append to the file. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The method creates the file if it doesn't exist, but it doesn't create new directories. Therefore, the value of the path parameter must contain existing directories. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllText(String, String) Appends the specified string to the file, creating the file if it does not already exist. Declaration [SecurityCritical] public static void AppendAllText(string path, string contents) Parameters Type Name Description String path The file to append the specified string to. String contents The string to append to the file. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllText(String, String, PathFormat) [AlphaFS] Appends the specified string to the file, creating the file if it does not already exist. Declaration [SecurityCritical] public static void AppendAllText(string path, string contents, PathFormat pathFormat) Parameters Type Name Description String path The file to append the specified string to. String contents The string to append to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllText(String, String, Encoding) Appends the specified string to the file, creating the file if it does not already exist. Declaration [SecurityCritical] public static void AppendAllText(string path, string contents, Encoding encoding) Parameters Type Name Description String path The file to append the specified string to. String contents The string to append to the file. Encoding encoding The character Encoding to use. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllText(String, String, Encoding, PathFormat) [AlphaFS] Appends the specified string to the file, creating the file if it does not already exist. Declaration [SecurityCritical] public static void AppendAllText(string path, string contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to append the specified string to. String contents The string to append to the file. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllTextTransacted(KernelTransaction, String, String) [AlphaFS] Appends the specified string to the file, creating the file if it does not already exist. Declaration [SecurityCritical] public static void AppendAllTextTransacted(KernelTransaction transaction, string path, string contents) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to append the specified string to. String contents The string to append to the file. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllTextTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Appends the specified string to the file, creating the file if it does not already exist. Declaration [SecurityCritical] public static void AppendAllTextTransacted(KernelTransaction transaction, string path, string contents, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to append the specified string to. String contents The string to append to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllTextTransacted(KernelTransaction, String, String, Encoding) [AlphaFS] Appends the specified string to the file, creating the file if it does not already exist. Declaration [SecurityCritical] public static void AppendAllTextTransacted(KernelTransaction transaction, string path, string contents, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to append the specified string to. String contents The string to append to the file. Encoding encoding The character Encoding to use. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendAllTextTransacted(KernelTransaction, String, String, Encoding, PathFormat) [AlphaFS] Appends the specified string to the file, creating the file if it does not already exist. Declaration [SecurityCritical] public static void AppendAllTextTransacted(KernelTransaction transaction, string path, string contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to append the specified string to. String contents The string to append to the file. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source AppendText(String) Creates a StreamWriter that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist. Declaration [SecurityCritical] public static StreamWriter AppendText(string path) Parameters Type Name Description String path The path to the file to append to. Returns Type Description StreamWriter A stream writer that appends UTF-8 encoded text to the specified file or to a new file. Exceptions Type Condition ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars. ArgumentNullException path is null. DirectoryNotFoundException The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). NotSupportedException path is in an invalid format. UnauthorizedAccessException The caller does not have the required permission. | Improve this Doc View Source AppendText(String, PathFormat) [AlphaFS] Creates a StreamWriter that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist. Declaration [SecurityCritical] public static StreamWriter AppendText(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the file to append to. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamWriter A stream writer that appends UTF-8 encoded text to the specified file or to a new file. Exceptions Type Condition ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars. ArgumentNullException path is null. DirectoryNotFoundException The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). NotSupportedException path is in an invalid format. UnauthorizedAccessException The caller does not have the required permission. | Improve this Doc View Source AppendText(String, Encoding) [AlphaFS] Creates a StreamWriter that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist. Declaration [SecurityCritical] public static StreamWriter AppendText(string path, Encoding encoding) Parameters Type Name Description String path The path to the file to append to. Encoding encoding The character Encoding to use. Returns Type Description StreamWriter A stream writer that appends UTF-8 encoded text to the specified file or to a new file. Exceptions Type Condition ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars. ArgumentNullException path is null. DirectoryNotFoundException The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). NotSupportedException path is in an invalid format. UnauthorizedAccessException The caller does not have the required permission. | Improve this Doc View Source AppendText(String, Encoding, PathFormat) [AlphaFS] Creates a StreamWriter that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist. Declaration [SecurityCritical] public static StreamWriter AppendText(string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The path to the file to append to. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamWriter A stream writer that appends UTF-8 encoded text to the specified file or to a new file. Exceptions Type Condition ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars. ArgumentNullException path is null. DirectoryNotFoundException The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). NotSupportedException path is in an invalid format. UnauthorizedAccessException The caller does not have the required permission. | Improve this Doc View Source AppendTextTransacted(KernelTransaction, String) [AlphaFS] Creates a StreamWriter that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist. Declaration [SecurityCritical] public static StreamWriter AppendTextTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file to append to. Returns Type Description StreamWriter A stream writer that appends UTF-8 encoded text to the specified file or to a new file. Exceptions Type Condition ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars. ArgumentNullException path is null. DirectoryNotFoundException The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). NotSupportedException path is in an invalid format. UnauthorizedAccessException The caller does not have the required permission. | Improve this Doc View Source AppendTextTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Creates a StreamWriter that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist. Declaration [SecurityCritical] public static StreamWriter AppendTextTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file to append to. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamWriter A stream writer that appends UTF-8 encoded text to the specified file or to a new file. Exceptions Type Condition ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars. ArgumentNullException path is null. DirectoryNotFoundException The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). NotSupportedException path is in an invalid format. UnauthorizedAccessException The caller does not have the required permission. | Improve this Doc View Source AppendTextTransacted(KernelTransaction, String, Encoding) [AlphaFS] Creates a StreamWriter that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist. Declaration [SecurityCritical] public static StreamWriter AppendTextTransacted(KernelTransaction transaction, string path, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file to append to. Encoding encoding The character Encoding to use. Returns Type Description StreamWriter A stream writer that appends UTF-8 encoded text to the specified file or to a new file. Exceptions Type Condition ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars. ArgumentNullException path is null. DirectoryNotFoundException The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). NotSupportedException path is in an invalid format. UnauthorizedAccessException The caller does not have the required permission. | Improve this Doc View Source AppendTextTransacted(KernelTransaction, String, Encoding, PathFormat) [AlphaFS] Creates a StreamWriter that appends UTF-8 encoded text to an existing file, or to a new file if the specified file does not exist. Declaration [SecurityCritical] public static StreamWriter AppendTextTransacted(KernelTransaction transaction, string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file to append to. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamWriter A stream writer that appends UTF-8 encoded text to the specified file or to a new file. Exceptions Type Condition ArgumentException path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by InvalidPathChars. ArgumentNullException path is null. DirectoryNotFoundException The specified path is invalid (for example, the directory doesn’t exist or it is on an unmapped drive). NotSupportedException path is in an invalid format. UnauthorizedAccessException The caller does not have the required permission. | Improve this Doc View Source Compress(String) [AlphaFS] Compresses a file using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path) Parameters Type Name Description String path A path that describes a file to compress. | Improve this Doc View Source Compress(String, PathFormat) [AlphaFS] Compresses a file using NTFS compression. Declaration [SecurityCritical] public static void Compress(string path, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a file to compress. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source CompressTransacted(KernelTransaction, String) [AlphaFS] Compresses a file using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a file to compress. | Improve this Doc View Source CompressTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Compresses a file using NTFS compression. Declaration [SecurityCritical] public static void CompressTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a file to compress. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source Copy(String, String) Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Declaration [SecurityCritical] public static void Copy(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory or an existing file. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved; otherwise, false . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Boolean, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved; otherwise, false . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Int32, Int32) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, int retry, int retryTimeout) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Int32, Int32, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Int32, Int32, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, CopyOptions, Int32, Int32, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, CopyOptions copyOptions, int retry, int retryTimeout, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean) Copies an existing file to a new file. Overwriting a file of the same name is allowed. Declaration [SecurityCritical] public static void Copy(string sourcePath, string destinationPath, bool overwrite) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Boolean overwrite true if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, false . Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Boolean overwrite true if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Boolean overwrite true if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Boolean, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, bool overwrite, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Boolean overwrite true if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, false . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Int32, Int32) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, int retry, int retryTimeout) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory or an existing file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Int32, Int32, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Int32, Int32, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Copy(String, String, Int32, Int32, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult Copy(string sourcePath, string destinationPath, int retry, int retryTimeout, PathFormat pathFormat) Parameters Type Name Description String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTimestamps(String, String) [AlphaFS] Copies the date and timestamps for the specified existing files. Declaration [SecurityCritical] public static void CopyTimestamps(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. Remarks This method does not change last access time for the source file. Exceptions Type Condition ArgumentException FileNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestamps(String, String, PathFormat) [AlphaFS] Copies the date and timestamps for the specified existing files. Declaration [SecurityCritical] public static void CopyTimestamps(string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method does not change last access time for the source file. Exceptions Type Condition ArgumentException FileNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestamps(String, String, Boolean) [AlphaFS] Copies the date and timestamps for the specified existing files. Declaration [SecurityCritical] public static void CopyTimestamps(string sourcePath, string destinationPath, bool modifyReparsePoint) Parameters Type Name Description String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file linked to. No effect if destinationPath does not refer to a reparse point. Remarks This method does not change last access time for the source file. Exceptions Type Condition ArgumentException FileNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestamps(String, String, Boolean, PathFormat) [AlphaFS] Copies the date and timestamps for the specified existing files. Declaration [SecurityCritical] public static void CopyTimestamps(string sourcePath, string destinationPath, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file linked to. No effect if destinationPath does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method does not change last access time for the source file. Exceptions Type Condition ArgumentException FileNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestampsTransacted(KernelTransaction, String, String) [AlphaFS] Copies the date and timestamps for the specified existing files. Declaration [SecurityCritical] public static void CopyTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. Remarks This method does not change last access time for the source file. Exceptions Type Condition ArgumentException FileNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestampsTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Copies the date and timestamps for the specified existing files. Declaration [SecurityCritical] public static void CopyTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method does not change last access time for the source file. Exceptions Type Condition ArgumentException FileNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestampsTransacted(KernelTransaction, String, String, Boolean) [AlphaFS] Copies the date and timestamps for the specified existing files. Declaration [SecurityCritical] public static void CopyTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file linked to. No effect if destinationPath does not refer to a reparse point. Remarks This method does not change last access time for the source file. Exceptions Type Condition ArgumentException FileNotFoundException NotSupportedException | Improve this Doc View Source CopyTimestampsTransacted(KernelTransaction, String, String, Boolean, PathFormat) [AlphaFS] Copies the date and timestamps for the specified existing files. Declaration [SecurityCritical] public static void CopyTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file linked to. No effect if destinationPath does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method does not change last access time for the source file. Exceptions Type Condition ArgumentException FileNotFoundException NotSupportedException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory or an existing file. Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved; otherwise, false . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved; otherwise, false . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Boolean, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, bool preserveDates, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved; otherwise, false . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Int32, Int32) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, int retry, int retryTimeout) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Int32, Int32, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Int32, Int32, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, CopyOptions, Int32, Int32, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. CopyOptions can be specified. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyOptions copyOptions, int retry, int retryTimeout, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. CopyOptions copyOptions CopyOptions that specify how the file is to be copied. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Boolean overwrite true if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, false . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Boolean, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is allowed. Declaration [Obsolete(\"To disable/enable overwrite, use other overload and use CopyOptions.None enum flag or remove CopyOptions.FailIfExists enum flag.\")] [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, bool overwrite, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Boolean overwrite true if the destination file should ignoring the read-only and hidden attributes and overwrite; otherwise, false . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Int32, Int32) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, int retry, int retryTimeout) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory or an existing file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Int32, Int32, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Int32, Int32, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTransacted(KernelTransaction, String, String, Int32, Int32, PathFormat) [AlphaFS] Copies an existing file to a new file. Overwriting a file of the same name is not allowed. Declaration [SecurityCritical] public static CopyMoveResult CopyTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, int retry, int retryTimeout, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The file to copy. String destinationPath The name of the destination file. This cannot be a directory. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult Returns a CopyMoveResult class with details of the Copy action. Remarks The attributes of the original file are retained in the copied file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Create(String) Creates or overwrites a file in the specified path. Declaration [SecurityCritical] public static FileStream Create(string path) Parameters Type Name Description String path The path and name of the file to create. Returns Type Description FileStream A FileStream that provides read/write access to the file specified in path . | Improve this Doc View Source Create(String, PathFormat) [AlphaFS] Creates or overwrites a file in the specified path. Declaration [SecurityCritical] public static FileStream Create(string path, PathFormat pathFormat) Parameters Type Name Description String path The path and name of the file to create. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream that provides read/write access to the file specified in path . | Improve this Doc View Source Create(String, Int32) Creates or overwrites the specified file. Declaration [SecurityCritical] public static FileStream Create(string path, int bufferSize) Parameters Type Name Description String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. Returns Type Description FileStream A FileStream with the specified buffer size that provides read/write access to the file specified in path . | Improve this Doc View Source Create(String, Int32, PathFormat) [AlphaFS] Creates or overwrites the specified file. Declaration [SecurityCritical] public static FileStream Create(string path, int bufferSize, PathFormat pathFormat) Parameters Type Name Description String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream with the specified buffer size that provides read/write access to the file specified in path . | Improve this Doc View Source Create(String, Int32, FileOptions) Creates or overwrites the specified file, specifying a buffer size and a FileOptions value that describes how to create or overwrite the file. Declaration [SecurityCritical] public static FileStream Create(string path, int bufferSize, FileOptions options) Parameters Type Name Description String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. FileOptions options One of the FileOptions values that describes how to create or overwrite the file. Returns Type Description FileStream A new file with the specified buffer size. | Improve this Doc View Source Create(String, Int32, FileOptions, PathFormat) [AlphaFS] Creates or overwrites the specified file, specifying a buffer size and a FileOptions value that describes how to create or overwrite the file. Declaration [SecurityCritical] public static FileStream Create(string path, int bufferSize, FileOptions options, PathFormat pathFormat) Parameters Type Name Description String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. FileOptions options One of the FileOptions values that describes how to create or overwrite the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A new file with the specified buffer size. | Improve this Doc View Source Create(String, Int32, FileOptions, FileSecurity) Creates or overwrites the specified file, specifying a buffer size and a FileOptions value that describes how to create or overwrite the file. Declaration [SecurityCritical] public static FileStream Create(string path, int bufferSize, FileOptions options, FileSecurity fileSecurity) Parameters Type Name Description String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. FileOptions options One of the FileOptions values that describes how to create or overwrite the file. FileSecurity fileSecurity One of the FileSecurity values that determines the access control and audit security for the file. Returns Type Description FileStream A new file with the specified buffer size, file options, and file security. | Improve this Doc View Source Create(String, Int32, FileOptions, FileSecurity, PathFormat) [AlphaFS] Creates or overwrites the specified file, specifying a buffer size and a FileOptions value that describes how to create or overwrite the file. Declaration [SecurityCritical] public static FileStream Create(string path, int bufferSize, FileOptions options, FileSecurity fileSecurity, PathFormat pathFormat) Parameters Type Name Description String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. FileOptions options One of the FileOptions values that describes how to create or overwrite the file. FileSecurity fileSecurity One of the FileSecurity values that determines the access control and audit security for the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A new file with the specified buffer size, file options, and file security. | Improve this Doc View Source CreateHardlink(String, String) [AlphaFS] Establishes a hard link (similar to CMD command: \"MKLINK /H\") between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories. Declaration [Obsolete(\"Use CreateHardLink method.\")] [SecurityCritical] public static void CreateHardlink(string fileName, string existingFileName) Parameters Type Name Description String fileName The name of the new file. This parameter cannot specify the name of a directory. String existingFileName The name of the existing file. This parameter cannot specify the name of a directory. Exceptions Type Condition NotSupportedException ArgumentException ArgumentNullException | Improve this Doc View Source CreateHardLink(String, String) [AlphaFS] Establishes a hard link (similar to CMD command: \"MKLINK /H\") between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories. Declaration [SecurityCritical] public static void CreateHardLink(string fileName, string existingFileName) Parameters Type Name Description String fileName The name of the new file. This parameter cannot specify the name of a directory. String existingFileName The name of the existing file. This parameter cannot specify the name of a directory. Exceptions Type Condition NotSupportedException ArgumentException ArgumentNullException | Improve this Doc View Source CreateHardlink(String, String, PathFormat) [AlphaFS] Establishes a hard link (similar to CMD command: \"MKLINK /H\") between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories. Declaration [Obsolete(\"Use CreateHardLink method.\")] [SecurityCritical] public static void CreateHardlink(string fileName, string existingFileName, PathFormat pathFormat) Parameters Type Name Description String fileName The name of the new file. This parameter cannot specify the name of a directory. String existingFileName The name of the existing file. This parameter cannot specify the name of a directory. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition NotSupportedException ArgumentException ArgumentNullException | Improve this Doc View Source CreateHardLink(String, String, PathFormat) [AlphaFS] Establishes a hard link (similar to CMD command: \"MKLINK /H\") between an existing file and a new file. This function is only supported on the NTFS file system, and only for files, not directories. Declaration [SecurityCritical] public static void CreateHardLink(string fileName, string existingFileName, PathFormat pathFormat) Parameters Type Name Description String fileName The name of the new file. This parameter cannot specify the name of a directory. String existingFileName The name of the existing file. This parameter cannot specify the name of a directory. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition NotSupportedException ArgumentException ArgumentNullException | Improve this Doc View Source CreateHardlinkTransacted(KernelTransaction, String, String) [AlphaFS] Establishes a hard link (similar to CMD command: \"MKLINK /H\") between an existing file and a new file as a transacted operation. This function is only supported on the NTFS file system, and only for files, not directories. Declaration [Obsolete(\"Use CreateHardLinkTransacted method.\")] [SecurityCritical] public static void CreateHardlinkTransacted(KernelTransaction transaction, string fileName, string existingFileName) Parameters Type Name Description KernelTransaction transaction The transaction. String fileName The name of the new file. This parameter cannot specify the name of a directory. String existingFileName The name of the existing file. This parameter cannot specify the name of a directory. Exceptions Type Condition NotSupportedException ArgumentException ArgumentNullException | Improve this Doc View Source CreateHardLinkTransacted(KernelTransaction, String, String) [AlphaFS] Establishes a hard link (similar to CMD command: \"MKLINK /H\") between an existing file and a new file as a transacted operation. This function is only supported on the NTFS file system, and only for files, not directories. Declaration [SecurityCritical] public static void CreateHardLinkTransacted(KernelTransaction transaction, string fileName, string existingFileName) Parameters Type Name Description KernelTransaction transaction The transaction. String fileName The name of the new file. This parameter cannot specify the name of a directory. String existingFileName The name of the existing file. This parameter cannot specify the name of a directory. Exceptions Type Condition NotSupportedException ArgumentException ArgumentNullException | Improve this Doc View Source CreateHardlinkTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Establishes a hard link (similar to CMD command: \"MKLINK /H\") between an existing file and a new file as a transacted operation. This function is only supported on the NTFS file system, and only for files, not directories. Declaration [Obsolete(\"Use CreateHardLinkTransacted method.\")] [SecurityCritical] public static void CreateHardlinkTransacted(KernelTransaction transaction, string fileName, string existingFileName, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String fileName The name of the new file. This parameter cannot specify the name of a directory. String existingFileName The name of the existing file. This parameter cannot specify the name of a directory. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition NotSupportedException ArgumentException ArgumentNullException | Improve this Doc View Source CreateHardLinkTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Establishes a hard link (similar to CMD command: \"MKLINK /H\") between an existing file and a new file as a transacted operation. This function is only supported on the NTFS file system, and only for files, not directories. Declaration [SecurityCritical] public static void CreateHardLinkTransacted(KernelTransaction transaction, string fileName, string existingFileName, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String fileName The name of the new file. This parameter cannot specify the name of a directory. String existingFileName The name of the existing file. This parameter cannot specify the name of a directory. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition NotSupportedException ArgumentException ArgumentNullException | Improve this Doc View Source CreateSymbolicLink(String, String) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK\") to a file. Declaration [SecurityCritical] public static void CreateSymbolicLink(string symlinkFileName, string targetFileName) Parameters Type Name Description String symlinkFileName The name of the target for the symbolic link to be created. String targetFileName The symbolic link to be created. Remarks Symbolic links can point to a non-existent target. When creating a symbolic link, the operating system does not check to see if the target exists. Symbolic links are reparse points. There is a maximum of 31 reparse points (and therefore symbolic links) allowed in a particular path. See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException IOException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLink(String, String, PathFormat) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK\") to a file. Declaration [SecurityCritical] public static void CreateSymbolicLink(string symlinkFileName, string targetFileName, PathFormat pathFormat) Parameters Type Name Description String symlinkFileName The name of the target for the symbolic link to be created. String targetFileName The symbolic link to be created. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Symbolic links can point to a non-existent target. When creating a symbolic link, the operating system does not check to see if the target exists. Symbolic links are reparse points. There is a maximum of 31 reparse points (and therefore symbolic links) allowed in a particular path. See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException IOException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLink(String, String, SymbolicLinkTarget) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK\") to a file. Declaration [SecurityCritical] [Obsolete(\"Methods with SymbolicLinkTarget parameter are obsolete.\")] public static void CreateSymbolicLink(string symlinkFileName, string targetFileName, SymbolicLinkTarget targetType) Parameters Type Name Description String symlinkFileName The name of the target for the symbolic link to be created. String targetFileName The symbolic link to be created. SymbolicLinkTarget targetType Indicates whether the link target, targetFileName , is a file or directory. Remarks See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLink(String, String, SymbolicLinkTarget, PathFormat) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK\") to a file. Declaration [SecurityCritical] [Obsolete(\"Methods with SymbolicLinkTarget parameter are obsolete.\")] public static void CreateSymbolicLink(string symlinkFileName, string targetFileName, SymbolicLinkTarget targetType, PathFormat pathFormat) Parameters Type Name Description String symlinkFileName The name of the target for the symbolic link to be created. String targetFileName The symbolic link to be created. SymbolicLinkTarget targetType Indicates whether the link target, targetFileName , is a file or directory. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLinkTransacted(KernelTransaction, String, String) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK\") to a file as a transacted operation. Declaration [SecurityCritical] public static void CreateSymbolicLinkTransacted(KernelTransaction transaction, string symlinkFileName, string targetFileName) Parameters Type Name Description KernelTransaction transaction The transaction. String symlinkFileName The name of the target for the symbolic link to be created. String targetFileName The symbolic link to be created. Remarks Symbolic links can point to a non-existent target. When creating a symbolic link, the operating system does not check to see if the target exists. Symbolic links are reparse points. There is a maximum of 31 reparse points (and therefore symbolic links) allowed in a particular path. See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException IOException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLinkTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK\") to a file as a transacted operation. Declaration [SecurityCritical] public static void CreateSymbolicLinkTransacted(KernelTransaction transaction, string symlinkFileName, string targetFileName, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String symlinkFileName The name of the target for the symbolic link to be created. String targetFileName The symbolic link to be created. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Symbolic links can point to a non-existent target. When creating a symbolic link, the operating system does not check to see if the target exists. Symbolic links are reparse points. There is a maximum of 31 reparse points (and therefore symbolic links) allowed in a particular path. See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException IOException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLinkTransacted(KernelTransaction, String, String, SymbolicLinkTarget) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK\") to a file as a transacted operation. Declaration [SecurityCritical] [Obsolete(\"Methods with SymbolicLinkTarget parameter are obsolete.\")] public static void CreateSymbolicLinkTransacted(KernelTransaction transaction, string symlinkFileName, string targetFileName, SymbolicLinkTarget targetType) Parameters Type Name Description KernelTransaction transaction The transaction. String symlinkFileName The name of the target for the symbolic link to be created. String targetFileName The symbolic link to be created. SymbolicLinkTarget targetType Indicates whether the link target, targetFileName , is a file or directory. Remarks See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateSymbolicLinkTransacted(KernelTransaction, String, String, SymbolicLinkTarget, PathFormat) [AlphaFS] Creates a symbolic link (similar to CMD command: \"MKLINK\") to a file as a transacted operation. Declaration [SecurityCritical] [Obsolete(\"Methods with SymbolicLinkTarget parameter are obsolete.\")] public static void CreateSymbolicLinkTransacted(KernelTransaction transaction, string symlinkFileName, string targetFileName, SymbolicLinkTarget targetType, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String symlinkFileName The name of the target for the symbolic link to be created. String targetFileName The symbolic link to be created. SymbolicLinkTarget targetType Indicates whether the link target, targetFileName , is a file or directory. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks See CreateSymbolicLink to run this method in an elevated state. Exceptions Type Condition ArgumentException ArgumentNullException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source CreateText(String) Creates or opens a file for writing UTF-8 encoded text. Declaration [SecurityCritical] public static StreamWriter CreateText(string path) Parameters Type Name Description String path The file to be opened for writing. Returns Type Description StreamWriter A StreamWriter that writes to the specified file using UTF-8 encoding. | Improve this Doc View Source CreateText(String, PathFormat) [AlphaFS] Creates or opens a file for writing UTF-8 encoded text. Declaration [SecurityCritical] public static StreamWriter CreateText(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to be opened for writing. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamWriter A StreamWriter that writes to the specified file using UTF-8 encoding. | Improve this Doc View Source CreateText(String, Encoding) [AlphaFS] Creates or opens a file for writing Encoding encoded text. Declaration [SecurityCritical] public static StreamWriter CreateText(string path, Encoding encoding) Parameters Type Name Description String path The file to be opened for writing. Encoding encoding The encoding that is applied to the contents of the file. Returns Type Description StreamWriter A StreamWriter that writes to the specified file using UTF-8 encoding. | Improve this Doc View Source CreateText(String, Encoding, PathFormat) [AlphaFS] Creates or opens a file for writing Encoding encoded text. Declaration [SecurityCritical] public static StreamWriter CreateText(string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to be opened for writing. Encoding encoding The encoding that is applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamWriter A StreamWriter that writes to the specified file using UTF-8 encoding. | Improve this Doc View Source CreateTextTransacted(KernelTransaction, String) [AlphaFS] Creates or opens a file for writing UTF-8 encoded text. Declaration [SecurityCritical] public static StreamWriter CreateTextTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for writing. Returns Type Description StreamWriter A StreamWriter that writes to the specified file using UTF-8 encoding. | Improve this Doc View Source CreateTextTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Creates or opens a file for writing Encoding encoded text. Declaration [SecurityCritical] public static StreamWriter CreateTextTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for writing. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamWriter A StreamWriter that writes to the specified file using UTF-8 encoding. | Improve this Doc View Source CreateTextTransacted(KernelTransaction, String, Encoding) [AlphaFS] Creates or opens a file for writing Encoding encoded text. Declaration [SecurityCritical] public static StreamWriter CreateTextTransacted(KernelTransaction transaction, string path, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for writing. Encoding encoding The encoding that is applied to the contents of the file. Returns Type Description StreamWriter A StreamWriter that writes to the specified file using UTF-8 encoding. | Improve this Doc View Source CreateTextTransacted(KernelTransaction, String, Encoding, PathFormat) [AlphaFS] Creates or opens a file for writing Encoding encoded text. Declaration [SecurityCritical] public static StreamWriter CreateTextTransacted(KernelTransaction transaction, string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for writing. Encoding encoding The encoding that is applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamWriter A StreamWriter that writes to the specified file using UTF-8 encoding. | Improve this Doc View Source CreateTransacted(KernelTransaction, String) [AlphaFS] Creates or overwrites a file in the specified path. Declaration [SecurityCritical] public static FileStream CreateTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path and name of the file to create. Returns Type Description FileStream A FileStream that provides read/write access to the file specified in path . | Improve this Doc View Source CreateTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Creates or overwrites a file in the specified path. Declaration [SecurityCritical] public static FileStream CreateTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path and name of the file to create. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream that provides read/write access to the file specified in path . | Improve this Doc View Source CreateTransacted(KernelTransaction, String, Int32) [AlphaFS] Creates or overwrites the specified file. Declaration [SecurityCritical] public static FileStream CreateTransacted(KernelTransaction transaction, string path, int bufferSize) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. Returns Type Description FileStream A FileStream with the specified buffer size that provides read/write access to the file specified in path . | Improve this Doc View Source CreateTransacted(KernelTransaction, String, Int32, PathFormat) [AlphaFS] Creates or overwrites the specified file. Declaration [SecurityCritical] public static FileStream CreateTransacted(KernelTransaction transaction, string path, int bufferSize, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream with the specified buffer size that provides read/write access to the file specified in path . | Improve this Doc View Source CreateTransacted(KernelTransaction, String, Int32, FileOptions) [AlphaFS] Creates or overwrites the specified file, specifying a buffer size and a FileOptions value that describes how to create or overwrite the file. Declaration [SecurityCritical] public static FileStream CreateTransacted(KernelTransaction transaction, string path, int bufferSize, FileOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. FileOptions options One of the FileOptions values that describes how to create or overwrite the file. Returns Type Description FileStream A new file with the specified buffer size. | Improve this Doc View Source CreateTransacted(KernelTransaction, String, Int32, FileOptions, PathFormat) [AlphaFS] Creates or overwrites the specified file, specifying a buffer size and a FileOptions value that describes how to create or overwrite the file. Declaration [SecurityCritical] public static FileStream CreateTransacted(KernelTransaction transaction, string path, int bufferSize, FileOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. FileOptions options One of the FileOptions values that describes how to create or overwrite the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A new file with the specified buffer size. | Improve this Doc View Source CreateTransacted(KernelTransaction, String, Int32, FileOptions, FileSecurity) [AlphaFS] Creates or overwrites the specified file, specifying a buffer size and a FileOptions value that describes how to create or overwrite the file. Declaration [SecurityCritical] public static FileStream CreateTransacted(KernelTransaction transaction, string path, int bufferSize, FileOptions options, FileSecurity fileSecurity) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. FileOptions options One of the FileOptions values that describes how to create or overwrite the file. FileSecurity fileSecurity One of the FileSecurity values that determines the access control and audit security for the file. Returns Type Description FileStream A new file with the specified buffer size, file options, and file security. | Improve this Doc View Source CreateTransacted(KernelTransaction, String, Int32, FileOptions, FileSecurity, PathFormat) [AlphaFS] Creates or overwrites the specified file, specifying a buffer size and a FileOptions value that describes how to create or overwrite the file. Declaration [SecurityCritical] public static FileStream CreateTransacted(KernelTransaction transaction, string path, int bufferSize, FileOptions options, FileSecurity fileSecurity, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. Int32 bufferSize The number of bytes buffered for reads and writes to the file. FileOptions options One of the FileOptions values that describes how to create or overwrite the file. FileSecurity fileSecurity One of the FileSecurity values that determines the access control and audit security for the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A new file with the specified buffer size, file options, and file security. | Improve this Doc View Source Decompress(String) [AlphaFS] Decompresses an NTFS compressed file. Declaration [SecurityCritical] public static void Decompress(string path) Parameters Type Name Description String path A path that describes a file to decompress. | Improve this Doc View Source Decompress(String, PathFormat) [AlphaFS] Decompresses an NTFS compressed file. Declaration [SecurityCritical] public static void Decompress(string path, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a file to decompress. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source DecompressTransacted(KernelTransaction, String) [AlphaFS] Decompresses an NTFS compressed file. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a file to decompress. | Improve this Doc View Source DecompressTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Decompresses an NTFS compressed file. Declaration [SecurityCritical] public static void DecompressTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path A path that describes a file to decompress. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source Decrypt(String) Decrypts a file that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public static void Decrypt(string path) Parameters Type Name Description String path A path that describes a file to decrypt. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException NotSupportedException | Improve this Doc View Source Decrypt(String, PathFormat) [AlphaFS] Decrypts a file that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public static void Decrypt(string path, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a file to decrypt. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException NotSupportedException | Improve this Doc View Source Delete(String) Deletes the specified file. Declaration [SecurityCritical] public static void Delete(string path) Parameters Type Name Description String path The name of the file to be deleted. Wildcard characters are not supported. Remarks If the file to be deleted does not exist, no exception is thrown. Exceptions Type Condition ArgumentException NotSupportedException UnauthorizedAccessException FileReadOnlyException | Improve this Doc View Source Delete(String, PathFormat) Deletes the specified file. Declaration [SecurityCritical] public static void Delete(string path, PathFormat pathFormat) Parameters Type Name Description String path The name of the file to be deleted. Wildcard characters are not supported. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks If the file to be deleted does not exist, no exception is thrown. Exceptions Type Condition ArgumentException NotSupportedException UnauthorizedAccessException FileReadOnlyException | Improve this Doc View Source Delete(String, Boolean) [AlphaFS] Deletes the specified file. Declaration [SecurityCritical] public static void Delete(string path, bool ignoreReadOnly) Parameters Type Name Description String path The name of the file to be deleted. Wildcard characters are not supported. Boolean ignoreReadOnly true overrides the read only FileAttributes of the file. Remarks If the file to be deleted does not exist, no exception is thrown. Exceptions Type Condition ArgumentException NotSupportedException UnauthorizedAccessException FileReadOnlyException | Improve this Doc View Source Delete(String, Boolean, PathFormat) [AlphaFS] Deletes the specified file. Declaration [SecurityCritical] public static void Delete(string path, bool ignoreReadOnly, PathFormat pathFormat) Parameters Type Name Description String path The name of the file to be deleted. Wildcard characters are not supported. Boolean ignoreReadOnly true overrides the read only FileAttributes of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks If the file to be deleted does not exist, no exception is thrown. Exceptions Type Condition ArgumentException NotSupportedException UnauthorizedAccessException FileReadOnlyException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String) [AlphaFS] Deletes the specified file. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file to be deleted. Wildcard characters are not supported. Remarks If the file to be deleted does not exist, no exception is thrown. Exceptions Type Condition ArgumentException NotSupportedException UnauthorizedAccessException FileReadOnlyException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Deletes the specified file. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file to be deleted. Wildcard characters are not supported. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks If the file to be deleted does not exist, no exception is thrown. Exceptions Type Condition ArgumentException NotSupportedException UnauthorizedAccessException FileReadOnlyException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String, Boolean) [AlphaFS] Deletes the specified file. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path, bool ignoreReadOnly) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file to be deleted. Wildcard characters are not supported. Boolean ignoreReadOnly true overrides the read only FileAttributes of the file. Remarks If the file to be deleted does not exist, no exception is thrown. Exceptions Type Condition ArgumentException NotSupportedException UnauthorizedAccessException FileReadOnlyException | Improve this Doc View Source DeleteTransacted(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Deletes the specified file. Declaration [SecurityCritical] public static void DeleteTransacted(KernelTransaction transaction, string path, bool ignoreReadOnly, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file to be deleted. Wildcard characters are not supported. Boolean ignoreReadOnly true overrides the read only FileAttributes of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks If the file to be deleted does not exist, no exception is thrown. Exceptions Type Condition ArgumentException NotSupportedException UnauthorizedAccessException FileReadOnlyException | Improve this Doc View Source Encrypt(String) Encrypts a file so that only the account used to encrypt the file can decrypt it. Declaration [SecurityCritical] public static void Encrypt(string path) Parameters Type Name Description String path A path that describes a file to encrypt. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException NotSupportedException | Improve this Doc View Source Encrypt(String, PathFormat) [AlphaFS] Encrypts a file so that only the account used to encrypt the file can decrypt it. Declaration [SecurityCritical] public static void Encrypt(string path, PathFormat pathFormat) Parameters Type Name Description String path A path that describes a file to encrypt. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException NotSupportedException | Improve this Doc View Source EnumerateAlternateDataStreams(String) [AlphaFS] Enumerates all altername datastreams of the specified file. Declaration [SecurityCritical] public static IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreams(string path) Parameters Type Name Description String path The path to the file to enumerate streams of. Returns Type Description IEnumerable < AlternateDataStreamInfo > An enumeration of AlternateDataStreamInfo instances. | Improve this Doc View Source EnumerateAlternateDataStreams(String, PathFormat) [AlphaFS] Enumerates all altername datastreams of the specified file. Declaration [SecurityCritical] public static IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreams(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the file to enumerate streams of. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < AlternateDataStreamInfo > An enumeration of AlternateDataStreamInfo instances. | Improve this Doc View Source EnumerateAlternateDataStreamsTransacted(KernelTransaction, String) [AlphaFS] Enumerates all altername datastreams of the specified file. Declaration [SecurityCritical] public static IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreamsTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file to enumerate streams of. Returns Type Description IEnumerable < AlternateDataStreamInfo > An enumeration of AlternateDataStreamInfo instances. | Improve this Doc View Source EnumerateAlternateDataStreamsTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Enumerates all altername datastreams of the specified file. Declaration [SecurityCritical] public static IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreamsTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file to enumerate streams of. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < AlternateDataStreamInfo > An enumeration of AlternateDataStreamInfo instances. | Improve this Doc View Source EnumerateHardlinks(String) [AlphaFS] Creates an enumeration of all the hard links to the specified path . Declaration [Obsolete(\"Use EnumerateHardLinks method.\")] [SecurityCritical] public static IEnumerable<string> EnumerateHardlinks(string path) Parameters Type Name Description String path The name of the file. Returns Type Description IEnumerable < String > An enumerable collection of String of all the hard links to the specified path Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateHardLinks(String) [AlphaFS] Creates an enumeration of all the hard links to the specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateHardLinks(string path) Parameters Type Name Description String path The name of the file. Returns Type Description IEnumerable < String > An enumerable collection of String of all the hard links to the specified path Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateHardlinks(String, PathFormat) [AlphaFS] Creates an enumeration of all the hard links to the specified path . Declaration [Obsolete(\"Use EnumerateHardLinks method.\")] [SecurityCritical] public static IEnumerable<string> EnumerateHardlinks(string path, PathFormat pathFormat) Parameters Type Name Description String path The name of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of String of all the hard links to the specified path Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateHardLinks(String, PathFormat) [AlphaFS] Creates an enumeration of all the hard links to the specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateHardLinks(string path, PathFormat pathFormat) Parameters Type Name Description String path The name of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of String of all the hard links to the specified path Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateHardlinksTransacted(KernelTransaction, String) [AlphaFS] Creates an enumeration of all the hard links to the specified path . Declaration [Obsolete(\"Use EnumerateHardLinks method.\")] [SecurityCritical] public static IEnumerable<string> EnumerateHardlinksTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. Returns Type Description IEnumerable < String > An enumerable collection of String of all the hard links to the specified path Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateHardLinksTransacted(KernelTransaction, String) [AlphaFS] Creates an enumeration of all the hard links to the specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateHardLinksTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. Returns Type Description IEnumerable < String > An enumerable collection of String of all the hard links to the specified path Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateHardlinksTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Creates an enumeration of all the hard links to the specified path . Declaration [Obsolete(\"Use EnumerateHardLinks method.\")] [SecurityCritical] public static IEnumerable<string> EnumerateHardlinksTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of String of all the hard links to the specified path Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateHardLinksTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Creates an enumeration of all the hard links to the specified path . Declaration [SecurityCritical] public static IEnumerable<string> EnumerateHardLinksTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > An enumerable collection of String of all the hard links to the specified path Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source Exists(String) Determines whether the specified file exists. Declaration [SecurityCritical] public static bool Exists(string path) Parameters Type Name Description String path The file to check. Returns Type Description Boolean Returns true if the caller has the required permissions and path contains the name of an existing file; otherwise, false Remarks MSDN: .NET 3.5+: Trailing spaces are removed from the end of the path parameter before checking whether the directory exists. The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. The Exists method should not be used for path validation, this method merely checks if the file specified in path exists. Passing an invalid path to Exists returns false. Be aware that another process can potentially do something with the file in between the time you call the Exists method and perform another operation on the file, such as Delete. | Improve this Doc View Source Exists(String, PathFormat) [AlphaFS] Determines whether the specified file exists. Declaration [SecurityCritical] public static bool Exists(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to check. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if the caller has the required permissions and path contains the name of an existing file; otherwise, false Remarks MSDN: .NET 3.5+: Trailing spaces are removed from the end of the path parameter before checking whether the directory exists. The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. The Exists method should not be used for path validation, this method merely checks if the file specified in path exists. Passing an invalid path to Exists returns false. Be aware that another process can potentially do something with the file in between the time you call the Exists method and perform another operation on the file, such as Delete. | Improve this Doc View Source ExistsTransacted(KernelTransaction, String) [AlphaFS] Determines whether the specified file exists. Declaration [SecurityCritical] public static bool ExistsTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to check. Returns Type Description Boolean Returns true if the caller has the required permissions and path contains the name of an existing file; otherwise, false Remarks MSDN: .NET 3.5+: Trailing spaces are removed from the end of the path parameter before checking whether the directory exists. The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. The Exists method should not be used for path validation, this method merely checks if the file specified in path exists. Passing an invalid path to Exists returns false. Be aware that another process can potentially do something with the file in between the time you call the Exists method and perform another operation on the file, such as Delete. | Improve this Doc View Source ExistsTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Determines whether the specified file exists. Declaration [SecurityCritical] public static bool ExistsTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to check. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if the caller has the required permissions and path contains the name of an existing file; otherwise, false Remarks MSDN: .NET 3.5+: Trailing spaces are removed from the end of the path parameter before checking whether the directory exists. The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. The Exists method should not be used for path validation, this method merely checks if the file specified in path exists. Passing an invalid path to Exists returns false. Be aware that another process can potentially do something with the file in between the time you call the Exists method and perform another operation on the file, such as Delete. | Improve this Doc View Source ExportEncryptedFileRaw(String, Stream) [AlphaFS] Backs up (export) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ExportEncryptedFileRaw(string fileName, Stream outputStream) Parameters Type Name Description String fileName The name of the file to be backed up. Stream outputStream The destination stream to which the backup data will be written. Remarks The file being backed up is not decrypted; it is backed up in its encrypted state. If the caller does not have access to the key for the file, the caller needs Backup to export encrypted files. See PrivilegeEnabler . To backup an encrypted file call one of the overloads and specify the file to backup along with the destination stream of the backup data. This function is intended for the backup of only encrypted files; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source ExportEncryptedFileRaw(String, Stream, PathFormat) [AlphaFS] Backs up (export) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ExportEncryptedFileRaw(string fileName, Stream outputStream, PathFormat pathFormat) Parameters Type Name Description String fileName The name of the file to be backed up. Stream outputStream The destination stream to which the backup data will be written. PathFormat pathFormat The path format of the fileName parameter. Remarks The file being backed up is not decrypted; it is backed up in its encrypted state. If the caller does not have access to the key for the file, the caller needs Backup to export encrypted files. See PrivilegeEnabler . To backup an encrypted file call one of the overloads and specify the file to backup along with the destination stream of the backup data. This function is intended for the backup of only encrypted files; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source GetAccessControl(SafeFileHandle) [AlphaFS] Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified file handle. Declaration [SecurityCritical] public static FileSecurity GetAccessControl(SafeFileHandle handle) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle to a file containing a FileSecurity object that describes the file's access control list (ACL) information. Returns Type Description FileSecurity A FileSecurity object that encapsulates the access control rules for the file described by the handle parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(SafeFileHandle, AccessControlSections) [AlphaFS] Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified file handle. Declaration [SecurityCritical] public static FileSecurity GetAccessControl(SafeFileHandle handle, AccessControlSections includeSections) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle to a file containing a FileSecurity object that describes the file's access control list (ACL) information. AccessControlSections includeSections One (or more) of the AccessControlSections values that specifies the type of access control list (ACL) information to receive. Returns Type Description FileSecurity A FileSecurity object that encapsulates the access control rules for the file described by the handle parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(String) Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified file. Declaration [SecurityCritical] public static FileSecurity GetAccessControl(string path) Parameters Type Name Description String path The path to a file containing a FileSecurity object that describes the file's access control list (ACL) information. Returns Type Description FileSecurity A FileSecurity object that encapsulates the access control rules for the file described by the path parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(String, PathFormat) [AlphaFS] Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified file. Declaration [SecurityCritical] public static FileSecurity GetAccessControl(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to a file containing a FileSecurity object that describes the file's access control list (ACL) information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSecurity A FileSecurity object that encapsulates the access control rules for the file described by the path parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(String, AccessControlSections) Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified file. Declaration [SecurityCritical] public static FileSecurity GetAccessControl(string path, AccessControlSections includeSections) Parameters Type Name Description String path The path to a file containing a FileSecurity object that describes the file's access control list (ACL) information. AccessControlSections includeSections One (or more) of the AccessControlSections values that specifies the type of access control list (ACL) information to receive. Returns Type Description FileSecurity A FileSecurity object that encapsulates the access control rules for the file described by the path parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAccessControl(String, AccessControlSections, PathFormat) [AlphaFS] Gets a FileSecurity object that encapsulates the access control list (ACL) entries for a specified file. Declaration [SecurityCritical] public static FileSecurity GetAccessControl(string path, AccessControlSections includeSections, PathFormat pathFormat) Parameters Type Name Description String path The path to a file containing a FileSecurity object that describes the file's access control list (ACL) information. AccessControlSections includeSections One (or more) of the AccessControlSections values that specifies the type of access control list (ACL) information to receive. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSecurity A FileSecurity object that encapsulates the access control rules for the file described by the path parameter. Exceptions Type Condition IOException ArgumentException ArgumentNullException | Improve this Doc View Source GetAttributes(String) Gets the FileAttributes of the file on the path. Declaration [SecurityCritical] public static FileAttributes GetAttributes(string path) Parameters Type Name Description String path The path to the file. Returns Type Description FileAttributes The FileAttributes of the file on the path. | Improve this Doc View Source GetAttributes(String, PathFormat) [AlphaFS] Gets the FileAttributes of the file on the path. Declaration [SecurityCritical] public static FileAttributes GetAttributes(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileAttributes The FileAttributes of the file on the path. | Improve this Doc View Source GetAttributesTransacted(KernelTransaction, String) [AlphaFS] Gets the FileAttributes of the file on the path. Declaration [SecurityCritical] public static FileAttributes GetAttributesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. Returns Type Description FileAttributes The FileAttributes of the file on the path. | Improve this Doc View Source GetAttributesTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the FileAttributes of the file on the path. Declaration [SecurityCritical] public static FileAttributes GetAttributesTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileAttributes The FileAttributes of the file on the path. | Improve this Doc View Source GetChangeTime(SafeFileHandle) [AlphaFS] Gets the change date and time of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTime(SafeFileHandle safeFileHandle) Parameters Type Name Description SafeFileHandle safeFileHandle An open handle to the file or directory from which to retrieve information. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in local time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetChangeTime(String) [AlphaFS] Gets the change date and time of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTime(string path) Parameters Type Name Description String path The file for which to obtain creation date and time information. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in local time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetChangeTime(String, PathFormat) [AlphaFS] Gets the change date and time of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTime(string path, PathFormat pathFormat) Parameters Type Name Description String path The file for which to obtain creation date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in local time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetChangeTimeTransacted(KernelTransaction, String) [AlphaFS] Gets the change date and time of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTimeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain creation date and time information. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in local time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetChangeTimeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the change date and time of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTimeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain creation date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in local time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetChangeTimeUtc(SafeFileHandle) [AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTimeUtc(SafeFileHandle safeFileHandle) Parameters Type Name Description SafeFileHandle safeFileHandle An open handle to the file or directory from which to retrieve information. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in UTC time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetChangeTimeUtc(String) [AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTimeUtc(string path) Parameters Type Name Description String path The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in UTC time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetChangeTimeUtc(String, PathFormat) [AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTimeUtc(string path, PathFormat pathFormat) Parameters Type Name Description String path The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in UTC time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetChangeTimeUtcTransacted(KernelTransaction, String) [AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTimeUtcTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format. Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in UTC time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetChangeTimeUtcTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the change date and time, in Coordinated Universal Time (UTC) format, of the specified file. Declaration [SecurityCritical] public static DateTime GetChangeTimeUtcTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain change date and time information, in Coordinated Universal Time (UTC) format. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the change date and time for the specified file. This value is expressed in UTC time. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetCompressedSize(String) [AlphaFS] Retrieves the actual number of bytes of disk storage used to store a specified file. Declaration [SecurityCritical] public static long GetCompressedSize(string path) Parameters Type Name Description String path The name of the file. Returns Type Description Int64 The actual number of bytes of disk storage used to store the specified file. Remarks If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the specified file. If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse size of the specified file. | Improve this Doc View Source GetCompressedSize(String, PathFormat) [AlphaFS] Retrieves the actual number of bytes of disk storage used to store a specified file. Declaration [SecurityCritical] public static long GetCompressedSize(string path, PathFormat pathFormat) Parameters Type Name Description String path The name of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The actual number of bytes of disk storage used to store the specified file. Remarks If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the specified file. If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse size of the specified file. | Improve this Doc View Source GetCompressedSizeTransacted(KernelTransaction, String) [AlphaFS] Retrieves the actual number of bytes of disk storage used to store a specified file as part of a transaction. If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the specified file. If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse size of the specified file. Declaration [SecurityCritical] public static long GetCompressedSizeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. Returns Type Description Int64 The actual number of bytes of disk storage used to store the specified file. | Improve this Doc View Source GetCompressedSizeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Retrieves the actual number of bytes of disk storage used to store a specified file as part of a transaction. If the file is located on a volume that supports compression and the file is compressed, the value obtained is the compressed size of the specified file. If the file is located on a volume that supports sparse files and the file is a sparse file, the value obtained is the sparse size of the specified file. Declaration [SecurityCritical] public static long GetCompressedSizeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The name of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The actual number of bytes of disk storage used to store the specified file. | Improve this Doc View Source GetCreationTime(String) Gets the creation date and time of the specified file. Declaration [SecurityCritical] public static DateTime GetCreationTime(string path) Parameters Type Name Description String path The file for which to obtain creation date and time information. Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified file. This value is expressed in local time. | Improve this Doc View Source GetCreationTime(String, PathFormat) [AlphaFS] Gets the creation date and time of the specified file. Declaration [SecurityCritical] public static DateTime GetCreationTime(string path, PathFormat pathFormat) Parameters Type Name Description String path The file for which to obtain creation date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified file. This value is expressed in local time. | Improve this Doc View Source GetCreationTimeTransacted(KernelTransaction, String) [AlphaFS] Gets the creation date and time of the specified file. Declaration [SecurityCritical] public static DateTime GetCreationTimeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain creation date and time information. Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified file. This value is expressed in local time. | Improve this Doc View Source GetCreationTimeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the creation date and time of the specified file. Declaration [SecurityCritical] public static DateTime GetCreationTimeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain creation date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified file. This value is expressed in local time. | Improve this Doc View Source GetCreationTimeUtc(String) Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file. Declaration [SecurityCritical] public static DateTime GetCreationTimeUtc(string path) Parameters Type Name Description String path The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format. Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified file. This value is expressed in UTC time. | Improve this Doc View Source GetCreationTimeUtc(String, PathFormat) [AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file. Declaration [SecurityCritical] public static DateTime GetCreationTimeUtc(string path, PathFormat pathFormat) Parameters Type Name Description String path The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified file. This value is expressed in UTC time. | Improve this Doc View Source GetCreationTimeUtcTransacted(KernelTransaction, String) [AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file. Declaration [SecurityCritical] public static DateTime GetCreationTimeUtcTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format. Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified file. This value is expressed in UTC time. | Improve this Doc View Source GetCreationTimeUtcTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the creation date and time, in Coordinated Universal Time (UTC) format, of the specified file. Declaration [SecurityCritical] public static DateTime GetCreationTimeUtcTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain creation date and time information, in Coordinated Universal Time (UTC) format. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the creation date and time for the specified file. This value is expressed in UTC time. | Improve this Doc View Source GetEncryptionStatus(String) [AlphaFS] Retrieves the encryption status of the specified file. Declaration [SecurityCritical] public static FileEncryptionStatus GetEncryptionStatus(string path) Parameters Type Name Description String path The name of the file. Returns Type Description FileEncryptionStatus The FileEncryptionStatus of the specified path . | Improve this Doc View Source GetEncryptionStatus(String, PathFormat) [AlphaFS] Retrieves the encryption status of the specified file. Declaration [SecurityCritical] public static FileEncryptionStatus GetEncryptionStatus(string path, PathFormat pathFormat) Parameters Type Name Description String path The name of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileEncryptionStatus The FileEncryptionStatus of the specified path . | Improve this Doc View Source GetFileIdInfo(SafeFileHandle) [AlphaFS] Retrieves file information for the specified SafeFileHandle . Declaration [SecurityCritical] public static FileIdInfo GetFileIdInfo(SafeFileHandle handle) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle connected to the open file or directory from which to retrieve the information. Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetFileIdInfo(String) [AlphaFS] Gets the unique identifier for a file. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public static FileIdInfo GetFileIdInfo(string path) Parameters Type Name Description String path The path to the file. Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetFileIdInfo(String, PathFormat) [AlphaFS] Gets the unique identifier for a file. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public static FileIdInfo GetFileIdInfo(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetFileIdInfoTransacted(KernelTransaction, String) [AlphaFS] Gets the unique identifier for a file. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public static FileIdInfo GetFileIdInfoTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetFileIdInfoTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the unique identifier for a file. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public static FileIdInfo GetFileIdInfoTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetFileInfoByHandle(SafeFileHandle) [AlphaFS] Retrieves file information for the specified SafeFileHandle . Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandle(SafeFileHandle handle) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle connected to the open file or directory from which to retrieve the information. Returns Type Description ByHandleFileInfo A ByHandleFileInfo object containing the requested information. | Improve this Doc View Source GetFileInfoByHandle(String) [AlphaFS] Retrieves file information for the specified file. Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandle(string path) Parameters Type Name Description String path The path to the file. Returns Type Description ByHandleFileInfo A ByHandleFileInfo object containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetFileInfoByHandle(String, PathFormat) [AlphaFS] Retrieves file information for the specified file. Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandle(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description ByHandleFileInfo A ByHandleFileInfo object containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetFileInfoByHandleTransacted(KernelTransaction, String) [AlphaFS] Retrieves file information for the specified file. Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandleTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. Returns Type Description ByHandleFileInfo A ByHandleFileInfo object containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetFileInfoByHandleTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Retrieves file information for the specified file. Declaration [SecurityCritical] public static ByHandleFileInfo GetFileInfoByHandleTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description ByHandleFileInfo A ByHandleFileInfo object containing the requested information. Remarks File IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a file can change over time. | Improve this Doc View Source GetFileSystemEntryInfo(String) [AlphaFS] Gets the FileSystemEntryInfo of the file on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfo(string path) Parameters Type Name Description String path The path to the file. Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the file. | Improve this Doc View Source GetFileSystemEntryInfo(String, PathFormat) [AlphaFS] Gets the FileSystemEntryInfo of the file on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfo(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the file. | Improve this Doc View Source GetFileSystemEntryInfo(String, Boolean) [AlphaFS] Gets the FileSystemEntryInfo of the file on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfo(string path, bool continueOnException) Parameters Type Name Description String path The path to the file. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as ACLs protected filesor non-accessible reparse points. Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the file or null on failure. | Improve this Doc View Source GetFileSystemEntryInfo(String, Boolean, PathFormat) [AlphaFS] Gets the FileSystemEntryInfo of the file on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfo(string path, bool continueOnException, PathFormat pathFormat) Parameters Type Name Description String path The path to the file. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as ACLs protected filesor non-accessible reparse points. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the file or null on failure. | Improve this Doc View Source GetFileSystemEntryInfoTransacted(KernelTransaction, String) [AlphaFS] Gets the FileSystemEntryInfo of the file on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfoTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the file. | Improve this Doc View Source GetFileSystemEntryInfoTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the FileSystemEntryInfo of the file on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfoTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the file. | Improve this Doc View Source GetFileSystemEntryInfoTransacted(KernelTransaction, String, Boolean) [AlphaFS] Gets the FileSystemEntryInfo of the file on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfoTransacted(KernelTransaction transaction, string path, bool continueOnException) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as ACLs protected filesor non-accessible reparse points. Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the file or null on failure. | Improve this Doc View Source GetFileSystemEntryInfoTransacted(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Gets the FileSystemEntryInfo of the file on the path. Declaration [SecurityCritical] public static FileSystemEntryInfo GetFileSystemEntryInfoTransacted(KernelTransaction transaction, string path, bool continueOnException, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as ACLs protected filesor non-accessible reparse points. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileSystemEntryInfo The FileSystemEntryInfo instance of the file or null on failure. | Improve this Doc View Source GetHash(KernelTransaction, String, HashType) [AlphaFS] Calculates the hash/checksum for the given fileFullPath . Declaration [Obsolete(\"Use GetHashTransacted method.\")] [SecurityCritical] public static string GetHash(KernelTransaction transaction, string fileFullPath, HashType hashType) Parameters Type Name Description KernelTransaction transaction The transaction. String fileFullPath The path to the file. HashType hashType One of the HashType values. Returns Type Description String The hash. | Improve this Doc View Source GetHash(KernelTransaction, String, HashType, PathFormat) [AlphaFS] Calculates the hash/checksum for the given fileFullPath . Declaration [Obsolete(\"Use GetHashTransacted method.\")] [SecurityCritical] public static string GetHash(KernelTransaction transaction, string fileFullPath, HashType hashType, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String fileFullPath The path to the file. HashType hashType One of the HashType values. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The hash. | Improve this Doc View Source GetHash(String, HashType) [AlphaFS] Calculates the hash/checksum for the given fileFullPath . Declaration [SecurityCritical] public static string GetHash(string fileFullPath, HashType hashType) Parameters Type Name Description String fileFullPath The path to the file. HashType hashType One of the HashType values. Returns Type Description String The hash. | Improve this Doc View Source GetHash(String, HashType, PathFormat) [AlphaFS] Calculates the hash/checksum for the given fileFullPath . Declaration [SecurityCritical] public static string GetHash(string fileFullPath, HashType hashType, PathFormat pathFormat) Parameters Type Name Description String fileFullPath The path to the file. HashType hashType One of the HashType values. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The hash. | Improve this Doc View Source GetHashTransacted(KernelTransaction, String, HashType) [AlphaFS] Calculates the hash/checksum for the given fileFullPath . Declaration [SecurityCritical] public static string GetHashTransacted(KernelTransaction transaction, string fileFullPath, HashType hashType) Parameters Type Name Description KernelTransaction transaction The transaction. String fileFullPath The path to the file. HashType hashType One of the HashType values. Returns Type Description String The hash. | Improve this Doc View Source GetHashTransacted(KernelTransaction, String, HashType, PathFormat) [AlphaFS] Calculates the hash/checksum for the given fileFullPath . Declaration [SecurityCritical] public static string GetHashTransacted(KernelTransaction transaction, string fileFullPath, HashType hashType, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String fileFullPath The path to the file. HashType hashType One of the HashType values. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The hash. | Improve this Doc View Source GetLastAccessTime(String) Gets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTime(string path) Parameters Type Name Description String path The file for which to obtain access date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTime(String, PathFormat) [AlphaFS] Gets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTime(string path, PathFormat pathFormat) Parameters Type Name Description String path The file for which to obtain access date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTimeTransacted(KernelTransaction, String) [AlphaFS] Gets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain access date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTimeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain access date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last accessed. This value is expressed in local time. | Improve this Doc View Source GetLastAccessTimeUtc(String) Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeUtc(string path) Parameters Type Name Description String path The file for which to obtain access date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last accessed. This value is expressed in UTC time. | Improve this Doc View Source GetLastAccessTimeUtc(String, PathFormat) [AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeUtc(string path, PathFormat pathFormat) Parameters Type Name Description String path The file for which to obtain access date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last accessed. This value is expressed in UTC time. | Improve this Doc View Source GetLastAccessTimeUtcTransacted(KernelTransaction, String) [AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain access date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last accessed. This value is expressed in UTC time. | Improve this Doc View Source GetLastAccessTimeUtcTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static DateTime GetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain access date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last accessed. This value is expressed in UTC time. | Improve this Doc View Source GetLastWriteTime(String) Gets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTime(string path) Parameters Type Name Description String path The file for which to obtain write date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTime(String, PathFormat) [AlphaFS] Gets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTime(string path, PathFormat pathFormat) Parameters Type Name Description String path The file for which to obtain write date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTimeTransacted(KernelTransaction, String) [AlphaFS] Gets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain write date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTimeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain write date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last written to. This value is expressed in local time. | Improve this Doc View Source GetLastWriteTimeUtc(String) Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeUtc(string path) Parameters Type Name Description String path The file for which to obtain write date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last written to. This value is expressed in UTC time. | Improve this Doc View Source GetLastWriteTimeUtc(String, PathFormat) [AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeUtc(string path, PathFormat pathFormat) Parameters Type Name Description String path The file for which to obtain write date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last written to. This value is expressed in UTC time. | Improve this Doc View Source GetLastWriteTimeUtcTransacted(KernelTransaction, String) [AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain write date and time information. Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last written to. This value is expressed in UTC time. | Improve this Doc View Source GetLastWriteTimeUtcTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets the date and time, in coordinated universal time (UTC) time, that the specified file was last written to. Declaration [SecurityCritical] public static DateTime GetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to obtain write date and time information. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DateTime A DateTime structure set to the date and time that the specified file was last written to. This value is expressed in UTC time. | Improve this Doc View Source GetLinkTargetInfo(String) [AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system. Declaration [SecurityCritical] public static LinkTargetInfo GetLinkTargetInfo(string path) Parameters Type Name Description String path The path to the reparse point. Returns Type Description LinkTargetInfo An instance of LinkTargetInfo or SymbolicLinkTargetInfo containing information about the symbolic link or mount point pointed to by path . | Improve this Doc View Source GetLinkTargetInfo(String, PathFormat) [AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system. Declaration [SecurityCritical] public static LinkTargetInfo GetLinkTargetInfo(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description LinkTargetInfo An instance of LinkTargetInfo or SymbolicLinkTargetInfo containing information about the symbolic link or mount point pointed to by path . | Improve this Doc View Source GetLinkTargetInfoTransacted(KernelTransaction, String) [AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system. Declaration [SecurityCritical] public static LinkTargetInfo GetLinkTargetInfoTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the reparse point. Returns Type Description LinkTargetInfo An instance of LinkTargetInfo or SymbolicLinkTargetInfo containing information about the symbolic link or mount point pointed to by path . | Improve this Doc View Source GetLinkTargetInfoTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets information about the target of a mount point or symbolic link on an NTFS file system. Declaration [SecurityCritical] public static LinkTargetInfo GetLinkTargetInfoTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description LinkTargetInfo An instance of LinkTargetInfo or SymbolicLinkTargetInfo containing information about the symbolic link or mount point pointed to by path . | Improve this Doc View Source GetProcessForFileLock(Collection<String>) [AlphaFS] Gets a list of processes that have a lock on the file(s) specified by filePaths . Declaration public static Collection<Process> GetProcessForFileLock(Collection<string> filePaths) Parameters Type Name Description Collection < String > filePaths A list with one or more file paths. Returns Type Description Collection < Process > null when no processes found that are locking the file(s) specified by filePaths . A list of processes locking the file(s) specified by filePaths . Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException InvalidOperationException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetProcessForFileLock(Collection<String>, PathFormat) [AlphaFS] Gets a list of processes that have a lock on the file(s) specified by filePaths . Declaration public static Collection<Process> GetProcessForFileLock(Collection<string> filePaths, PathFormat pathFormat) Parameters Type Name Description Collection < String > filePaths A list with one or more file paths. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Collection < Process > null when no processes found that are locking the file(s) specified by filePaths . A list of processes locking the file(s) specified by filePaths . Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException InvalidOperationException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetProcessForFileLock(String) [AlphaFS] Gets a list of processes that have a lock on the files specified by filePath . Declaration public static Collection<Process> GetProcessForFileLock(string filePath) Parameters Type Name Description String filePath The path to the file. Returns Type Description Collection < Process > null when no processes found that are locking the file specified by filePath . A list of processes locking the file specified by filePath . Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException InvalidOperationException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetProcessForFileLock(String, PathFormat) [AlphaFS] Gets a list of processes that have a lock on the files specified by filePath . Declaration public static Collection<Process> GetProcessForFileLock(string filePath, PathFormat pathFormat) Parameters Type Name Description String filePath The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Collection < Process > null when no processes found that are locking the file specified by filePath . A list of processes locking the file specified by filePath . Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException InvalidOperationException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetProcessForFileLockTransacted(KernelTransaction, Collection<String>) [AlphaFS] Gets a list of processes that have a lock on the file(s) specified by filePaths . Declaration public static Collection<Process> GetProcessForFileLockTransacted(KernelTransaction transaction, Collection<string> filePaths) Parameters Type Name Description KernelTransaction transaction The transaction. Collection < String > filePaths A list with one or more file paths. Returns Type Description Collection < Process > null when no processes found that are locking the file(s) specified by filePaths . A list of processes locking the file(s) specified by filePaths . Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException InvalidOperationException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetProcessForFileLockTransacted(KernelTransaction, Collection<String>, PathFormat) [AlphaFS] Gets a list of processes that have a lock on the file(s) specified by filePaths . Declaration public static Collection<Process> GetProcessForFileLockTransacted(KernelTransaction transaction, Collection<string> filePaths, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. Collection < String > filePaths A list with one or more file paths. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Collection < Process > null when no processes found that are locking the file(s) specified by filePaths . A list of processes locking the file(s) specified by filePaths . Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException InvalidOperationException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetProcessForFileLockTransacted(KernelTransaction, String) [AlphaFS] Gets a list of processes that have a lock on the files specified by filePath . Declaration public static Collection<Process> GetProcessForFileLockTransacted(KernelTransaction transaction, string filePath) Parameters Type Name Description KernelTransaction transaction The transaction. String filePath The path to the file. Returns Type Description Collection < Process > null when no processes found that are locking the file specified by filePath . A list of processes locking the file specified by filePath . Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException InvalidOperationException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetProcessForFileLockTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Gets a list of processes that have a lock on the files specified by filePath . Declaration public static Collection<Process> GetProcessForFileLockTransacted(KernelTransaction transaction, string filePath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String filePath The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Collection < Process > null when no processes found that are locking the file specified by filePath . A list of processes locking the file specified by filePath . Exceptions Type Condition ArgumentException ArgumentNullException ArgumentOutOfRangeException InvalidOperationException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetSize(SafeFileHandle) [AlphaFS] Retrieves the size of the specified file. Declaration [SecurityCritical] public static long GetSize(SafeFileHandle handle) Parameters Type Name Description SafeFileHandle handle The SafeFileHandle to the file. Returns Type Description Int64 The file size, in bytes. | Improve this Doc View Source GetSize(String) [AlphaFS] Retrieves the size of the specified file. Declaration [SecurityCritical] public static long GetSize(string path) Parameters Type Name Description String path The path to the file. Returns Type Description Int64 The file size, in bytes. | Improve this Doc View Source GetSize(String, PathFormat) [AlphaFS] Retrieves the size of the specified file. Declaration [SecurityCritical] public static long GetSize(string path, PathFormat pathFormat) Parameters Type Name Description String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The file size, in bytes. | Improve this Doc View Source GetSize(String, Boolean) [AlphaFS] Retrieves the size of the specified file. Declaration [SecurityCritical] public static long GetSize(string path, bool sizeOfAllStreams) Parameters Type Name Description String path The path to the file. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. Returns Type Description Int64 The file size of the first or all streams, in bytes. | Improve this Doc View Source GetSize(String, Boolean, PathFormat) [AlphaFS] Retrieves the size of the specified file. Declaration [SecurityCritical] public static long GetSize(string path, bool sizeOfAllStreams, PathFormat pathFormat) Parameters Type Name Description String path The path to the file. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The file size of the first or all streams, in bytes. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String) [AlphaFS] Retrieves the size of the specified file. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. Returns Type Description Int64 The file size, in bytes. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Retrieves the size of the specified file. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The file size, in bytes. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String, Boolean) [AlphaFS] Retrieves the size of the specified file. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path, bool sizeOfAllStreams) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. Returns Type Description Int64 The file size of the first or all streams, in bytes. | Improve this Doc View Source GetSizeTransacted(KernelTransaction, String, Boolean, PathFormat) [AlphaFS] Retrieves the size of the specified file. Declaration [SecurityCritical] public static long GetSizeTransacted(KernelTransaction transaction, string path, bool sizeOfAllStreams, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. Boolean sizeOfAllStreams true to retrieve the size of all alternate data streams, false to get the size of the first stream. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Int64 The file size of the first or all streams, in bytes. | Improve this Doc View Source ImportEncryptedFileRaw(Stream, String) [AlphaFS] Restores (import) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ImportEncryptedFileRaw(Stream inputStream, string destinationFilePath) Parameters Type Name Description Stream inputStream The stream to read previously backed up data from. String destinationFilePath The path of the destination file to restore to. Remarks If the caller does not have access to the key for the file, the caller needs Backup to restore encrypted files. See PrivilegeEnabler . To restore an encrypted file call one of the overloads and specify the file to restore along with the destination stream of the restored data. This function is intended for the restoration of only encrypted files; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source ImportEncryptedFileRaw(Stream, String, PathFormat) [AlphaFS] Restores (import) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ImportEncryptedFileRaw(Stream inputStream, string destinationFilePath, PathFormat pathFormat) Parameters Type Name Description Stream inputStream The stream to read previously backed up data from. String destinationFilePath The path of the destination file to restore to. PathFormat pathFormat The path format of the destinationFilePath parameter. Remarks If the caller does not have access to the key for the file, the caller needs Backup to restore encrypted files. See PrivilegeEnabler . To restore an encrypted file call one of the overloads and specify the file to restore along with the destination stream of the restored data. This function is intended for the restoration of only encrypted files; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source ImportEncryptedFileRaw(Stream, String, Boolean) [AlphaFS] Restores (import) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ImportEncryptedFileRaw(Stream inputStream, string destinationFilePath, bool overwriteHidden) Parameters Type Name Description Stream inputStream The stream to read previously backed up data from. String destinationFilePath The path of the destination file to restore to. Boolean overwriteHidden If set to true a hidden file will be overwritten on import. Remarks If the caller does not have access to the key for the file, the caller needs Backup to restore encrypted files. See PrivilegeEnabler . To restore an encrypted file call one of the overloads and specify the file to restore along with the destination stream of the restored data. This function is intended for the restoration of only encrypted files; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source ImportEncryptedFileRaw(Stream, String, Boolean, PathFormat) [AlphaFS] Restores (import) encrypted files. This is one of a group of Encrypted File System (EFS) functions that is intended to implement backup and restore functionality, while maintaining files in their encrypted state. Declaration public static void ImportEncryptedFileRaw(Stream inputStream, string destinationFilePath, bool overwriteHidden, PathFormat pathFormat) Parameters Type Name Description Stream inputStream The stream to read previously backed up data from. String destinationFilePath The path of the destination file to restore to. Boolean overwriteHidden If set to true a hidden file will be overwritten on import. PathFormat pathFormat The path format of the destinationFilePath parameter. Remarks If the caller does not have access to the key for the file, the caller needs Backup to restore encrypted files. See PrivilegeEnabler . To restore an encrypted file call one of the overloads and specify the file to restore along with the destination stream of the restored data. This function is intended for the restoration of only encrypted files; see BackupFileStream for backup of unencrypted files. | Improve this Doc View Source IsLocked(String) [AlphaFS] Determines whether the specified file is in use (locked). Declaration [SecurityCritical] public static bool IsLocked(string path) Parameters Type Name Description String path The file to check. Returns Type Description Boolean Returns true if the specified file is in use (locked); otherwise, false Exceptions Type Condition IOException Exception | Improve this Doc View Source IsLocked(String, PathFormat) [AlphaFS] Determines whether the specified file is in use (locked). Declaration [SecurityCritical] public static bool IsLocked(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to check. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if the specified file is in use (locked); otherwise, false Exceptions Type Condition FileNotFoundException IOException Exception | Improve this Doc View Source IsLockedTransacted(KernelTransaction, String) [AlphaFS] Determines whether the specified file is in use (locked). Declaration [SecurityCritical] public static bool IsLockedTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to check. Returns Type Description Boolean Returns true if the specified file is in use (locked); otherwise, false Exceptions Type Condition FileNotFoundException IOException Exception | Improve this Doc View Source IsLockedTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Determines whether the specified file is in use (locked). Declaration [SecurityCritical] public static bool IsLockedTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to check. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if the specified file is in use (locked); otherwise, false Exceptions Type Condition FileNotFoundException IOException Exception | Improve this Doc View Source Move(String, String) Moves a specified file to a new location, providing the option to specify a new file name. This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Declaration [SecurityCritical] public static void Move(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, PathFormat pathFormat) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, Int32, Int32) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, int retry, int retryTimeout) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, Int32, Int32, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, Int32, Int32, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, MoveOptions, Int32, Int32, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, MoveOptions moveOptions, int retry, int retryTimeout, PathFormat pathFormat) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, Int32, Int32) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. A CopyMoveResult class with the status of the Move action. This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, int retry, int retryTimeout) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. Returns Type Description CopyMoveResult Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, Int32, Int32, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, Int32, Int32, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Move(String, String, Int32, Int32, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult Move(string sourcePath, string destinationPath, int retry, int retryTimeout, PathFormat pathFormat) Parameters Type Name Description String sourcePath The name of the file to move. String destinationPath The new path for the file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, Int32, Int32) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, int retry, int retryTimeout) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, Int32, Int32, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, Int32, Int32, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, MoveOptions, Int32, Int32, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, MoveOptions moveOptions, int retry, int retryTimeout, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. MoveOptions moveOptions MoveOptions that specify how the file is to be moved. This parameter can be null . Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, Int32, Int32) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, int retry, int retryTimeout) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, Int32, Int32, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, Int32, Int32, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, int retry, int retryTimeout, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the file has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTransacted(KernelTransaction, String, String, Int32, Int32, PathFormat) [AlphaFS] Moves a specified file to a new location, providing the option to specify a new file name. Declaration [SecurityCritical] public static CopyMoveResult MoveTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, int retry, int retryTimeout, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The name of the file to move. String destinationPath The new path for the file. Int32 retry The number of retries on failed copies. Int32 retryTimeout The wait time in seconds between retries. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with the status of the Move action. Remarks This method works across disk volumes. Note that if you attempt to replace a file by moving a file of the same name into that directory, you get an IOException . You cannot use the Move method to overwrite an existing file. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException FileNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Open(String, FileMode) Opens a FileStream on the specified path with read/write access. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode) Parameters Type Name Description String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. Returns Type Description FileStream A FileStream opened in the specified mode and path, with read/write access and not shared. | Improve this Doc View Source Open(String, FileMode, PathFormat) [AlphaFS] Opens a FileStream on the specified path with read/write access. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream opened in the specified mode and path, with read/write access and not shared. | Improve this Doc View Source Open(String, FileMode, FileAccess) Opens a FileStream on the specified path, with the specified mode and access. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access) Parameters Type Name Description String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. Returns Type Description FileStream An unshared FileStream that provides access to the specified file, with the specified mode and access. | Improve this Doc View Source Open(String, FileMode, FileAccess, PathFormat) [AlphaFS] Opens a FileStream on the specified path, with the specified mode and access. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream An unshared FileStream that provides access to the specified file, with the specified mode and access. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare) Opens a FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share) Parameters Type Name Description String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A FileShare value specifying the type of access other threads have to the file. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, ExtendedFileAttributes, PathFormat) [AlphaFS] Opens a FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, ExtendedFileAttributes extendedAttributes, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A FileShare value specifying the type of access other threads have to the file. ExtendedFileAttributes extendedAttributes The extended attributes. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, PathFormat) [AlphaFS] Opens a FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A FileShare value specifying the type of access other threads have to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, Int32) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, Int32, ExtendedFileAttributes) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes The extended attributes specifying additional options. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, Int32, ExtendedFileAttributes, PathFormat) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes The extended attributes specifying additional options. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, Int32, PathFormat) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, Int32, Boolean) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. Boolean useAsync Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be opened synchronously depending on the platform. When opened asynchronously, the BeginRead and BeginWrite methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, Int32, Boolean, PathFormat) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. Boolean useAsync Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be opened synchronously depending on the platform. When opened asynchronously, the BeginRead and BeginWrite methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, Int32, FileOptions) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileAccess, FileShare, Int32, FileOptions, PathFormat) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileSystemRights, FileShare, Int32, ExtendedFileAttributes) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes Extended attributes specifying additional options. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileSystemRights, FileShare, Int32, ExtendedFileAttributes, PathFormat) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes Extended attributes specifying additional options. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileSystemRights, FileShare, Int32, ExtendedFileAttributes, FileSecurity) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes, FileSecurity security) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes Extended attributes specifying additional options. FileSecurity security A value that determines the access control and audit security for the file. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileSystemRights, FileShare, Int32, ExtendedFileAttributes, FileSecurity, PathFormat) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes, FileSecurity security, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes Extended attributes specifying additional options. FileSecurity security A value that determines the access control and audit security for the file. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, FileOptions options) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, PathFormat) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, FileOptions options, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, FileOptions options, FileSecurity security) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. FileSecurity security A value that determines the access control and audit security for the file. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source Open(String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity, PathFormat) [AlphaFS] Opens a FileStream on the specified path using the specified creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security. Declaration [SecurityCritical] public static FileStream Open(string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, FileOptions options, FileSecurity security, PathFormat pathFormat) Parameters Type Name Description String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. FileSecurity security A value that determines the access control and audit security for the file. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenBackupRead(String) [AlphaFS] Opens the specified file for reading purposes bypassing security attributes. This method is simpler to use then BackupFileStream to read only file's data stream. Declaration [SecurityCritical] public static FileStream OpenBackupRead(string path) Parameters Type Name Description String path The file path to open. Returns Type Description FileStream A FileStream on the specified path, having the read-only mode and sharing options. | Improve this Doc View Source OpenBackupRead(String, PathFormat) [AlphaFS] Opens the specified file for reading purposes bypassing security attributes. Declaration [SecurityCritical] public static FileStream OpenBackupRead(string path, PathFormat pathFormat) Parameters Type Name Description String path The file path to open. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream on the specified path, having the read-only mode and sharing options. | Improve this Doc View Source OpenBackupReadTransacted(KernelTransaction, String) [AlphaFS] Opens the specified file for reading purposes bypassing security attributes. Declaration [SecurityCritical] public static FileStream OpenBackupReadTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file path to open. Returns Type Description FileStream A FileStream on the specified path, having the read-only mode and sharing options. | Improve this Doc View Source OpenBackupReadTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Opens the specified file for reading purposes bypassing security attributes. Declaration [SecurityCritical] public static FileStream OpenBackupReadTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file path to open. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream on the specified path, having the read-only mode and sharing options. | Improve this Doc View Source OpenRead(String) Opens an existing file for reading. Declaration [SecurityCritical] public static FileStream OpenRead(string path) Parameters Type Name Description String path The file to be opened for reading. Returns Type Description FileStream A read-only FileStream on the specified path. Remarks This method is equivalent to the FileStream (string, FileMode, FileAccess, FileShare) constructor overload with a FileMode value of Open, a FileAccess value of Read and a FileShare value of Read. | Improve this Doc View Source OpenRead(String, PathFormat) [AlphaFS] Opens an existing file for reading. Declaration [SecurityCritical] public static FileStream OpenRead(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to be opened for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A read-only FileStream on the specified path. Remarks This method is equivalent to the FileStream (string, FileMode, FileAccess, FileShare) constructor overload with a FileMode value of Open, a FileAccess value of Read and a FileShare value of Read. | Improve this Doc View Source OpenReadTransacted(KernelTransaction, String) [AlphaFS] Opens an existing file for reading. Declaration [SecurityCritical] public static FileStream OpenReadTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for reading. Returns Type Description FileStream A read-only FileStream on the specified path. Remarks This method is equivalent to the FileStream (string, FileMode, FileAccess, FileShare) constructor overload with a FileMode value of Open, a FileAccess value of Read and a FileShare value of Read. | Improve this Doc View Source OpenReadTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Opens an existing file for reading. Declaration [SecurityCritical] public static FileStream OpenReadTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A read-only FileStream on the specified path. Remarks This method is equivalent to the FileStream (string, FileMode, FileAccess, FileShare) constructor overload with a FileMode value of Open, a FileAccess value of Read and a FileShare value of Read. | Improve this Doc View Source OpenText(String) Opens an existing UTF-8 encoded text file for reading. Declaration [SecurityCritical] public static StreamReader OpenText(string path) Parameters Type Name Description String path The file to be opened for reading. Returns Type Description StreamReader A StreamReader on the specified path. Remarks This method is equivalent to the StreamReader (String) constructor overload. | Improve this Doc View Source OpenText(String, PathFormat) [AlphaFS] Opens an existing UTF-8 encoded text file for reading. Declaration [SecurityCritical] public static StreamReader OpenText(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to be opened for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamReader A StreamReader on the specified path. Remarks This method is equivalent to the StreamReader (String) constructor overload. | Improve this Doc View Source OpenText(String, Encoding) [AlphaFS] Opens an existing Encoding encoded text file for reading. Declaration [SecurityCritical] public static StreamReader OpenText(string path, Encoding encoding) Parameters Type Name Description String path The file to be opened for reading. Encoding encoding The Encoding applied to the contents of the file. Returns Type Description StreamReader A StreamReader on the specified path. Remarks This method is equivalent to the StreamReader (String) constructor overload. | Improve this Doc View Source OpenText(String, Encoding, PathFormat) [AlphaFS] Opens an existing Encoding encoded text file for reading. Declaration [SecurityCritical] public static StreamReader OpenText(string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to be opened for reading. Encoding encoding The Encoding applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamReader A StreamReader on the specified path. Remarks This method is equivalent to the StreamReader (String) constructor overload. | Improve this Doc View Source OpenTextTransacted(KernelTransaction, String) [AlphaFS] Opens an existing UTF-8 encoded text file for reading. Declaration public static StreamReader OpenTextTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for reading. Returns Type Description StreamReader A StreamReader on the specified path. Remarks This method is equivalent to the StreamReader (String) constructor overload. | Improve this Doc View Source OpenTextTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Opens an existing UTF-8 encoded text file for reading. Declaration public static StreamReader OpenTextTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamReader A StreamReader on the specified path. Remarks This method is equivalent to the StreamReader (String) constructor overload. | Improve this Doc View Source OpenTextTransacted(KernelTransaction, String, Encoding) [AlphaFS] Opens an existing Encoding encoded text file for reading. Declaration public static StreamReader OpenTextTransacted(KernelTransaction transaction, string path, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for reading. Encoding encoding The Encoding applied to the contents of the file. Returns Type Description StreamReader A StreamReader on the specified path. Remarks This method is equivalent to the StreamReader (String) constructor overload. | Improve this Doc View Source OpenTextTransacted(KernelTransaction, String, Encoding, PathFormat) [AlphaFS] Opens an existing Encoding encoded text file for reading. Declaration public static StreamReader OpenTextTransacted(KernelTransaction transaction, string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for reading. Encoding encoding The Encoding applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description StreamReader A StreamReader on the specified path. Remarks This method is equivalent to the StreamReader (String) constructor overload. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode) [AlphaFS] (Transacted) Opens a FileStream on the specified path with read/write access. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. Returns Type Description FileStream A FileStream opened in the specified mode and path, with read/write access and not shared. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path with read/write access. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream opened in the specified mode and path, with read/write access and not shared. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess) [AlphaFS] (Transacted) Opens a FileStream on the specified path, with the specified mode and access. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. Returns Type Description FileStream An unshared FileStream that provides access to the specified file, with the specified mode and access. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path, with the specified mode and access. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream An unshared FileStream that provides access to the specified file, with the specified mode and access. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare) [AlphaFS] (Transacted) Opens a FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A FileShare value specifying the type of access other threads have to the file. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, ExtendedFileAttributes, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, ExtendedFileAttributes extendedAttributes, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A FileShare value specifying the type of access other threads have to the file. ExtendedFileAttributes extendedAttributes The extended attributes. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A FileMode value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A FileShare value specifying the type of access other threads have to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, Int32) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, int bufferSize) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, Int32, ExtendedFileAttributes) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes The extended attributes specifying additional options. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, Int32, ExtendedFileAttributes, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes The extended attributes specifying additional options. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, Int32, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, Int32, Boolean) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. Boolean useAsync Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be opened synchronously depending on the platform. When opened asynchronously, the BeginRead and BeginWrite methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, Int32, Boolean, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, bool useAsync, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. Boolean useAsync Specifies whether to use asynchronous I/O or synchronous I/O. However, note that the underlying operating system might not support asynchronous I/O, so when specifying true, the handle might be opened synchronously depending on the platform. When opened asynchronously, the BeginRead and BeginWrite methods perform better on large reads or writes, but they might be much slower for small reads or writes. If the application is designed to take advantage of asynchronous I/O, set the useAsync parameter to true. Using asynchronous I/O correctly can speed up applications by as much as a factor of 10, but using it without redesigning the application for asynchronous I/O can decrease performance by as much as a factor of 10. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, Int32, FileOptions) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileAccess, FileShare, Int32, FileOptions, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, FileOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileAccess access A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileSystemRights, FileShare, Int32, ExtendedFileAttributes) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes Extended attributes specifying additional options. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileSystemRights, FileShare, Int32, ExtendedFileAttributes, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes Extended attributes specifying additional options. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileSystemRights, FileShare, Int32, ExtendedFileAttributes, FileSecurity) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes, FileSecurity security) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes Extended attributes specifying additional options. FileSecurity security A value that determines the access control and audit security for the file. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileSystemRights, FileShare, Int32, ExtendedFileAttributes, FileSecurity, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, ExtendedFileAttributes extendedAttributes, FileSecurity security, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. ExtendedFileAttributes extendedAttributes Extended attributes specifying additional options. FileSecurity security A value that determines the access control and audit security for the file. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileSystemRights, FileShare, Int32, FileOptions) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, FileOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, FileOptions options, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, read/write and sharing permission, and buffer size. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, FileOptions options, FileSecurity security) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. FileSecurity security A value that determines the access control and audit security for the file. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenTransacted(KernelTransaction, String, FileMode, FileSystemRights, FileShare, Int32, FileOptions, FileSecurity, PathFormat) [AlphaFS] (Transacted) Opens a FileStream on the specified path using the specified creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security. Declaration [SecurityCritical] public static FileStream OpenTransacted(KernelTransaction transaction, string path, FileMode mode, FileSystemRights rights, FileShare share, int bufferSize, FileOptions options, FileSecurity security, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open. FileMode mode A constant that determines how to open or create the file. FileSystemRights rights A FileAccess value that specifies the operations that can be performed on the file. FileShare share A constant that determines how the file will be shared by processes. Int32 bufferSize A positive Int32 value greater than 0 indicating the buffer size. The default buffer size is 4096. FileOptions options A value that specifies additional file options. FileSecurity security A value that determines the access control and audit security for the file. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description FileStream A FileStream on the specified path, having the specified mode with read, write, or read/write access and the specified sharing option. | Improve this Doc View Source OpenWrite(String) Opens an existing file or creates a new file for writing. Declaration [SecurityCritical] public static FileStream OpenWrite(string path) Parameters Type Name Description String path The file to be opened for writing. Returns Type Description FileStream An unshared FileStream object on the specified path with Write access. Remarks This method is equivalent to the FileStream (String, FileMode, FileAccess, FileShare) constructor overload with file mode set to OpenOrCreate, the access set to Write, and the share mode set to None. | Improve this Doc View Source OpenWrite(String, PathFormat) [AlphaFS] Opens an existing file or creates a new file for writing. Declaration [SecurityCritical] public static FileStream OpenWrite(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to be opened for writing. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream An unshared FileStream object on the specified path with Write access. Remarks This method is equivalent to the FileStream (String, FileMode, FileAccess, FileShare) constructor overload with file mode set to OpenOrCreate, the access set to Write, and the share mode set to None. | Improve this Doc View Source OpenWriteTransacted(KernelTransaction, String) [AlphaFS] Opens an existing file or creates a new file for writing. Declaration [SecurityCritical] public static FileStream OpenWriteTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for writing. Returns Type Description FileStream An unshared FileStream object on the specified path with Write access. Remarks This method is equivalent to the FileStream (String, FileMode, FileAccess, FileShare) constructor overload with file mode set to OpenOrCreate, the access set to Write, and the share mode set to None. | Improve this Doc View Source OpenWriteTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Opens an existing file or creates a new file for writing. Declaration [SecurityCritical] public static FileStream OpenWriteTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to be opened for writing. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description FileStream An unshared FileStream object on the specified path with Write access. Remarks This method is equivalent to the FileStream (String, FileMode, FileAccess, FileShare) constructor overload with file mode set to OpenOrCreate, the access set to Write, and the share mode set to None. | Improve this Doc View Source ReadAllBytes(String) Opens a binary file, reads the contents of the file into a byte array, and then closes the file. Declaration [SecurityCritical] public static byte[] ReadAllBytes(string path) Parameters Type Name Description String path The file to open for reading. Returns Type Description Byte [] A byte array containing the contents of the file. | Improve this Doc View Source ReadAllBytes(String, PathFormat) [AlphaFS] Opens a binary file, reads the contents of the file into a byte array, and then closes the file. Declaration [SecurityCritical] public static byte[] ReadAllBytes(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to open for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Byte [] A byte array containing the contents of the file. | Improve this Doc View Source ReadAllBytesTransacted(KernelTransaction, String) [AlphaFS] Opens a binary file, reads the contents of the file into a byte array, and then closes the file. Declaration [SecurityCritical] public static byte[] ReadAllBytesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. Returns Type Description Byte [] A byte array containing the contents of the file. | Improve this Doc View Source ReadAllBytesTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Opens a binary file, reads the contents of the file into a byte array, and then closes the file. Declaration [SecurityCritical] public static byte[] ReadAllBytesTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Byte [] A byte array containing the contents of the file. | Improve this Doc View Source ReadAllLines(String) Opens a text file, reads all lines of the file, and then closes the file. Declaration [SecurityCritical] public static string[] ReadAllLines(string path) Parameters Type Name Description String path The file to open for reading. Returns Type Description String [] All lines of the file. | Improve this Doc View Source ReadAllLines(String, PathFormat) [AlphaFS] Opens a text file, reads all lines of the file, and then closes the file. Declaration [SecurityCritical] public static string[] ReadAllLines(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to open for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String [] All lines of the file. | Improve this Doc View Source ReadAllLines(String, Encoding) Opens a file, reads all lines of the file with the specified encoding, and then closes the file. Declaration [SecurityCritical] public static string[] ReadAllLines(string path, Encoding encoding) Parameters Type Name Description String path The file to open for reading. Encoding encoding The Encoding applied to the contents of the file. Returns Type Description String [] All lines of the file. | Improve this Doc View Source ReadAllLines(String, Encoding, PathFormat) [AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file. Declaration [SecurityCritical] public static string[] ReadAllLines(string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to open for reading. Encoding encoding The Encoding applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String [] All lines of the file. | Improve this Doc View Source ReadAllLinesTransacted(KernelTransaction, String) [AlphaFS] Opens a text file, reads all lines of the file, and then closes the file. Declaration [SecurityCritical] public static string[] ReadAllLinesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. Returns Type Description String [] All lines of the file. | Improve this Doc View Source ReadAllLinesTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Opens a text file, reads all lines of the file, and then closes the file. Declaration [SecurityCritical] public static string[] ReadAllLinesTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String [] All lines of the file. | Improve this Doc View Source ReadAllLinesTransacted(KernelTransaction, String, Encoding) [AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file. Declaration [SecurityCritical] public static string[] ReadAllLinesTransacted(KernelTransaction transaction, string path, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. Encoding encoding The Encoding applied to the contents of the file. Returns Type Description String [] All lines of the file. | Improve this Doc View Source ReadAllLinesTransacted(KernelTransaction, String, Encoding, PathFormat) [AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file. Declaration [SecurityCritical] public static string[] ReadAllLinesTransacted(KernelTransaction transaction, string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. Encoding encoding The Encoding applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String [] All lines of the file. | Improve this Doc View Source ReadAllText(String) Opens a text file, reads all lines of the file, and then closes the file. Declaration [SecurityCritical] public static string ReadAllText(string path) Parameters Type Name Description String path The file to open for reading. Returns Type Description String All lines of the file. | Improve this Doc View Source ReadAllText(String, PathFormat) [AlphaFS] Opens a text file, reads all lines of the file, and then closes the file. Declaration [SecurityCritical] public static string ReadAllText(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to open for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String All lines of the file. | Improve this Doc View Source ReadAllText(String, Encoding) Opens a file, reads all lines of the file with the specified encoding, and then closes the file. Declaration [SecurityCritical] public static string ReadAllText(string path, Encoding encoding) Parameters Type Name Description String path The file to open for reading. Encoding encoding The Encoding applied to the contents of the file. Returns Type Description String All lines of the file. | Improve this Doc View Source ReadAllText(String, Encoding, PathFormat) [AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file. Declaration [SecurityCritical] public static string ReadAllText(string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to open for reading. Encoding encoding The Encoding applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String All lines of the file. | Improve this Doc View Source ReadAllTextTransacted(KernelTransaction, String) [AlphaFS] Opens a text file, reads all lines of the file, and then closes the file. Declaration [SecurityCritical] public static string ReadAllTextTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. Returns Type Description String All lines of the file. | Improve this Doc View Source ReadAllTextTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Opens a text file, reads all lines of the file, and then closes the file. Declaration [SecurityCritical] public static string ReadAllTextTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String All lines of the file. | Improve this Doc View Source ReadAllTextTransacted(KernelTransaction, String, Encoding) [AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file. Declaration [SecurityCritical] public static string ReadAllTextTransacted(KernelTransaction transaction, string path, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. Encoding encoding The Encoding applied to the contents of the file. Returns Type Description String All lines of the file. | Improve this Doc View Source ReadAllTextTransacted(KernelTransaction, String, Encoding, PathFormat) [AlphaFS] Opens a file, reads all lines of the file with the specified encoding, and then closes the file. Declaration [SecurityCritical] public static string ReadAllTextTransacted(KernelTransaction transaction, string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to open for reading. Encoding encoding The Encoding applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String All lines of the file. | Improve this Doc View Source ReadLines(String) Reads the lines of a file. Declaration [SecurityCritical] public static IEnumerable<string> ReadLines(string path) Parameters Type Name Description String path The file to read. Returns Type Description IEnumerable < String > All the lines of the file, or the lines that are the result of a query. | Improve this Doc View Source ReadLines(String, PathFormat) [AlphaFS] Reads the lines of a file. Declaration [SecurityCritical] public static IEnumerable<string> ReadLines(string path, PathFormat pathFormat) Parameters Type Name Description String path The file to read. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > All the lines of the file, or the lines that are the result of a query. | Improve this Doc View Source ReadLines(String, Encoding) Read the lines of a file that has a specified encoding. Declaration [SecurityCritical] public static IEnumerable<string> ReadLines(string path, Encoding encoding) Parameters Type Name Description String path The file to read. Encoding encoding The encoding that is applied to the contents of the file. Returns Type Description IEnumerable < String > All the lines of the file, or the lines that are the result of a query. | Improve this Doc View Source ReadLines(String, Encoding, PathFormat) [AlphaFS] Read the lines of a file that has a specified encoding. Declaration [SecurityCritical] public static IEnumerable<string> ReadLines(string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to read. Encoding encoding The encoding that is applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > All the lines of the file, or the lines that are the result of a query. | Improve this Doc View Source ReadLinesTransacted(KernelTransaction, String) [AlphaFS] Reads the lines of a file. Declaration [SecurityCritical] public static IEnumerable<string> ReadLinesTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to read. Returns Type Description IEnumerable < String > All the lines of the file, or the lines that are the result of a query. | Improve this Doc View Source ReadLinesTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Reads the lines of a file. Declaration [SecurityCritical] public static IEnumerable<string> ReadLinesTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to read. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > All the lines of the file, or the lines that are the result of a query. | Improve this Doc View Source ReadLinesTransacted(KernelTransaction, String, Encoding) [AlphaFS] Read the lines of a file that has a specified encoding. Declaration [SecurityCritical] public static IEnumerable<string> ReadLinesTransacted(KernelTransaction transaction, string path, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to read. Encoding encoding The encoding that is applied to the contents of the file. Returns Type Description IEnumerable < String > All the lines of the file, or the lines that are the result of a query. | Improve this Doc View Source ReadLinesTransacted(KernelTransaction, String, Encoding, PathFormat) [AlphaFS] Read the lines of a file that has a specified encoding. Declaration [SecurityCritical] public static IEnumerable<string> ReadLinesTransacted(KernelTransaction transaction, string path, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to read. Encoding encoding The encoding that is applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description IEnumerable < String > All the lines of the file, or the lines that are the result of a query. | Improve this Doc View Source Replace(String, String, String) Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file. Declaration [SecurityCritical] public static void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) Parameters Type Name Description String sourceFileName The name of a file that replaces the file specified by destinationFileName . String destinationFileName The name of the file being replaced. String destinationBackupFileName The name of the backup file. Remarks The Replace method replaces the contents of a specified file with the contents of another file. It also creates a backup of the file that was replaced. | Improve this Doc View Source Replace(String, String, String, Boolean) Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors. Declaration [SecurityCritical] public static void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) Parameters Type Name Description String sourceFileName The name of a file that replaces the file specified by destinationFileName . String destinationFileName The name of the file being replaced. String destinationBackupFileName The name of the backup file. Boolean ignoreMetadataErrors true to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, false . Remarks The Replace method replaces the contents of a specified file with the contents of another file. It also creates a backup of the file that was replaced. | Improve this Doc View Source Replace(String, String, String, Boolean, PathFormat) [AlphaFS] Replaces the contents of a specified file with the contents of another file, deleting the original file, and creating a backup of the replaced file and optionally ignores merge errors. Declaration [SecurityCritical] public static void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors, PathFormat pathFormat) Parameters Type Name Description String sourceFileName The name of a file that replaces the file specified by destinationFileName . String destinationFileName The name of the file being replaced. String destinationBackupFileName The name of the backup file. Boolean ignoreMetadataErrors true to ignore merge errors (such as attributes and access control lists (ACLs)) from the replaced file to the replacement file; otherwise, false . PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The Replace method replaces the contents of a specified file with the contents of another file. It also creates a backup of the file that was replaced. | Improve this Doc View Source SetAccessControl(SafeFileHandle, FileSecurity) Applies access control list (ACL) entries described by a FileSecurity FileSecurity object to the specified file. Declaration [SecurityCritical] public static void SetAccessControl(SafeFileHandle handle, FileSecurity fileSecurity) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle to a file to add or remove access control list (ACL) entries from. FileSecurity fileSecurity A FileSecurity object that describes an ACL entry to apply to the file described by the handle parameter. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException | Improve this Doc View Source SetAccessControl(SafeFileHandle, FileSecurity, AccessControlSections) Applies access control list (ACL) entries described by a FileSecurity FileSecurity object to the specified file. Declaration [SecurityCritical] public static void SetAccessControl(SafeFileHandle handle, FileSecurity fileSecurity, AccessControlSections includeSections) Parameters Type Name Description SafeFileHandle handle A SafeFileHandle to a file to add or remove access control list (ACL) entries from. FileSecurity fileSecurity A FileSecurity object that describes an ACL entry to apply to the file described by the handle parameter. AccessControlSections includeSections One or more of the AccessControlSections values that specifies the type of access control list (ACL) information to set. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException | Improve this Doc View Source SetAccessControl(String, FileSecurity) Applies access control list (ACL) entries described by a FileSecurity FileSecurity object to the specified file. Declaration [SecurityCritical] public static void SetAccessControl(string path, FileSecurity fileSecurity) Parameters Type Name Description String path A file to add or remove access control list (ACL) entries from. FileSecurity fileSecurity A FileSecurity object that describes an ACL entry to apply to the file described by the path parameter. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException | Improve this Doc View Source SetAccessControl(String, FileSecurity, PathFormat) [AlphaFS] Applies access control list (ACL) entries described by a FileSecurity FileSecurity object to the specified file. Declaration [SecurityCritical] public static void SetAccessControl(string path, FileSecurity fileSecurity, PathFormat pathFormat) Parameters Type Name Description String path A file to add or remove access control list (ACL) entries from. FileSecurity fileSecurity A FileSecurity object that describes an ACL entry to apply to the file described by the path parameter. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException | Improve this Doc View Source SetAccessControl(String, FileSecurity, AccessControlSections) Applies access control list (ACL) entries described by a DirectorySecurity object to the specified directory. Declaration [SecurityCritical] public static void SetAccessControl(string path, FileSecurity fileSecurity, AccessControlSections includeSections) Parameters Type Name Description String path A directory to add or remove access control list (ACL) entries from. FileSecurity fileSecurity A FileSecurity object that describes an ACL entry to apply to the directory described by the path parameter. AccessControlSections includeSections One or more of the AccessControlSections values that specifies the type of access control list (ACL) information to set. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException | Improve this Doc View Source SetAccessControl(String, FileSecurity, AccessControlSections, PathFormat) [AlphaFS] Applies access control list (ACL) entries described by a DirectorySecurity object to the specified directory. Declaration [SecurityCritical] public static void SetAccessControl(string path, FileSecurity fileSecurity, AccessControlSections includeSections, PathFormat pathFormat) Parameters Type Name Description String path A directory to add or remove access control list (ACL) entries from. FileSecurity fileSecurity A FileSecurity object that describes an ACL entry to apply to the directory described by the path parameter. AccessControlSections includeSections One or more of the AccessControlSections values that specifies the type of access control list (ACL) information to set. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException | Improve this Doc View Source SetAttributes(String, FileAttributes) Sets the specified FileAttributes of the file or directory on the specified path. Declaration [SecurityCritical] public static void SetAttributes(string path, FileAttributes fileAttributes) Parameters Type Name Description String path The path to the file or directory. FileAttributes fileAttributes A bitwise combination of the enumeration values. Remarks Certain file attributes, such as Hidden and ReadOnly , can be combined. Other attributes, such as Normal , must be used alone. Exceptions Type Condition ArgumentException path is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). FileNotFoundException The file cannot be found. NotSupportedException path is in an invalid format. UnauthorizedAccessException path specified a file that is read-only. -or- This operation is not supported on the current platform. -or- path specified a directory. -or- The caller does not have the required permission. | Improve this Doc View Source SetAttributes(String, FileAttributes, PathFormat) [AlphaFS] Sets the specified FileAttributes of the file or directory on the specified path. Declaration [SecurityCritical] public static void SetAttributes(string path, FileAttributes fileAttributes, PathFormat pathFormat) Parameters Type Name Description String path The path to the file or directory. FileAttributes fileAttributes A bitwise combination of the enumeration values. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Certain file attributes, such as Hidden and ReadOnly , can be combined. Other attributes, such as Normal , must be used alone. Exceptions Type Condition ArgumentException path is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). FileNotFoundException The file cannot be found. NotSupportedException path is in an invalid format. UnauthorizedAccessException path specified a file that is read-only. -or- This operation is not supported on the current platform. -or- path specified a directory. -or- The caller does not have the required permission. | Improve this Doc View Source SetAttributesTransacted(KernelTransaction, String, FileAttributes) [AlphaFS] Sets the specified FileAttributes of the file on the specified path. Declaration [SecurityCritical] public static void SetAttributesTransacted(KernelTransaction transaction, string path, FileAttributes fileAttributes) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. FileAttributes fileAttributes A bitwise combination of the enumeration values. Remarks Certain file attributes, such as Hidden and ReadOnly , can be combined. Other attributes, such as Normal , must be used alone. Exceptions Type Condition ArgumentException path is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). FileNotFoundException The file cannot be found. NotSupportedException path is in an invalid format. UnauthorizedAccessException path specified a file that is read-only. -or- This operation is not supported on the current platform. -or- path specified a directory. -or- The caller does not have the required permission. | Improve this Doc View Source SetAttributesTransacted(KernelTransaction, String, FileAttributes, PathFormat) [AlphaFS] Sets the specified FileAttributes of the file on the specified path. Declaration [SecurityCritical] public static void SetAttributesTransacted(KernelTransaction transaction, string path, FileAttributes fileAttributes, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path to the file. FileAttributes fileAttributes A bitwise combination of the enumeration values. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks Certain file attributes, such as Hidden and ReadOnly , can be combined. Other attributes, such as Normal , must be used alone. Exceptions Type Condition ArgumentException path is empty, contains only white spaces, contains invalid characters, or the file attribute is invalid. DirectoryNotFoundException The specified path is invalid, (for example, it is on an unmapped drive). FileNotFoundException The file cannot be found. NotSupportedException path is in an invalid format. UnauthorizedAccessException path specified a file that is read-only. -or- This operation is not supported on the current platform. -or- path specified a directory. -or- The caller does not have the required permission. | Improve this Doc View Source SetCreationTime(String, DateTime) Sets the date and time the file was created. Declaration [SecurityCritical] public static void SetCreationTime(string path, DateTime creationTime) Parameters Type Name Description String path The file for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. | Improve this Doc View Source SetCreationTime(String, DateTime, PathFormat) [AlphaFS] Sets the date and time the file was created. Declaration [SecurityCritical] public static void SetCreationTime(string path, DateTime creationTime, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTime(String, DateTime, Boolean) [AlphaFS] Sets the date and time the file was created. Declaration [SecurityCritical] public static void SetCreationTime(string path, DateTime creationTime, bool modifyReparsePoint) Parameters Type Name Description String path The file for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetCreationTime(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time the file was created. Declaration [SecurityCritical] public static void SetCreationTime(string path, DateTime creationTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time the file was created. Declaration [SecurityCritical] public static void SetCreationTimeTransacted(KernelTransaction transaction, string path, DateTime creationTime) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. | Improve this Doc View Source SetCreationTimeTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time the file was created. Declaration [SecurityCritical] public static void SetCreationTimeTransacted(KernelTransaction transaction, string path, DateTime creationTime, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time the file was created. Declaration [SecurityCritical] public static void SetCreationTimeTransacted(KernelTransaction transaction, string path, DateTime creationTime, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetCreationTimeTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time the file was created. Declaration [SecurityCritical] public static void SetCreationTimeTransacted(KernelTransaction transaction, string path, DateTime creationTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the creation date and time information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeUtc(String, DateTime) Sets the date and time, in coordinated universal time (UTC), that the file was created. Declaration [SecurityCritical] public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc) Parameters Type Name Description String path The file for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetCreationTimeUtc(String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created. Declaration [SecurityCritical] public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeUtc(String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created. Declaration [SecurityCritical] public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc, bool modifyReparsePoint) Parameters Type Name Description String path The file for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetCreationTimeUtc(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created. Declaration [SecurityCritical] public static void SetCreationTimeUtc(string path, DateTime creationTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeUtcTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created. Declaration [SecurityCritical] public static void SetCreationTimeUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetCreationTimeUtcTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created. Declaration [SecurityCritical] public static void SetCreationTimeUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetCreationTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created. Declaration [SecurityCritical] public static void SetCreationTimeUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetCreationTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the file was created. Declaration [SecurityCritical] public static void SetCreationTimeUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the creation date and time information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTime(String, DateTime) Sets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTime(string path, DateTime lastAccessTime) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. | Improve this Doc View Source SetLastAccessTime(String, DateTime, PathFormat) [AlphaFS] Sets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTime(string path, DateTime lastAccessTime, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTime(String, DateTime, Boolean) [AlphaFS] Sets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTime(string path, DateTime lastAccessTime, bool modifyReparsePoint) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastAccessTime(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTime(string path, DateTime lastAccessTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeTransacted(KernelTransaction transaction, string path, DateTime lastAccessTime) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. | Improve this Doc View Source SetLastAccessTimeTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeTransacted(KernelTransaction transaction, string path, DateTime lastAccessTime, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeTransacted(KernelTransaction transaction, string path, DateTime lastAccessTime, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastAccessTimeTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeTransacted(KernelTransaction transaction, string path, DateTime lastAccessTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the access date and time information. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeUtc(String, DateTime) Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetLastAccessTimeUtc(String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeUtc(String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc, bool modifyReparsePoint) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastAccessTimeUtc(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeUtcTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastAccessTimeUtc) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetLastAccessTimeUtcTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastAccessTimeUtc, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastAccessTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last accessed. Declaration [SecurityCritical] public static void SetLastAccessTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastAccessTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the access date and time information. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTime(String, DateTime) Sets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTime(string path, DateTime lastWriteTime) Parameters Type Name Description String path The file for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. | Improve this Doc View Source SetLastWriteTime(String, DateTime, PathFormat) [AlphaFS] Sets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTime(string path, DateTime lastWriteTime, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTime(String, DateTime, Boolean) [AlphaFS] Sets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTime(string path, DateTime lastWriteTime, bool modifyReparsePoint) Parameters Type Name Description String path The file for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastWriteTime(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTime(string path, DateTime lastWriteTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeTransacted(KernelTransaction transaction, string path, DateTime lastWriteTime) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. | Improve this Doc View Source SetLastWriteTimeTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeTransacted(KernelTransaction transaction, string path, DateTime lastWriteTime, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeTransacted(KernelTransaction transaction, string path, DateTime lastWriteTime, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastWriteTimeTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeTransacted(KernelTransaction transaction, string path, DateTime lastWriteTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the date and time information. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeUtc(String, DateTime) Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc) Parameters Type Name Description String path The file for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetLastWriteTimeUtc(String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeUtc(String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc, bool modifyReparsePoint) Parameters Type Name Description String path The file for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastWriteTimeUtc(String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeUtcTransacted(KernelTransaction, String, DateTime) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastWriteTimeUtc) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetLastWriteTimeUtcTransacted(KernelTransaction, String, DateTime, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastWriteTimeUtc, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetLastWriteTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastWriteTimeUtc, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetLastWriteTimeUtcTransacted(KernelTransaction, String, DateTime, Boolean, PathFormat) [AlphaFS] Sets the date and time, in coordinated universal time (UTC), that the specified file was last written to. Declaration [SecurityCritical] public static void SetLastWriteTimeUtcTransacted(KernelTransaction transaction, string path, DateTime lastWriteTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the date and time information. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestamps(String, DateTime, DateTime, DateTime) [AlphaFS] Sets all the date and time stamps for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestamps(string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime) Parameters Type Name Description String path The file for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. | Improve this Doc View Source SetTimestamps(String, DateTime, DateTime, DateTime, PathFormat) [AlphaFS] Sets all the date and time stamps for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestamps(string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestamps(String, DateTime, DateTime, DateTime, Boolean) [AlphaFS] Sets all the date and time stamps for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestamps(string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, bool modifyReparsePoint) Parameters Type Name Description String path The file for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetTimestamps(String, DateTime, DateTime, DateTime, Boolean, PathFormat) [AlphaFS] Sets all the date and time stamps for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestamps(string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsTransacted(KernelTransaction, String, DateTime, DateTime, DateTime) [AlphaFS] Sets all the date and time stamps for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsTransacted(KernelTransaction transaction, string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. | Improve this Doc View Source SetTimestampsTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, PathFormat) [AlphaFS] Sets all the date and time stamps for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsTransacted(KernelTransaction transaction, string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, Boolean) [AlphaFS] Sets all the date and time stamps for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsTransacted(KernelTransaction transaction, string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetTimestampsTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, Boolean, PathFormat) [AlphaFS] Sets all the date and time stamps for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsTransacted(KernelTransaction transaction, string path, DateTime creationTime, DateTime lastAccessTime, DateTime lastWriteTime, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the dates and times information. DateTime creationTime A DateTime containing the value to set for the creation date and time of path . This value is expressed in local time. DateTime lastAccessTime A DateTime containing the value to set for the last access date and time of path . This value is expressed in local time. DateTime lastWriteTime A DateTime containing the value to set for the last write date and time of path . This value is expressed in local time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsUtc(String, DateTime, DateTime, DateTime) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsUtc(string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc) Parameters Type Name Description String path The file for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetTimestampsUtc(String, DateTime, DateTime, DateTime, PathFormat) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsUtc(string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsUtc(String, DateTime, DateTime, DateTime, Boolean, PathFormat) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsUtc(string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description String path The file for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsUtcTransacted(KernelTransaction, String, DateTime, DateTime, DateTime) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. | Improve this Doc View Source SetTimestampsUtcTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, PathFormat) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source SetTimestampsUtcTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, Boolean) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, bool modifyReparsePoint) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. | Improve this Doc View Source SetTimestampsUtcTransacted(KernelTransaction, String, DateTime, DateTime, DateTime, Boolean, PathFormat) [AlphaFS] Sets all the date and time stamps, in coordinated universal time (UTC), for the specified file, at once. Declaration [SecurityCritical] public static void SetTimestampsUtcTransacted(KernelTransaction transaction, string path, DateTime creationTimeUtc, DateTime lastAccessTimeUtc, DateTime lastWriteTimeUtc, bool modifyReparsePoint, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file for which to set the dates and times information. DateTime creationTimeUtc A DateTime containing the value to set for the creation date and time of path . This value is expressed in UTC time. DateTime lastAccessTimeUtc A DateTime containing the value to set for the last access date and time of path . This value is expressed in UTC time. DateTime lastWriteTimeUtc A DateTime containing the value to set for the last write date and time of path . This value is expressed in UTC time. Boolean modifyReparsePoint If true , the date and time information will apply to the reparse point (symlink or junction) and not the file or directory linked to. No effect if path does not refer to a reparse point. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source TransferTimestamps(String, String) [AlphaFS] Transfers the date and time stamps for the specified files. Declaration [Obsolete(\"Use new method name: CopyTimestamp\")] [SecurityCritical] public static void TransferTimestamps(string sourcePath, string destinationPath) Parameters Type Name Description String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. Remarks This method does not change last access time for the source file. | Improve this Doc View Source TransferTimestamps(String, String, PathFormat) [AlphaFS] Transfers the date and time stamps for the specified files. Declaration [Obsolete(\"Use new method name: CopyTimestamp\")] [SecurityCritical] public static void TransferTimestamps(string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method does not change last access time for the source file. | Improve this Doc View Source TransferTimestampsTransacted(KernelTransaction, String, String) [AlphaFS] Transfers the date and time stamps for the specified files. Declaration [Obsolete(\"Use new method name: CopyTimestampsTransacted\")] [SecurityCritical] public static void TransferTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. Remarks This method does not change last access time for the source file. | Improve this Doc View Source TransferTimestampsTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Transfers the date and time stamps for the specified files. Declaration [Obsolete(\"Use new method name: CopyTimestampsTransacted\")] [SecurityCritical] public static void TransferTimestampsTransacted(KernelTransaction transaction, string sourcePath, string destinationPath, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String sourcePath The source file to get the date and time stamps from. String destinationPath The destination file to set the date and time stamps. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method does not change last access time for the source file. | Improve this Doc View Source WriteAllBytes(String, Byte[]) Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllBytes(string path, byte[] bytes) Parameters Type Name Description String path The file to write to. Byte [] bytes The bytes to write to the file. | Improve this Doc View Source WriteAllBytes(String, Byte[], PathFormat) [AlphaFS] Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllBytes(string path, byte[] bytes, PathFormat pathFormat) Parameters Type Name Description String path The file to write to. Byte [] bytes The bytes to write to the file. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source WriteAllBytesTransacted(KernelTransaction, String, Byte[]) [AlphaFS] Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllBytesTransacted(KernelTransaction transaction, string path, byte[] bytes) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. Byte [] bytes The bytes to write to the file. | Improve this Doc View Source WriteAllBytesTransacted(KernelTransaction, String, Byte[], PathFormat) [AlphaFS] Creates a new file, writes the specified byte array to the file, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllBytesTransacted(KernelTransaction transaction, string path, byte[] bytes, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. Byte [] bytes The bytes to write to the file. PathFormat pathFormat Indicates the format of the path parameter(s). | Improve this Doc View Source WriteAllLines(String, IEnumerable<String>) Creates a new file, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLines(string path, IEnumerable<string> contents) Parameters Type Name Description String path The file to write to. IEnumerable < String > contents The lines to write to the file. Remarks The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLines(String, IEnumerable<String>, PathFormat) [AlphaFS] Creates a new file, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLines(string path, IEnumerable<string> contents, PathFormat pathFormat) Parameters Type Name Description String path The file to write to. IEnumerable < String > contents The lines to write to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLines(String, IEnumerable<String>, Encoding) Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLines(string path, IEnumerable<string> contents, Encoding encoding) Parameters Type Name Description String path The file to write to. IEnumerable < String > contents The lines to write to the file. Encoding encoding The character Encoding to use. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLines(String, IEnumerable<String>, Encoding, PathFormat) [AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLines(string path, IEnumerable<string> contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to write to. IEnumerable < String > contents The lines to write to the file. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLines(String, String[]) Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLines(string path, string[] contents) Parameters Type Name Description String path The file to write to. String [] contents The string array to write to the file. | Improve this Doc View Source WriteAllLines(String, String[], PathFormat) [AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLines(string path, string[] contents, PathFormat pathFormat) Parameters Type Name Description String path The file to write to. String [] contents The string array to write to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLines(String, String[], Encoding) Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLines(string path, string[] contents, Encoding encoding) Parameters Type Name Description String path The file to write to. String [] contents The string array to write to the file. Encoding encoding The character Encoding to use. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLines(String, String[], Encoding, PathFormat) [AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLines(string path, string[] contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to write to. String [] contents The string array to write to the file. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLinesTransacted(KernelTransaction, String, IEnumerable<String>) [AlphaFS] Creates a new file, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLinesTransacted(KernelTransaction transaction, string path, IEnumerable<string> contents) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. IEnumerable < String > contents The lines to write to the file. Remarks The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLinesTransacted(KernelTransaction, String, IEnumerable<String>, PathFormat) [AlphaFS] Creates a new file, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLinesTransacted(KernelTransaction transaction, string path, IEnumerable<string> contents, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. IEnumerable < String > contents The lines to write to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLinesTransacted(KernelTransaction, String, IEnumerable<String>, Encoding) [AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLinesTransacted(KernelTransaction transaction, string path, IEnumerable<string> contents, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. IEnumerable < String > contents The lines to write to the file. Encoding encoding The character Encoding to use. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLinesTransacted(KernelTransaction, String, IEnumerable<String>, Encoding, PathFormat) [AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLinesTransacted(KernelTransaction transaction, string path, IEnumerable<string> contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. IEnumerable < String > contents The lines to write to the file. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLinesTransacted(KernelTransaction, String, String[]) [AlphaFS] Creates a new file, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLinesTransacted(KernelTransaction transaction, string path, string[] contents) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. String [] contents The string array to write to the file. Remarks The default behavior of the method is to write out data by using UTF-8 encoding without a byte order mark (BOM). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLinesTransacted(KernelTransaction, String, String[], PathFormat) [AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLinesTransacted(KernelTransaction transaction, string path, string[] contents, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. String [] contents The string array to write to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLinesTransacted(KernelTransaction, String, String[], Encoding) [AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLinesTransacted(KernelTransaction transaction, string path, string[] contents, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. String [] contents The string array to write to the file. Encoding encoding The character Encoding to use. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllLinesTransacted(KernelTransaction, String, String[], Encoding, PathFormat) [AlphaFS] Creates a new file by using the specified encoding, writes a collection of strings to the file, and then closes the file. Declaration [SecurityCritical] public static void WriteAllLinesTransacted(KernelTransaction transaction, string path, string[] contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. String [] contents The string array to write to the file. Encoding encoding The character Encoding to use. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllText(String, String) Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllText(string path, string contents) Parameters Type Name Description String path The file to write to. String contents The string to write to the file. Remarks This method uses UTF-8 encoding without a Byte-Order Mark (BOM) Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllText(String, String, PathFormat) [AlphaFS] Creates a new file, writes the specified string to the file, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllText(string path, string contents, PathFormat pathFormat) Parameters Type Name Description String path The file to write to. String contents The string to write to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method uses UTF-8 encoding without a Byte-Order Mark (BOM) Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllText(String, String, Encoding) Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllText(string path, string contents, Encoding encoding) Parameters Type Name Description String path The file to write to. String contents The string to write to the file. Encoding encoding The Encoding applied to the contents of the file. | Improve this Doc View Source WriteAllText(String, String, Encoding, PathFormat) [AlphaFS] Creates a new file, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllText(string path, string contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description String path The file to write to. String contents The string to write to the file. Encoding encoding The Encoding applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllTextTransacted(KernelTransaction, String, String) [AlphaFS] Creates a new file as part of a transaction, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllTextTransacted(KernelTransaction transaction, string path, string contents) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. String contents The string to write to the file. Remarks This method uses UTF-8 encoding without a Byte-Order Mark (BOM) Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllTextTransacted(KernelTransaction, String, String, PathFormat) [AlphaFS] Creates a new file as part of a transaction, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllTextTransacted(KernelTransaction transaction, string path, string contents, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. String contents The string to write to the file. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This method uses UTF-8 encoding without a Byte-Order Mark (BOM) Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllTextTransacted(KernelTransaction, String, String, Encoding) [AlphaFS] Creates a new file as part of a transaction, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllTextTransacted(KernelTransaction transaction, string path, string contents, Encoding encoding) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. String contents The string to write to the file. Encoding encoding The Encoding applied to the contents of the file. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source WriteAllTextTransacted(KernelTransaction, String, String, Encoding, PathFormat) [AlphaFS] Creates a new file as part of a transaction, writes the specified string to the file using the specified encoding, and then closes the file. If the target file already exists, it is overwritten. Declaration [SecurityCritical] public static void WriteAllTextTransacted(KernelTransaction transaction, string path, string contents, Encoding encoding, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file to write to. String contents The string to write to the file. Encoding encoding The Encoding applied to the contents of the file. PathFormat pathFormat Indicates the format of the path parameter(s). Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException ArgumentOutOfRangeException FileNotFoundException IOException SecurityException DirectoryNotFoundException UnauthorizedAccessException PlatformNotSupportedException The operating system is older than Windows Vista."
  },
  "api/Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.ExtendedFileAttributes.html",
    "title": "Enum ExtendedFileAttributes | AlphaFS",
    "keywords": "Enum ExtendedFileAttributes Specifies how the operating system should open a file. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum ExtendedFileAttributes Fields Name Description Archive The file should be archived. Applications use this attribute to mark files for backup or removal. BackupSemantics The file is being opened or created for a backup or restore operation. The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges. You must set this flag to obtain a handle to a directory. A directory handle can be passed to some functions instead of a file handle. Compressed A file or directory that is compressed. For a file, all of the data in the file is compressed. For a directory, compression is the default for newly created files and subdirectories. DeleteOnClose The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles. If there are existing open handles to a file, the call fails unless they were all opened with the Delete share mode. Subsequent open requests for the file fail, unless the Delete share mode is specified. Device Reserved for future use. Directory The handle that identifies a directory. Encrypted The file or directory is encrypted. For a file, this means that all data in the file is encrypted. For a directory, this means that encryption is the default for newly created files and subdirectories. FirstPipeInstance ... Hidden The file is hidden. Do not include it in an ordinary directory listing. IntegrityStream The directory or user data stream is configured with integrity (only supported on ReFS volumes). It is not included in an ordinary directory listing. The integrity setting persists with the file if it's renamed. If a file is copied the destination file will have integrity set if either the source file or destination directory have integrity set. NoBuffering There are strict requirements for successfully working with files opened with the NoBuffering flag, for details see the section on \"File Buffering\" in the online MSDN documentation. None If you pass None , the set of attributes is unspecified. Normal explicitly sets no attributes. Normal The file does not have other attributes set. This attribute is valid only if used alone. NoScrubData The user data stream not to be read by the background data integrity scanner (AKA scrubber). When set on a directory it only provides inheritance. This flag is only supported on Storage Spaces and ReFS volumes. It is not included in an ordinary directory listing. NotContentIndexed The file or directory is not to be indexed by the content indexing service. Offline The data of a file is not immediately available. This attribute indicates that file data is physically moved to offline storage. This attribute is used by Remote Storage, the hierarchical storage management software. Applications should not arbitrarily change this attribute. OpenNoRecall The file data is requested, but it should continue to be located in remote storage. It should not be transported back to local storage. This flag is for use by remote storage systems. OpenReparsePoint Normal reparse point processing will not occur; an attempt to open the reparse point will be made. When a file is opened, a file handle is returned, whether or not the filter that controls the reparse point is operational. See MSDN documentation for more information. Overlapped The file or device is being opened or created for asynchronous I/O. PosixSemantics Access will occur according to POSIX rules. This includes allowing multiple files with names, differing only in case, for file systems that support that naming. Use care when using this option, because files created with this flag may not be accessible by applications that are written for MS-DOS or 16-bit Windows. RandomAccess Access is intended to be random. The system can use this as a hint to optimize file caching. ReadOnly The file is read only. Applications can read the file, but cannot write to or delete it. ReparsePoint A file or directory that has an associated reparse point, or a file that is a symbolic link. SequentialScan Access is intended to be sequential from beginning to end. The system can use this as a hint to optimize file caching. SparseFile A file that is a sparse file. System The file is part of or used exclusively by an operating system. Temporary The file is being used for temporary storage. WriteThrough Write operations will not go through any intermediate cache, they will go directly to disk."
  },
  "api/Alphaleonis.Win32.Filesystem.ErrorHandler.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.ErrorHandler.html",
    "title": "Delegate ErrorHandler | AlphaFS",
    "keywords": "Delegate ErrorHandler [AlphaFS] Represents the method that will handle an error raised during retrieving file system entries. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public delegate bool ErrorHandler(int errorCode, string errorMessage, string pathProcessed); Parameters Type Name Description Int32 errorCode String errorMessage String pathProcessed Returns Type Description Boolean true , if the error has been fully handled and the caller may proceed, The error code. The error message. The faulty path being processed. false otherwise, in which case the caller will throw the corresponding exception."
  },
  "api/Alphaleonis.Win32.Filesystem.DriveInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DriveInfo.html",
    "title": "Class DriveInfo | AlphaFS",
    "keywords": "Class DriveInfo Provides access to information on a local or remote drive. Inheritance Object DriveInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] [SecurityCritical] public sealed class DriveInfo Remarks This class models a drive and provides methods and properties to query for drive information. Use DriveInfo to determine what drives are available, and what type of drives they are. You can also query to determine the capacity and available free space on the drive. Constructors | Improve this Doc View Source DriveInfo(String) Provides access to information on the specified drive. Declaration [SecurityCritical] public DriveInfo(string driveName) Parameters Type Name Description String driveName A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\\\server\\share Exceptions Type Condition ArgumentNullException ArgumentException Properties | Improve this Doc View Source AvailableFreeSpace Indicates the amount of available free space on a drive. Declaration public long AvailableFreeSpace { get; } Property Value Type Description Int64 The amount of free space available on the drive, in bytes. Remarks This property indicates the amount of free space available on the drive. Note that this number may be different from the TotalFreeSpace number because this property takes into account disk quotas. | Improve this Doc View Source DiskSpaceInfo [AlphaFS] Returns the instance. Declaration public DiskSpaceInfo DiskSpaceInfo { get; } Property Value Type Description DiskSpaceInfo | Improve this Doc View Source DosDeviceName [AlphaFS] The MS-DOS device name. Declaration public string DosDeviceName { get; } Property Value Type Description String | Improve this Doc View Source DriveFormat Gets the name of the file system, such as NTFS or FAT32. Declaration public string DriveFormat { get; } Property Value Type Description String Remarks Use DriveFormat to determine what formatting a drive uses. | Improve this Doc View Source DriveType Gets the drive type. Declaration public DriveType DriveType { get; } Property Value Type Description DriveType One of the DriveType values. Remarks The DriveType property indicates whether a drive is any of: CDRom, Fixed, Unknown, Network, NoRootDirectory, Ram, Removable, or Unknown. Values are listed in the DriveType enumeration. | Improve this Doc View Source IsDosDeviceSubstitute [AlphaFS] Indicates if this drive is a SUBST.EXE / DefineDosDevice drive mapping. Declaration public bool IsDosDeviceSubstitute { get; } Property Value Type Description Boolean | Improve this Doc View Source IsReady Gets a value indicating whether a drive is ready. Declaration public bool IsReady { get; } Property Value Type Description Boolean true if the drive is ready; otherwise, false . Remarks IsReady indicates whether a drive is ready. For example, it indicates whether a CD is in a CD drive or whether a removable storage device is ready for read/write operations. If you do not test whether a drive is ready, and it is not ready, querying the drive using DriveInfo will raise an IOException. Do not rely on IsReady() to avoid catching exceptions from other members such as TotalSize, TotalFreeSpace, and DriveFormat. Between the time that your code checks IsReady and then accesses one of the other properties (even if the access occurs immediately after the check), a drive may have been disconnected or a disk may have been removed. | Improve this Doc View Source IsUnc [AlphaFS] Indicates if this drive is a UNC path. Declaration public bool IsUnc { get; } Property Value Type Description Boolean | Improve this Doc View Source IsVolume [AlphaFS] Determines whether the specified volume name is a defined volume on the current computer. Declaration public bool IsVolume { get; } Property Value Type Description Boolean | Improve this Doc View Source Name Gets the name of the drive. Declaration public string Name { get; } Property Value Type Description String The name of the drive. Remarks This property is the name assigned to the drive, such as C:\\ or E:\\ | Improve this Doc View Source RootDirectory Gets the root directory of a drive. Declaration public DirectoryInfo RootDirectory { get; } Property Value Type Description DirectoryInfo A DirectoryInfo object that contains the root directory of the drive. | Improve this Doc View Source TotalFreeSpace Gets the total amount of free space available on a drive. Declaration public long TotalFreeSpace { get; } Property Value Type Description Int64 The total free space available on a drive, in bytes. Remarks This property indicates the total amount of free space available on the drive, not just what is available to the current user. | Improve this Doc View Source TotalSize Gets the total size of storage space on a drive. Declaration public long TotalSize { get; } Property Value Type Description Int64 The total size of the drive, in bytes. Remarks This property indicates the total size of the drive in bytes, not just what is available to the current user. | Improve this Doc View Source VolumeInfo [AlphaFS] Contains information about a file-system volume. Declaration public VolumeInfo VolumeInfo { get; } Property Value Type Description VolumeInfo A VolumeInfo object that contains file-system volume information of the drive. | Improve this Doc View Source VolumeLabel Gets or sets the volume label of a drive. Declaration public string VolumeLabel { get; set; } Property Value Type Description String The volume label. Remarks The label length is determined by the operating system. For example, NTFS allows a volume label to be up to 32 characters long. Note that null is a valid VolumeLabel. Methods | Improve this Doc View Source EnumerateDrives(Boolean, Boolean) [AlphaFS] Enumerates the drive names of all logical drives on the Computer. Declaration [SecurityCritical] public static IEnumerable<DriveInfo> EnumerateDrives(bool fromEnvironment, bool isReady) Parameters Type Name Description Boolean fromEnvironment Retrieve logical drives as known by the Environment. Boolean isReady Retrieve only when accessible (IsReady) logical drives. Returns Type Description IEnumerable < DriveInfo > An IEnumerable of type DriveInfo that represents the logical drives on the Computer. | Improve this Doc View Source GetDrives() Retrieves the DriveInfo of all logical drives on the Computer. Declaration [SecurityCritical] public static DriveInfo[] GetDrives() Returns Type Description DriveInfo [] An array of type DriveInfo that represents the logical drives on the Computer. | Improve this Doc View Source GetFreeDriveLetter() [AlphaFS] Gets the first available drive letter on the local system. Declaration public static char GetFreeDriveLetter() Returns Type Description Char A drive letter as Char . When no drive letters are available, an exception is thrown. Remarks The letters \"A\" and \"B\" are reserved for floppy drives and will never be returned by this function. | Improve this Doc View Source GetFreeDriveLetter(Boolean) Gets an available drive letter on the local system. Declaration public static char GetFreeDriveLetter(bool getLastAvailable) Parameters Type Name Description Boolean getLastAvailable When true get the last available drive letter. When false gets the first available drive letter. Returns Type Description Char A drive letter as Char . When no drive letters are available, an exception is thrown. Remarks The letters \"A\" and \"B\" are reserved for floppy drives and will never be returned by this function. Exceptions Type Condition ArgumentOutOfRangeException No drive letters available. | Improve this Doc View Source ToString() Returns a drive name as a string. Declaration public override string ToString() Returns Type Description String The name of the drive. Overrides Object.ToString() Remarks This method returns the Name property."
  },
  "api/Alphaleonis.Win32.Filesystem.DosDeviceAttributes.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DosDeviceAttributes.html",
    "title": "Enum DosDeviceAttributes | AlphaFS",
    "keywords": "Enum DosDeviceAttributes Defines the controllable aspects of the Volume.DefineDosDevice() method. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum DosDeviceAttributes Fields Name Description ExactMatchOnRemove DDD_EXACT_MATCH_ON_REMOVE If this value is specified along with RemoveDefinition , the function will use an exact match to determine which mapping to remove. Use this value to ensure that you do not delete something that you did not define. NoBroadcastSystem DDD_NO_BROADCAST_SYSTEM Do not broadcast the WM_SETTINGCHANGE message. By default, this message is broadcast to notify the shell and applications of the change. None DDD_EXACT_MATCH_ON_REMOVE Default. RawTargetPath DDD_RAW_TARGET_PATH Uses the targetPath string as is. Otherwise, it is converted from an MS-DOS path to a path. RemoveDefinition DDD_REMOVE_DEFINITION Removes the specified definition for the specified device. To determine which definition to remove, the function walks the list of mappings for the device, looking for a match of targetPath against a prefix of each mapping associated with this device. The first mapping that matches is the one removed, and then the function returns. If targetPath is null or a pointer to a null string, the function will remove the first mapping associated with the device and pop the most recent one pushed.If there is nothing left to pop, the device name will be removed. If this value is not specified, the string pointed to by the targetPath parameter will become the new mapping for this device."
  },
  "api/Alphaleonis.Win32.Filesystem.DiskSpaceInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DiskSpaceInfo.html",
    "title": "Class DiskSpaceInfo | AlphaFS",
    "keywords": "Class DiskSpaceInfo Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread. This class cannot be inherited. Inheritance Object DiskSpaceInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] [SecurityCritical] public sealed class DiskSpaceInfo Constructors | Improve this Doc View Source DiskSpaceInfo(String) Initializes a DiskSpaceInfo instance. Declaration [SecurityCritical] public DiskSpaceInfo(string drivePath) Parameters Type Name Description String drivePath A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\server\\share | Improve this Doc View Source DiskSpaceInfo(String, Nullable<Boolean>, Boolean, Boolean) Initializes a DiskSpaceInfo instance. Declaration [SecurityCritical] public DiskSpaceInfo(string drivePath, bool? spaceInfoType, bool refresh, bool continueOnException) Parameters Type Name Description String drivePath A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z' or a network share in the format: \\server\\share Nullable < Boolean > spaceInfoType null gets both size- and disk cluster information. true Get only disk cluster information, false Get only size information. Boolean refresh Refreshes the state of the object. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Properties | Improve this Doc View Source AvailableFreeSpacePercent Indicates the amount of available free space on a drive, formatted as percentage. Declaration public string AvailableFreeSpacePercent { get; } Property Value Type Description String | Improve this Doc View Source AvailableFreeSpaceUnitSize Indicates the amount of available free space on a drive, formatted as a unit size. Declaration public string AvailableFreeSpaceUnitSize { get; } Property Value Type Description String | Improve this Doc View Source BytesPerSector The number of bytes per sector. Declaration public int BytesPerSector { get; } Property Value Type Description Int32 | Improve this Doc View Source ClusterSize Returns the Clusters size. Declaration public long ClusterSize { get; } Property Value Type Description Int64 | Improve this Doc View Source DriveName Gets the name of a drive. Declaration public string DriveName { get; } Property Value Type Description String The name of the drive. Remarks This property is the name assigned to the drive, such as C:\\ or E:\\ | Improve this Doc View Source FreeBytesAvailable The total number of free bytes on a disk that are available to the user who is associated with the calling thread. Declaration public long FreeBytesAvailable { get; } Property Value Type Description Int64 | Improve this Doc View Source NumberOfFreeClusters The total number of free clusters on the disk that are available to the user who is associated with the calling thread. Declaration public int NumberOfFreeClusters { get; } Property Value Type Description Int32 | Improve this Doc View Source SectorsPerCluster The number of sectors per cluster. Declaration public int SectorsPerCluster { get; } Property Value Type Description Int32 | Improve this Doc View Source TotalNumberOfBytes The total number of bytes on a disk that are available to the user who is associated with the calling thread. Declaration public long TotalNumberOfBytes { get; } Property Value Type Description Int64 | Improve this Doc View Source TotalNumberOfClusters The total number of clusters on the disk that are available to the user who is associated with the calling thread. If per-user disk quotas are in use, this value may be less than the total number of clusters on the disk. Declaration public long TotalNumberOfClusters { get; } Property Value Type Description Int64 | Improve this Doc View Source TotalNumberOfFreeBytes The total number of free bytes on a disk. Declaration public long TotalNumberOfFreeBytes { get; } Property Value Type Description Int64 | Improve this Doc View Source TotalSizeUnitSize The total number of bytes on a disk that are available to the user who is associated with the calling thread, formatted as a unit size. Declaration public string TotalSizeUnitSize { get; } Property Value Type Description String | Improve this Doc View Source UsedSpacePercent Indicates the amount of used space on a drive, formatted as percentage. Declaration public string UsedSpacePercent { get; } Property Value Type Description String | Improve this Doc View Source UsedSpaceUnitSize Indicates the amount of used space on a drive, formatted as a unit size. Declaration public string UsedSpaceUnitSize { get; } Property Value Type Description String Methods | Improve this Doc View Source Refresh() Refreshes the state of the object. Declaration public void Refresh() | Improve this Doc View Source ToString() Returns the drive name. Declaration public override string ToString() Returns Type Description String A string that represents this object. Overrides Object.ToString()"
  },
  "api/Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DirectoryReadOnlyException.html",
    "title": "Class DirectoryReadOnlyException | AlphaFS",
    "keywords": "Class DirectoryReadOnlyException [AlphaFS] The operation could not be completed because the directory is read-only. Inheritance Object Exception SystemException UnauthorizedAccessException DirectoryReadOnlyException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class DirectoryReadOnlyException : UnauthorizedAccessException, ISerializable, _Exception Constructors | Improve this Doc View Source DirectoryReadOnlyException() [AlphaFS] Initializes a new instance of the DirectoryReadOnlyException class. Declaration public DirectoryReadOnlyException() | Improve this Doc View Source DirectoryReadOnlyException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the DirectoryReadOnlyException class. Declaration protected DirectoryReadOnlyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The data for serializing or deserializing the object. StreamingContext context The source and destination for the object. | Improve this Doc View Source DirectoryReadOnlyException(String) [AlphaFS] Initializes a new instance of the DirectoryReadOnlyException class. Declaration public DirectoryReadOnlyException(string path) Parameters Type Name Description String path The path to the directory. | Improve this Doc View Source DirectoryReadOnlyException(String, Exception) [AlphaFS] Initializes a new instance of the DirectoryReadOnlyException class. Declaration public DirectoryReadOnlyException(string path, Exception innerException) Parameters Type Name Description String path The path to the directory. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DirectoryNotEmptyException.html",
    "title": "Class DirectoryNotEmptyException | AlphaFS",
    "keywords": "Class DirectoryNotEmptyException [AlphaFS] The operation could not be completed because the directory is not empty. Inheritance Object Exception SystemException IOException DirectoryNotEmptyException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class DirectoryNotEmptyException : IOException, ISerializable, _Exception Constructors | Improve this Doc View Source DirectoryNotEmptyException() [AlphaFS] Initializes a new instance of the DirectoryNotEmptyException class. Declaration public DirectoryNotEmptyException() | Improve this Doc View Source DirectoryNotEmptyException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the DirectoryNotEmptyException class. Declaration protected DirectoryNotEmptyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The data for serializing or deserializing the object. StreamingContext context The source and destination for the object. | Improve this Doc View Source DirectoryNotEmptyException(String) [AlphaFS] Initializes a new instance of the DirectoryNotEmptyException class. Declaration public DirectoryNotEmptyException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source DirectoryNotEmptyException(String, Boolean) [AlphaFS] Initializes a new instance of the DirectoryNotEmptyException class. Declaration public DirectoryNotEmptyException(string path, bool isPath) Parameters Type Name Description String path The path to the directory. Boolean isPath Always set to true when using this constructor. | Improve this Doc View Source DirectoryNotEmptyException(String, Exception) [AlphaFS] Initializes a new instance of the DirectoryNotEmptyException class. Declaration public DirectoryNotEmptyException(string path, Exception innerException) Parameters Type Name Description String path The path to the file. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.DirectoryInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DirectoryInfo.html",
    "title": "Class DirectoryInfo | AlphaFS",
    "keywords": "Class DirectoryInfo Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited. Inheritance Object MarshalByRefObject FileSystemInfo DirectoryInfo Implements IEquatable < FileSystemInfo > Inherited Members FileSystemInfo.FullPath FileSystemInfo.OriginalPath FileSystemInfo.Attributes FileSystemInfo.CreationTime FileSystemInfo.CreationTimeUtc FileSystemInfo.Extension FileSystemInfo.FullName FileSystemInfo.LastAccessTime FileSystemInfo.LastAccessTimeUtc FileSystemInfo.LastWriteTime FileSystemInfo.LastWriteTimeUtc FileSystemInfo.DisplayPath FileSystemInfo.EntryInfo FileSystemInfo.IsDirectory FileSystemInfo.LongFullName FileSystemInfo.Transaction FileSystemInfo.Refresh() FileSystemInfo.GetHashCode() FileSystemInfo.Equals(FileSystemInfo) FileSystemInfo.Equals(Object) MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public sealed class DirectoryInfo : FileSystemInfo, IEquatable<FileSystemInfo> Constructors | Improve this Doc View Source DirectoryInfo(KernelTransaction, String) [AlphaFS] Initializes a new instance of the DirectoryInfo class on the specified path. Declaration public DirectoryInfo(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path on which to create the DirectoryInfo . Remarks This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations. | Improve this Doc View Source DirectoryInfo(KernelTransaction, String, PathFormat) [AlphaFS] Initializes a new instance of the DirectoryInfo class on the specified path. Declaration public DirectoryInfo(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path on which to create the DirectoryInfo . PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations. | Improve this Doc View Source DirectoryInfo(String) Initializes a new instance of the DirectoryInfo class on the specified path. Declaration public DirectoryInfo(string path) Parameters Type Name Description String path The path on which to create the DirectoryInfo . Remarks This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations. The path parameter can be a file name, including a file on a Universal Naming Convention (UNC) share. | Improve this Doc View Source DirectoryInfo(String, PathFormat) [AlphaFS] Initializes a new instance of the DirectoryInfo class on the specified path. Declaration public DirectoryInfo(string path, PathFormat pathFormat) Parameters Type Name Description String path The path on which to create the DirectoryInfo . PathFormat pathFormat Indicates the format of the path parameter(s). Remarks This constructor does not check if a directory exists. This constructor is a placeholder for a string that is used to access the disk in subsequent operations. Properties | Improve this Doc View Source Exists Gets a value indicating whether the directory exists. Declaration public override bool Exists { [SecurityCritical] get; } Property Value Type Description Boolean true if the directory exists; otherwise, false . Overrides FileSystemInfo.Exists Remarks The Exists property returns false if any error occurs while trying to determine if the specified directory exists. This can occur in situations that raise exceptions such as passing a directory name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the directory. | Improve this Doc View Source Name Gets the name of this DirectoryInfo instance. Declaration public override string Name { get; } Property Value Type Description String The directory name. Overrides FileSystemInfo.Name Remarks This Name property returns only the name of the directory, such as \"Bin\". To get the full path, such as \"c:\\public\\Bin\", use the FullName property. | Improve this Doc View Source Parent Gets the parent directory of a specified subdirectory. Declaration public DirectoryInfo Parent { [SecurityCritical] get; } Property Value Type Description DirectoryInfo The parent directory, or null if the path is null or if the file path denotes a root (such as \"&quot;, \"C:\", or * \"\\server\\share\"). | Improve this Doc View Source Root Gets the root portion of the directory. Declaration public DirectoryInfo Root { [SecurityCritical] get; } Property Value Type Description DirectoryInfo An object that represents the root of the directory. Methods | Improve this Doc View Source Compress() [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public void Compress() Remarks This will only compress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Compress(DirectoryEnumerationOptions) [AlphaFS] Compresses a directory using NTFS compression. Declaration [SecurityCritical] public void Compress(DirectoryEnumerationOptions options) Parameters Type Name Description DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String) [AlphaFS] Copies a DirectoryInfo instance and its contents to a new path. Declaration [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath) Parameters Type Name Description String destinationPath The destination directory path. Returns Type Description DirectoryInfo A new DirectoryInfo instance if the directory was completely copied. Remarks Use this method to prevent overwriting of an existing directory by default. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified. Declaration [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, CopyOptions copyOptions) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Returns Type Description DirectoryInfo Returns a new directory, or an overwrite of an existing directory if copyOptions is not FailIfExists . If the directory exists and copyOptions contains FailIfExists , an IOException is thrown. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public CopyMoveResult CopyTo(string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public CopyMoveResult CopyTo(string destinationPath, CopyOptions copyOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, DirectoryEnumerationFilters) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified. Declaration [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description DirectoryInfo Returns a new directory, or an overwrite of an existing directory if copyOptions is not FailIfExists . If the directory exists and copyOptions contains FailIfExists , an IOException is thrown. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description DirectoryInfo Returns a new directory, or an overwrite of an existing directory if copyOptions is not FailIfExists . If the directory exists and copyOptions contains FailIfExists , an IOException is thrown. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, DirectoryEnumerationFilters, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo Returns a new directory, or an overwrite of an existing directory if copyOptions is not FailIfExists . If the directory exists and copyOptions contains FailIfExists , an IOException is thrown. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, DirectoryEnumerationFilters, PathFormat) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified. Declaration [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, CopyOptions copyOptions, DirectoryEnumerationFilters filters, PathFormat pathFormat) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo Returns a new directory, or an overwrite of an existing directory if copyOptions is not FailIfExists . If the directory exists and copyOptions contains FailIfExists , an IOException is thrown. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, PathFormat) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified. Declaration [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, CopyOptions copyOptions, PathFormat pathFormat) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo Returns a new directory, or an overwrite of an existing directory if copyOptions is not FailIfExists . If the directory exists and copyOptions contains FailIfExists , an IOException is thrown. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, Boolean) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, CopyOptions copyOptions, bool preserveDates) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. Returns Type Description DirectoryInfo Returns a new directory, or an overwrite of an existing directory if copyOptions is not FailIfExists . If the directory exists and copyOptions contains FailIfExists , an IOException is thrown. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified. and the possibility of notifying the application of its progress through a callback function. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public CopyMoveResult CopyTo(string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, Boolean, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified. and the possibility of notifying the application of its progress through a callback function. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public CopyMoveResult CopyTo(string destinationPath, CopyOptions copyOptions, bool preserveDates, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been copied. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Copy action. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, CopyOptions, Boolean, PathFormat) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, CopyOptions copyOptions, bool preserveDates, PathFormat pathFormat) Parameters Type Name Description String destinationPath The destination directory path. CopyOptions copyOptions CopyOptions that specify how the directory is to be copied. This parameter can be null . Boolean preserveDates true if original Timestamps must be preserved, false otherwise. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo Returns a new directory, or an overwrite of an existing directory if copyOptions is not FailIfExists . If the directory exists and copyOptions contains FailIfExists , an IOException is thrown. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, PathFormat) [AlphaFS] Copies a DirectoryInfo instance and its contents to a new path. Declaration [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, PathFormat pathFormat) Parameters Type Name Description String destinationPath The destination directory path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo A new DirectoryInfo instance if the directory was completely copied. Remarks Use this method to prevent overwriting of an existing directory by default. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, Boolean) [AlphaFS] Copies a DirectoryInfo instance and its contents to a new path. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, bool preserveDates) Parameters Type Name Description String destinationPath The destination directory path. Boolean preserveDates true if original Timestamps must be preserved, false otherwise. Returns Type Description DirectoryInfo Returns a new DirectoryInfo instance. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CopyTo(String, Boolean, PathFormat) [AlphaFS] Copies an existing directory to a new directory, allowing the overwriting of an existing directory, CopyOptions can be specified. Declaration [Obsolete(\"Use other overload and add CopyOptions.CopyTimestamp enum flag.\")] [SecurityCritical] public DirectoryInfo CopyTo(string destinationPath, bool preserveDates, PathFormat pathFormat) Parameters Type Name Description String destinationPath The destination directory path. Boolean preserveDates true if original Timestamps must be preserved, false otherwise. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo Returns a new DirectoryInfo instance. Remarks Option NoBuffering is recommended for very large file transfers. Use this method to allow or prevent overwriting of an existing directory. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjects(DirectoryEnumerationOptions) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public long CountFileSystemObjects(DirectoryEnumerationOptions options) Parameters Type Name Description DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjects(String, DirectoryEnumerationOptions) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public long CountFileSystemObjects(string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CountFileSystemObjects(String, DirectoryEnumerationOptions, DirectoryEnumerationFilters) [AlphaFS] Counts file system objects: files, folders or both) in a given directory. Declaration [SecurityCritical] public long CountFileSystemObjects(string searchPattern, DirectoryEnumerationOptions options, DirectoryEnumerationFilters filters) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. DirectoryEnumerationFilters filters The specification of custom filters to be used in the process. Returns Type Description Int64 The counted number of file system objects. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Create() Creates a directory. Declaration [SecurityCritical] public void Create() Remarks If the directory already exists, this method does nothing. | Improve this Doc View Source Create(Boolean) [AlphaFS] Creates a directory using a DirectorySecurity object. Declaration [SecurityCritical] public DirectoryInfo Create(bool compress) Parameters Type Name Description Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo Remarks If the directory already exists, this method does nothing. | Improve this Doc View Source Create(DirectorySecurity) Creates a directory using a DirectorySecurity object. Declaration [SecurityCritical] public void Create(DirectorySecurity directorySecurity) Parameters Type Name Description DirectorySecurity directorySecurity The access control to apply to the directory. Remarks If the directory already exists, this method does nothing. | Improve this Doc View Source Create(DirectorySecurity, Boolean) [AlphaFS] Creates a directory using a DirectorySecurity object. Declaration [SecurityCritical] public DirectoryInfo Create(DirectorySecurity directorySecurity, bool compress) Parameters Type Name Description DirectorySecurity directorySecurity The access control to apply to the directory. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo Remarks If the directory already exists, this method does nothing. | Improve this Doc View Source CreateJunction(String) [AlphaFS] Converts the DirectoryInfo instance into a directory junction instance (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public void CreateJunction(string junctionPath) Parameters Type Name Description String junctionPath The path of the junction point to create. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, PathFormat) [AlphaFS] Converts the DirectoryInfo instance into a directory junction instance (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public void CreateJunction(string junctionPath, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path of the junction point to create. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, Boolean) [AlphaFS] Converts the DirectoryInfo instance into a directory junction instance (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public void CreateJunction(string junctionPath, bool overwrite) Parameters Type Name Description String junctionPath The path of the junction point to create. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, Boolean, PathFormat) [AlphaFS] Converts the DirectoryInfo instance into a directory junction instance (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public void CreateJunction(string junctionPath, bool overwrite, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path of the junction point to create. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, Boolean, Boolean) [AlphaFS] Converts the DirectoryInfo instance into a directory junction instance (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public void CreateJunction(string junctionPath, bool overwrite, bool copyTargetTimestamps) Parameters Type Name Description String junctionPath The path of the junction point to create. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Boolean copyTargetTimestamps true to copy the target date and time stamps to the directory junction. Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateJunction(String, Boolean, Boolean, PathFormat) [AlphaFS] Converts the DirectoryInfo instance into a directory junction instance (similar to CMD command: \"MKLINK /J\"). Declaration [SecurityCritical] public void CreateJunction(string junctionPath, bool overwrite, bool copyTargetTimestamps, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path of the junction point to create. Boolean overwrite true to overwrite an existing junction point. The directory is removed and recreated. Boolean copyTargetTimestamps true to copy the target date and time stamps to the directory junction. PathFormat pathFormat Indicates the format of the path parameter(s). Remarks The directory must be empty and reside on a local volume. MSDN: A junction (also called a soft link) differs from a hard link in that the storage objects it references are separate directories, and a junction can link directories located on different local volumes on the same computer. Otherwise, junctions operate identically to hard links. Junctions are implemented through reparse points. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source CreateSubdirectory(String) Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class. Declaration [SecurityCritical] public DirectoryInfo CreateSubdirectory(string path) Parameters Type Name Description String path The specified path. This cannot be a different disk volume. Returns Type Description DirectoryInfo The last directory specified in path . Remarks Any and all directories specified in path are created, unless some part of path is invalid. The path parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing. | Improve this Doc View Source CreateSubdirectory(String, Boolean) [AlphaFS] Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class. Declaration [SecurityCritical] public DirectoryInfo CreateSubdirectory(string path, bool compress) Parameters Type Name Description String path The specified path. This cannot be a different disk volume. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo The last directory specified in path . Remarks Any and all directories specified in path are created, unless some part of path is invalid. The path parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing. | Improve this Doc View Source CreateSubdirectory(String, DirectorySecurity) Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class. Declaration [SecurityCritical] public DirectoryInfo CreateSubdirectory(string path, DirectorySecurity directorySecurity) Parameters Type Name Description String path The specified path. This cannot be a different disk volume. DirectorySecurity directorySecurity The DirectorySecurity security to apply. Returns Type Description DirectoryInfo The last directory specified in path . Remarks Any and all directories specified in path are created, unless some part of path is invalid. The path parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing. | Improve this Doc View Source CreateSubdirectory(String, DirectorySecurity, Boolean) [AlphaFS] Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class. Declaration [SecurityCritical] public DirectoryInfo CreateSubdirectory(string path, DirectorySecurity directorySecurity, bool compress) Parameters Type Name Description String path The specified path. This cannot be a different disk volume. DirectorySecurity directorySecurity The DirectorySecurity security to apply. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo The last directory specified in path . Remarks Any and all directories specified in path are created, unless some part of path is invalid. The path parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing. | Improve this Doc View Source CreateSubdirectory(String, String, Boolean) [AlphaFS] Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class. Declaration [SecurityCritical] public DirectoryInfo CreateSubdirectory(string path, string templatePath, bool compress) Parameters Type Name Description String path The specified path. This cannot be a different disk volume. String templatePath The path of the directory to use as a template when creating the new directory. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo The last directory specified in path . Remarks Any and all directories specified in path are created, unless some part of path is invalid. The path parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing. | Improve this Doc View Source CreateSubdirectory(String, String, DirectorySecurity, Boolean) [AlphaFS] Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the DirectoryInfo class. Declaration [SecurityCritical] public DirectoryInfo CreateSubdirectory(string path, string templatePath, DirectorySecurity directorySecurity, bool compress) Parameters Type Name Description String path The specified path. This cannot be a different disk volume. String templatePath The path of the directory to use as a template when creating the new directory. DirectorySecurity directorySecurity The DirectorySecurity security to apply. Boolean compress When true compresses the directory using NTFS compression. Returns Type Description DirectoryInfo The last directory specified in path . Remarks Any and all directories specified in path are created, unless some part of path is invalid. The path parameter specifies a directory path, not a file path. If the subdirectory already exists, this method does nothing. | Improve this Doc View Source Decompress() [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public void Decompress() Remarks This will only decompress the root items (non recursive). Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decompress(DirectoryEnumerationOptions) [AlphaFS] Decompresses an NTFS compressed directory. Declaration [SecurityCritical] public void Decompress(DirectoryEnumerationOptions options) Parameters Type Name Description DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decrypt() [AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public void Decrypt() Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Decrypt(Boolean) [AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public void Decrypt(bool recursive) Parameters Type Name Description Boolean recursive true to decrypt the directory recursively. false only decrypt files and directories in the root of the directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Delete() Deletes this DirectoryInfo if it is empty. Declaration [SecurityCritical] public override void Delete() Overrides FileSystemInfo.Delete() Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Delete(Boolean) Deletes this instance of a DirectoryInfo , specifying whether to delete subdirectories and files. Declaration [SecurityCritical] public void Delete(bool recursive) Parameters Type Name Description Boolean recursive true to delete this directory, its subdirectories, and all files; otherwise, false . Remarks If the DirectoryInfo has no files and no subdirectories, this method deletes the DirectoryInfo even if recursive is false . Attempting to delete a DirectoryInfo that is not empty when recursive is false throws an IOException . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Delete(Boolean, Boolean) [AlphaFS] Deletes this instance of a DirectoryInfo , specifying whether to delete files and subdirectories. Declaration [SecurityCritical] public void Delete(bool recursive, bool ignoreReadOnly) Parameters Type Name Description Boolean recursive true to delete this directory, its subdirectories, and all files; otherwise, false . Boolean ignoreReadOnly true ignores read only attribute of files and directories. Remarks If the DirectoryInfo has no files and no subdirectories, this method deletes the DirectoryInfo even if recursive is false . Attempting to delete a DirectoryInfo that is not empty when recursive is false throws an IOException . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Delete(Boolean, Boolean, Boolean) [AlphaFS] Deletes this instance of a DirectoryInfo , specifying whether to delete files and subdirectories. Declaration [SecurityCritical] public void Delete(bool recursive, bool ignoreReadOnly, bool continueOnNotFound) Parameters Type Name Description Boolean recursive true to delete this directory, its subdirectories, and all files; otherwise, false . Boolean ignoreReadOnly true ignores read only attribute of files and directories. Boolean continueOnNotFound When true does not throw an DirectoryNotFoundException when the directory does not exist. Remarks If the DirectoryInfo has no files and no subdirectories, this method deletes the DirectoryInfo even if recursive is false . Attempting to delete a DirectoryInfo that is not empty when recursive is false throws an IOException . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteEmptySubdirectories() [AlphaFS] Deletes empty subdirectories from the DirectoryInfo instance. Declaration [SecurityCritical] public void DeleteEmptySubdirectories() | Improve this Doc View Source DeleteEmptySubdirectories(Boolean) [AlphaFS] Deletes empty subdirectories from the DirectoryInfo instance. Declaration [SecurityCritical] public void DeleteEmptySubdirectories(bool recursive) Parameters Type Name Description Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. | Improve this Doc View Source DeleteEmptySubdirectories(Boolean, Boolean) [AlphaFS] Deletes empty subdirectories from the DirectoryInfo instance. Declaration [SecurityCritical] public void DeleteEmptySubdirectories(bool recursive, bool ignoreReadOnly) Parameters Type Name Description Boolean recursive true deletes empty subdirectories from this directory and its subdirectories. Boolean ignoreReadOnly true overrides read only FileAttributes of empty directories. | Improve this Doc View Source DeleteJunction() [AlphaFS] Removes the directory junction. Declaration [SecurityCritical] public void DeleteJunction() Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DeleteJunction(Boolean) [AlphaFS] Removes the directory junction. Declaration [SecurityCritical] public void DeleteJunction(bool removeDirectory) Parameters Type Name Description Boolean removeDirectory When true , also removes the directory and all its contents. Remarks Only the directory junction is removed, not the target. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotAReparsePointException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source DisableCompression() [AlphaFS] Disables compression of the specified directory and the files in it. Declaration [SecurityCritical] public void DisableCompression() Remarks This method disables the directory-compression attribute. It will not decompress the current contents of the directory. However, newly created files and directories will be uncompressed. | Improve this Doc View Source DisableEncryption() [AlphaFS] Disables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory. Declaration [SecurityCritical] public void DisableEncryption() Remarks This method will create/change the file \"Desktop.ini\" and wil set Encryption value: \"Disable=0\" | Improve this Doc View Source EnableCompression() [AlphaFS] Enables compression of the specified directory and the files in it. Declaration [SecurityCritical] public void EnableCompression() Remarks This method enables the directory-compression attribute. It will not compress the current contents of the directory. However, newly created files and directories will be compressed. | Improve this Doc View Source EnableEncryption() [AlphaFS] Enables encryption of the specified directory and the files in it. It does not affect encryption of subdirectories below the indicated directory. Declaration [SecurityCritical] public void EnableEncryption() Remarks This method will create/change the file \"Desktop.ini\" and wil set Encryption value: \"Disable=1\" | Improve this Doc View Source Encrypt() [AlphaFS] Encrypts a directory so that only the account used to encrypt the directory can decrypt it. Declaration [SecurityCritical] public void Encrypt() Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source Encrypt(Boolean) [AlphaFS] Decrypts a directory that was encrypted by the current account using the Encrypt method. Declaration [SecurityCritical] public void Encrypt(bool recursive) Parameters Type Name Description Boolean recursive true to encrypt the directory recursively. false only encrypt files and directories in the root of the directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryReadOnlyException FileReadOnlyException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateAlternateDataStreams() [AlphaFS] Returns an enumerable collection of AlternateDataStreamInfo instances for the directory. Declaration [SecurityCritical] public IEnumerable<AlternateDataStreamInfo> EnumerateAlternateDataStreams() Returns Type Description IEnumerable < AlternateDataStreamInfo > An enumerable collection of AlternateDataStreamInfo instances for the directory. | Improve this Doc View Source EnumerateDirectories() Returns an enumerable collection of directory information in the current directory. Declaration [SecurityCritical] public IEnumerable<DirectoryInfo> EnumerateDirectories() Returns Type Description IEnumerable < DirectoryInfo > An enumerable collection of directories in the current directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of directory information in the current directory. Declaration [SecurityCritical] public IEnumerable<DirectoryInfo> EnumerateDirectories(DirectoryEnumerationOptions options) Parameters Type Name Description DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < DirectoryInfo > An enumerable collection of directories in the current directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String) Returns an enumerable collection of directory information that matches a specified search pattern. Declaration [SecurityCritical] public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable < DirectoryInfo > An enumerable collection of directories that matches searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of directory information that matches a specified search pattern. Declaration [SecurityCritical] public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < DirectoryInfo > An enumerable collection of directories that matches searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateDirectories(String, SearchOption) Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option. Declaration [SecurityCritical] public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern, SearchOption searchOption) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description IEnumerable < DirectoryInfo > An enumerable collection of directories that matches searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles() Returns an enumerable collection of file information in the current directory. Declaration [SecurityCritical] public IEnumerable<FileInfo> EnumerateFiles() Returns Type Description IEnumerable < FileInfo > An enumerable collection of the files in the current directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file information in the current directory. Declaration [SecurityCritical] public IEnumerable<FileInfo> EnumerateFiles(DirectoryEnumerationOptions options) Parameters Type Name Description DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < FileInfo > An enumerable collection of the files in the current directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String) Returns an enumerable collection of file information that matches a search pattern. Declaration [SecurityCritical] public IEnumerable<FileInfo> EnumerateFiles(string searchPattern) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable < FileInfo > An enumerable collection of files that matches searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file information that matches a search pattern. Declaration [SecurityCritical] public IEnumerable<FileInfo> EnumerateFiles(string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < FileInfo > An enumerable collection of files that matches searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFiles(String, SearchOption) Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option. Declaration [SecurityCritical] public IEnumerable<FileInfo> EnumerateFiles(string searchPattern, SearchOption searchOption) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description IEnumerable < FileInfo > An enumerable collection of files that matches searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemInfos() Returns an enumerable collection of file system information in the current directory. Declaration [SecurityCritical] public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos() Returns Type Description IEnumerable < FileSystemInfo > An enumerable collection of file system information in the current directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemInfos(DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file system information in the current directory. Declaration [SecurityCritical] public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(DirectoryEnumerationOptions options) Parameters Type Name Description DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < FileSystemInfo > An enumerable collection of file system information in the current directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemInfos(String) Returns an enumerable collection of file system information that matches a specified search pattern. Declaration [SecurityCritical] public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description IEnumerable < FileSystemInfo > An enumerable collection of file system information objects that matches searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemInfos(String, DirectoryEnumerationOptions) [AlphaFS] Returns an enumerable collection of file system information that matches a specified search pattern. Declaration [SecurityCritical] public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, DirectoryEnumerationOptions options) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. DirectoryEnumerationOptions options DirectoryEnumerationOptions flags that specify how the directory is to be enumerated. Returns Type Description IEnumerable < FileSystemInfo > An enumerable collection of file system information objects that matches searchPattern . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source EnumerateFileSystemInfos(String, SearchOption) Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option. Declaration [SecurityCritical] public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, SearchOption searchOption) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description IEnumerable < FileSystemInfo > An enumerable collection of file system information objects that matches searchPattern and searchOption . Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source ExistsJunction(String) [AlphaFS] Determines whether the given path refers to an existing directory junction on disk. Declaration [SecurityCritical] public bool ExistsJunction(string junctionPath) Parameters Type Name Description String junctionPath The path to test. Returns Type Description Boolean Returns true if junctionPath refers to an existing directory junction. Returns false if the directory junction does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. Exceptions Type Condition ArgumentException ArgumentNullException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source ExistsJunction(String, PathFormat) [AlphaFS] Determines whether the given path refers to an existing directory junction on disk. Declaration [SecurityCritical] public bool ExistsJunction(string junctionPath, PathFormat pathFormat) Parameters Type Name Description String junctionPath The path to test. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description Boolean Returns true if junctionPath refers to an existing directory junction. Returns false if the directory junction does not exist or an error occurs when trying to determine if the specified file exists. Remarks The Exists method returns false if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file. Exceptions Type Condition ArgumentException ArgumentNullException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetAccessControl() Gets a DirectorySecurity object that encapsulates the access control list (ACL) entries for the directory described by the current DirectoryInfo object. Declaration [SecurityCritical] public DirectorySecurity GetAccessControl() Returns Type Description DirectorySecurity A DirectorySecurity object that encapsulates the access control rules for the directory. | Improve this Doc View Source GetAccessControl(AccessControlSections) Gets a DirectorySecurity object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current DirectoryInfo object. Declaration [SecurityCritical] public DirectorySecurity GetAccessControl(AccessControlSections includeSections) Parameters Type Name Description AccessControlSections includeSections One of the AccessControlSections values that specifies the type of access control list (ACL) information to receive. Returns Type Description DirectorySecurity A DirectorySecurity object that encapsulates the access control rules for the file described by the path parameter. | Improve this Doc View Source GetDirectories() Returns the subdirectories of the current directory. Declaration [SecurityCritical] public DirectoryInfo[] GetDirectories() Returns Type Description DirectoryInfo [] An array of DirectoryInfo objects. Remarks If there are no subdirectories, this method returns an empty array. This method is not recursive. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetDirectories(String) Returns an array of directories in the current DirectoryInfo matching the given search criteria. Declaration [SecurityCritical] public DirectoryInfo[] GetDirectories(string searchPattern) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description DirectoryInfo [] An array of type DirectoryInfo matching searchPattern . Remarks The EnumerateDirectories and GetDirectories methods differ as follows: When you use EnumerateDirectories, you can start enumerating the collection of names before the whole collection is returned; when you use GetDirectories, you must wait for the whole array of names to be returned before you can access the array. Therefore, when you are working with many files and directories, EnumerateDirectories can be more efficient. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetDirectories(String, SearchOption) Returns an array of directories in the current DirectoryInfo matching the given search criteria and using a value to determine whether to search subdirectories. Declaration [SecurityCritical] public DirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description DirectoryInfo [] An array of type DirectoryInfo matching searchPattern . Remarks If there are no subdirectories, or no subdirectories match the searchPattern parameter, this method returns an empty array. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileIdInfo() [AlphaFS] Gets the unique identifier for the directory. The identifier is composed of a 64-bit volume serial number and 128-bit file system entry identifier. Declaration [SecurityCritical] public FileIdInfo GetFileIdInfo() Returns Type Description FileIdInfo A FileIdInfo instance containing the requested information. Remarks Directory IDs are not guaranteed to be unique over time, because file systems are free to reuse them. In some cases, the file ID for a directory can change over time. | Improve this Doc View Source GetFiles() Returns a file list from the current directory. Declaration [SecurityCritical] public FileInfo[] GetFiles() Returns Type Description FileInfo [] An array of type FileInfo . Remarks The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFiles(String) Returns a file list from the current directory matching the given search pattern. Declaration [SecurityCritical] public FileInfo[] GetFiles(string searchPattern) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description FileInfo [] An array of type FileInfo . Remarks The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFiles(String, SearchOption) Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories. Declaration [SecurityCritical] public FileInfo[] GetFiles(string searchPattern, SearchOption searchOption) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description FileInfo [] An array of type FileInfo . Remarks The order of the returned file names is not guaranteed; use the Sort() method if a specific sort order is required. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemInfos() Returns an array of strongly typed FileSystemInfo entries representing all the files and subdirectories in a directory. Declaration [SecurityCritical] public FileSystemInfo[] GetFileSystemInfos() Returns Type Description FileSystemInfo [] An array of strongly typed FileSystemInfo entries. Remarks For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo . Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemInfos(String) Retrieves an array of strongly typed FileSystemInfo objects representing the files and subdirectories that match the specified search criteria. Declaration [SecurityCritical] public FileSystemInfo[] GetFileSystemInfos(string searchPattern) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. Returns Type Description FileSystemInfo [] An array of strongly typed FileSystemInfo entries. Remarks For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo . Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source GetFileSystemInfos(String, SearchOption) Retrieves an array of strongly typed FileSystemInfo objects representing the files and subdirectories that match the specified search criteria. Declaration [SecurityCritical] public FileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption) Parameters Type Name Description String searchPattern The search string to match against the names of directories in path. This parameter can contain a combination of valid literal path and wildcard ( WildcardStarMatchAll and WildcardQuestion ) characters, but does not support regular expressions. SearchOption searchOption One of the SearchOption enumeration values that specifies whether the searchOption should include only the current directory or should include all subdirectories. Returns Type Description FileSystemInfo [] An array of strongly typed FileSystemInfo entries. Remarks For subdirectories, the FileSystemInfo objects returned by this method can be cast to the derived class DirectoryInfo . Use the FileAttributes value returned by the Attributes property to determine whether the FileSystemInfo represents a file or a directory. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String) Moves a DirectoryInfo instance and its contents to a new path. Declaration [SecurityCritical] public void MoveTo(string destinationPath) Parameters Type Name Description String destinationPath The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. Remarks Use this method to prevent overwriting of an existing directory by default. This method does not work across disk volumes. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, MoveOptions) [AlphaFS] Moves a DirectoryInfo instance and its contents to a new path, MoveOptions can be specified. Declaration [SecurityCritical] public DirectoryInfo MoveTo(string destinationPath, MoveOptions moveOptions) Parameters Type Name Description String destinationPath The name and path to which to move this directory. The destination cannot be another disk volume unless moveOptions contains CopyAllowed , or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . Returns Type Description DirectoryInfo A new DirectoryInfo instance if the directory was completely moved. Remarks Use this method to allow or prevent overwriting of an existing directory. This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, MoveOptions, CopyMoveProgressRoutine, Object) [AlphaFS] Moves a DirectoryInfo instance and its contents to a new path, MoveOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public CopyMoveResult MoveTo(string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData) Parameters Type Name Description String destinationPath The name and path to which to move this directory. The destination cannot be another disk volume unless moveOptions contains CopyAllowed , or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks Use this method to allow or prevent overwriting of an existing directory. This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, MoveOptions, CopyMoveProgressRoutine, Object, PathFormat) [AlphaFS] Moves a DirectoryInfo instance and its contents to a new path, MoveOptions can be specified, and the possibility of notifying the application of its progress through a callback function. Declaration [SecurityCritical] public CopyMoveResult MoveTo(string destinationPath, MoveOptions moveOptions, CopyMoveProgressRoutine progressHandler, object userProgressData, PathFormat pathFormat) Parameters Type Name Description String destinationPath The name and path to which to move this directory. The destination cannot be another disk volume unless moveOptions contains CopyAllowed , or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . CopyMoveProgressRoutine progressHandler A callback function that is called each time another portion of the directory has been moved. This parameter can be null . Object userProgressData The argument to be passed to the callback function. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description CopyMoveResult A CopyMoveResult class with details of the Move action. Remarks Use this method to allow or prevent overwriting of an existing directory. This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, MoveOptions, PathFormat) [AlphaFS] Moves a DirectoryInfo instance and its contents to a new path, MoveOptions can be specified. Declaration [SecurityCritical] public DirectoryInfo MoveTo(string destinationPath, MoveOptions moveOptions, PathFormat pathFormat) Parameters Type Name Description String destinationPath The name and path to which to move this directory. The destination cannot be another disk volume unless moveOptions contains CopyAllowed , or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. MoveOptions moveOptions MoveOptions that specify how the directory is to be moved. This parameter can be null . PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo A new DirectoryInfo instance if the directory was completely moved. Remarks Use this method to allow or prevent overwriting of an existing directory. This method does not work across disk volumes unless moveOptions contains CopyAllowed . Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source MoveTo(String, PathFormat) [AlphaFS] Moves a DirectoryInfo instance and its contents to a new path. Declaration [SecurityCritical] public DirectoryInfo MoveTo(string destinationPath, PathFormat pathFormat) Parameters Type Name Description String destinationPath The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description DirectoryInfo A new DirectoryInfo instance if the directory was completely moved. Remarks Use this method to prevent overwriting of an existing directory by default. This method does not work across disk volumes. Whenever possible, avoid using short file names (such as XXXXXX~1.XXX ) with this method. If two directories have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior. Exceptions Type Condition ArgumentException ArgumentNullException DirectoryNotFoundException IOException NotSupportedException UnauthorizedAccessException | Improve this Doc View Source RefreshEntryInfo() [AlphaFS] Refreshes the state of the FileSystemEntryInfo EntryInfo property. Declaration [SecurityCritical] public void RefreshEntryInfo() | Improve this Doc View Source SetAccessControl(DirectorySecurity) Applies access control list (ACL) entries described by a DirectorySecurity object to the directory described by the current DirectoryInfo object. Declaration [SecurityCritical] public void SetAccessControl(DirectorySecurity directorySecurity) Parameters Type Name Description DirectorySecurity directorySecurity A DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter. | Improve this Doc View Source SetAccessControl(DirectorySecurity, AccessControlSections) Applies access control list (ACL) entries described by a DirectorySecurity object to the directory described by the current DirectoryInfo object. Declaration [SecurityCritical] public void SetAccessControl(DirectorySecurity directorySecurity, AccessControlSections includeSections) Parameters Type Name Description DirectorySecurity directorySecurity A DirectorySecurity object that describes an ACL entry to apply to the directory described by the path parameter. AccessControlSections includeSections One or more of the AccessControlSections values that specifies the type of access control list (ACL) information to set. | Improve this Doc View Source ToString() Returns the original path that was passed by the user. Declaration public override string ToString() Returns Type Description String A string that represents this object. Overrides FileSystemInfo.ToString() Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DirectoryEnumerationOptions.html",
    "title": "Enum DirectoryEnumerationOptions | AlphaFS",
    "keywords": "Enum DirectoryEnumerationOptions [AlphaFS] Directory enumeration options, flags that specify how a directory is to be enumerated. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum DirectoryEnumerationOptions Fields Name Description AsLongPath Return full path as long full path (Unicode format), only valid when return type is String . BasicSearch Enumerates the directory without querying the short file name, improving overall enumeration speed. ContinueOnException Suppress any Exception that might be thrown as a result from a failure, such as ACLs protected directories or non-accessible reparse points. Files Enumerate files only. FilesAndFolders Enumerate files and directories. Folders Enumerate directories only. LargeCache Enumerates the directory using a larger buffer for directory queries, which can increase performance of the find operation. None None (do not use). Recursive Specifies whether to search the current directory, or the current directory and all subdirectories. SkipReparsePoints Skip reparse points during directory enumeration."
  },
  "api/Alphaleonis.Win32.Filesystem.DeviceNotReadyException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DeviceNotReadyException.html",
    "title": "Class DeviceNotReadyException | AlphaFS",
    "keywords": "Class DeviceNotReadyException [AlphaFS] The requested operation could not be completed because the device is not ready. Inheritance Object Exception SystemException IOException DeviceNotReadyException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class DeviceNotReadyException : IOException, ISerializable, _Exception Constructors | Improve this Doc View Source DeviceNotReadyException() [AlphaFS] Initializes a new instance of the DeviceNotReadyException class. Declaration public DeviceNotReadyException() | Improve this Doc View Source DeviceNotReadyException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the DeviceNotReadyException class. Declaration protected DeviceNotReadyException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The data for serializing or deserializing the object. StreamingContext context The source and destination for the object. | Improve this Doc View Source DeviceNotReadyException(String) [AlphaFS] Initializes a new instance of the DeviceNotReadyException class. Declaration public DeviceNotReadyException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source DeviceNotReadyException(String, Boolean) [AlphaFS] Initializes a new instance of the DeviceNotReadyException class. Declaration public DeviceNotReadyException(string path, bool isPath) Parameters Type Name Description String path The path to the file system object. Boolean isPath Always set to true when using this constructor. | Improve this Doc View Source DeviceNotReadyException(String, Exception) [AlphaFS] Initializes a new instance of the DeviceNotReadyException class. Declaration public DeviceNotReadyException(string path, Exception innerException) Parameters Type Name Description String path The path to the device. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.DeviceInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.DeviceInfo.html",
    "title": "Class DeviceInfo | AlphaFS",
    "keywords": "Class DeviceInfo Provides access to information of a device, on a local or remote host. Inheritance Object DeviceInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [SecurityPermission(SecurityAction.InheritanceDemand, UnmanagedCode = true)] [Serializable] [SecurityCritical] public sealed class DeviceInfo Constructors | Improve this Doc View Source DeviceInfo() Initializes a DeviceInfo class. Declaration [SecurityCritical] public DeviceInfo() | Improve this Doc View Source DeviceInfo(String) Initializes a DeviceInfo class. Declaration [SecurityCritical] public DeviceInfo(string host) Parameters Type Name Description String host The DNS or NetBIOS name of the remote server. null refers to the local host. Properties | Improve this Doc View Source BaseContainerId Represents the Guid value of the base container identifier (ID) .The Windows Plug and Play (PnP) manager assigns this value to the device node (devnode). Declaration public Guid BaseContainerId { get; } Property Value Type Description Guid | Improve this Doc View Source ClassGuid Represents the Guid of the device setup class that a device instance belongs to. Declaration public Guid ClassGuid { get; } Property Value Type Description Guid | Improve this Doc View Source CompatibleIds Represents the list of compatible identifiers for a device instance. Declaration public string CompatibleIds { get; } Property Value Type Description String | Improve this Doc View Source DeviceClass Represents the name of the device setup class that a device instance belongs to. Declaration public string DeviceClass { get; } Property Value Type Description String | Improve this Doc View Source DeviceDescription Represents a description of a device instance. Declaration public string DeviceDescription { get; } Property Value Type Description String | Improve this Doc View Source DevicePath The device interface path. Declaration public string DevicePath { get; } Property Value Type Description String | Improve this Doc View Source Driver Represents the registry entry name of the driver key for a device instance. Declaration public string Driver { get; } Property Value Type Description String | Improve this Doc View Source EnumeratorName Represents the name of the enumerator for a device instance. Declaration public string EnumeratorName { get; } Property Value Type Description String | Improve this Doc View Source FriendlyName Represents the friendly name of a device instance. Declaration public string FriendlyName { get; } Property Value Type Description String | Improve this Doc View Source HardwareId Represents the list of hardware identifiers for a device instance. Declaration public string HardwareId { get; } Property Value Type Description String | Improve this Doc View Source HostName The host name that was passed to the class constructor. Declaration public string HostName { get; } Property Value Type Description String | Improve this Doc View Source InstanceId Gets the instance Id of the device. Declaration public string InstanceId { get; } Property Value Type Description String | Improve this Doc View Source LocationInformation Represents the bus-specific physical location of a device instance. Declaration public string LocationInformation { get; } Property Value Type Description String | Improve this Doc View Source LocationPaths Represents the location of a device instance in the device tree. Declaration public string LocationPaths { get; } Property Value Type Description String | Improve this Doc View Source Manufacturer Represents the name of the manufacturer of a device instance. Declaration public string Manufacturer { get; } Property Value Type Description String | Improve this Doc View Source PhysicalDeviceObjectName Encapsulates the physical device location information provided by a device's firmware to Windows. Declaration public string PhysicalDeviceObjectName { get; } Property Value Type Description String | Improve this Doc View Source Service Represents the name of the service that is installed for a device instance. Declaration public string Service { get; } Property Value Type Description String Methods | Improve this Doc View Source EnumerateDevices(DeviceGuid) Enumerates all available devices on the local host. Declaration [SecurityCritical] public IEnumerable<DeviceInfo> EnumerateDevices(DeviceGuid deviceGuid) Parameters Type Name Description DeviceGuid deviceGuid One of the DeviceGuid devices. Returns Type Description IEnumerable < DeviceInfo > IEnumerable<T> instances of type DeviceGuid from the local host."
  },
  "api/Alphaleonis.Win32.Filesystem.CopyMoveResult.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.CopyMoveResult.html",
    "title": "Class CopyMoveResult | AlphaFS",
    "keywords": "Class CopyMoveResult Class for CopyMoveResult that contains the results for the Copy or Move action. Inheritance Object CopyMoveResult Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public sealed class CopyMoveResult Remarks Normally there is no need to manually instantiate and/or populate this class. Properties | Improve this Doc View Source Destination Indicates the destination file or directory. Declaration public string Destination { get; } Property Value Type Description String | Improve this Doc View Source Duration Indicates the duration of the Copy or Move action. Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan | Improve this Doc View Source ErrorCode The error code encountered during the Copy or Move action. Declaration public int ErrorCode { get; } Property Value Type Description Int32 0 (zero) indicates success. | Improve this Doc View Source ErrorMessage The error message from the ErrorCode that was encountered during the Copy or Move action. Declaration public string ErrorMessage { get; } Property Value Type Description String A message describing the error. | Improve this Doc View Source IsCanceled When true indicates that the Copy or Move action was canceled. Declaration public bool IsCanceled { get; } Property Value Type Description Boolean true when the Copy/Move action was canceled. Otherwise false . | Improve this Doc View Source IsCopy When true the action was a Copy, Move otherwise. Declaration public bool IsCopy { get; } Property Value Type Description Boolean true when the action was a Copy. Otherwise a Move action was performed. | Improve this Doc View Source IsDirectory Gets a value indicating whether this instance represents a directory. Declaration public bool IsDirectory { get; } Property Value Type Description Boolean true if this instance represents a directory; otherwise, false . | Improve this Doc View Source IsEmulatedMove Indicates the Move action used a fallback of Copy + Delete actions. Declaration public bool IsEmulatedMove { get; } Property Value Type Description Boolean | Improve this Doc View Source IsFile Gets a value indicating whether this instance represents a file. Declaration public bool IsFile { get; } Property Value Type Description Boolean true if this instance represents a file; otherwise, false . | Improve this Doc View Source IsMove When true the action was a Move, Copy otherwise. Declaration public bool IsMove { get; } Property Value Type Description Boolean true when the action was a Move. Otherwise a Copy action was performed. | Improve this Doc View Source Retries The total number of retry attempts. Declaration public long Retries { get; } Property Value Type Description Int64 | Improve this Doc View Source Source Indicates the source file or directory. Declaration public string Source { get; } Property Value Type Description String | Improve this Doc View Source TimestampsCopied Indicates that the source date and timestamps have been applied to the destination file system objects. Declaration public bool TimestampsCopied { get; } Property Value Type Description Boolean | Improve this Doc View Source TotalBytes The total number of bytes copied. Declaration public long TotalBytes { get; } Property Value Type Description Int64 | Improve this Doc View Source TotalBytesUnitSize The total number of bytes copied, formatted as a unit size. Declaration public string TotalBytesUnitSize { get; } Property Value Type Description String | Improve this Doc View Source TotalFiles The total number of files copied. Declaration public long TotalFiles { get; } Property Value Type Description Int64 | Improve this Doc View Source TotalFolders The total number of folders copied. Declaration public long TotalFolders { get; } Property Value Type Description Int64"
  },
  "api/Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.CopyMoveProgressRoutine.html",
    "title": "Delegate CopyMoveProgressRoutine | AlphaFS",
    "keywords": "Delegate CopyMoveProgressRoutine Callback used by CopyFileXxx and MoveFileXxx to report progress about the copy/move operation. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public delegate CopyMoveProgressResult CopyMoveProgressRoutine(long totalFileSize, long totalBytesTransferred, long streamSize, long streamBytesTransferred, int streamNumber, CopyMoveProgressCallbackReason callbackReason, object userData); Parameters Type Name Description Int64 totalFileSize Int64 totalBytesTransferred Int64 streamSize Int64 streamBytesTransferred Int32 streamNumber CopyMoveProgressCallbackReason callbackReason Object userData Returns Type Description CopyMoveProgressResult"
  },
  "api/Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.CopyMoveProgressResult.html",
    "title": "Enum CopyMoveProgressResult | AlphaFS",
    "keywords": "Enum CopyMoveProgressResult Used by CopyFileXxx and MoveFileXxx. The CopyMoveProgressRoutine function should return one of the following values. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum CopyMoveProgressResult Fields Name Description Cancel PROGRESS_CANCEL Cancel the copy/move operation and delete the destination file. Continue PROGRESS_CONTINUE Continue the copy/move operation. Quiet PROGRESS_QUIET Continue the copy/move operation, but stop invoking CopyMoveProgressRoutine to report progress. Stop PROGRESS_STOP Stop the copy/move operation. It can be restarted at a later time."
  },
  "api/Alphaleonis.Win32.Filesystem.CopyMoveProgressCallbackReason.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.CopyMoveProgressCallbackReason.html",
    "title": "Enum CopyMoveProgressCallbackReason | AlphaFS",
    "keywords": "Enum CopyMoveProgressCallbackReason Used by CopyFileXxx and MoveFileXxx. The reason that CopyMoveProgressRoutine was called. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum CopyMoveProgressCallbackReason Fields Name Description ChunkFinished CALLBACK_CHUNK_FINISHED Another part of the data file was copied. StreamSwitch CALLBACK_STREAM_SWITCH Another stream was created and is about to be copied. This is the callback reason given when the callback routine is first invoked."
  },
  "api/Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.AlternateDataStreamInfo.html",
    "title": "Struct AlternateDataStreamInfo | AlphaFS",
    "keywords": "Struct AlternateDataStreamInfo Information about an alternate data stream. Implements IEquatable < AlternateDataStreamInfo > Inherited Members ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public struct AlternateDataStreamInfo : IEquatable<AlternateDataStreamInfo> Properties | Improve this Doc View Source FullPath Gets the full path to the stream. Declaration public string FullPath { get; } Property Value Type Description String The full path to the stream in long path format. Remarks This is a path in long path format that can be passed to to open the stream if FullPath or LongFullPath is specified. | Improve this Doc View Source Size Gets the size of the stream. Declaration public long Size { get; } Property Value Type Description Int64 | Improve this Doc View Source StreamName Gets the name of the alternate data stream. Declaration public string StreamName { get; } Property Value Type Description String The name of the stream. Remarks This value is an empty string for the default stream (:$DATA), and for any other data stream it contains the name of the stream. Methods | Improve this Doc View Source Equals(AlternateDataStreamInfo) Determines whether the specified Object is equal to the current Object. Declaration public bool Equals(AlternateDataStreamInfo other) Parameters Type Name Description AlternateDataStreamInfo other Another AlternateDataStreamInfo instance to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare with the current instance. Returns Type Description Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides ValueType.Equals(Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A 32-bit signed integer that is the hash code for this instance. Overrides ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(AlternateDataStreamInfo, AlternateDataStreamInfo) Declaration public static bool operator ==(AlternateDataStreamInfo left, AlternateDataStreamInfo right) Parameters Type Name Description AlternateDataStreamInfo left A. AlternateDataStreamInfo right B. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(AlternateDataStreamInfo, AlternateDataStreamInfo) Implements the operator != Declaration public static bool operator !=(AlternateDataStreamInfo left, AlternateDataStreamInfo right) Parameters Type Name Description AlternateDataStreamInfo left A. AlternateDataStreamInfo right B. Returns Type Description Boolean The result of the operator. Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Win32.html": {
    "href": "api/Alphaleonis.Win32.html",
    "title": "Namespace Alphaleonis.Win32 | AlphaFS",
    "keywords": "Namespace Alphaleonis.Win32 This namespace contains general classes related to the Win32 Api. Classes OperatingSystem Static class providing access to information about the operating system under which the assembly is executing. SafeTokenHandle Represents a wrapper class for a handle used by the Token Win32 API functions. Enums OperatingSystem.EnumOsName A set of flags that describe the named Windows versions. OperatingSystem.EnumProcessorArchitecture A set of flags to indicate the current processor architecture for which the operating system is targeted and running."
  },
  "api/Alphaleonis.Win32.Security.html": {
    "href": "api/Alphaleonis.Win32.Security.html",
    "title": "Namespace Alphaleonis.Win32.Security | AlphaFS",
    "keywords": "Namespace Alphaleonis.Win32.Security This namespace contains classes directly related to security such as authentication, authorization and privilege tokens that may be needed for some file operations. For an example the SE_SECURITY_NAME privilege needs to be held to be able to modify the SACL of any file. Classes Privilege Represents a privilege for an access token. The privileges available on the local machine are available as static instances from this class. To create a Privilege representing a privilege on another system, use the constructor specifying a system name together with one of these static instances. PrivilegeEnabler Used to enable one or more privileges. The privileges specified will be enabled during the lifetime of the instance. Users create an instance of this object in a using statement to ensure that it is properly disposed when the elevated privileges are no longer needed. ProcessContext [AlphaFS] Class to determine the context of the current process. Enums HashType Enum containing the supported hash types."
  },
  "api/Alphaleonis.Win32.Network.DfsStorageStates.html": {
    "href": "api/Alphaleonis.Win32.Network.DfsStorageStates.html",
    "title": "Enum DfsStorageStates | AlphaFS",
    "keywords": "Enum DfsStorageStates A set of bit flags that describe the storage state of the DFS root or link target. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Flags] public enum DfsStorageStates Fields Name Description Active DFS_STORAGE_STATE_ACTIVE The DFS root or link target is the active target. None No storage state. Offline DFS_STORAGE_STATE_OFFLINE The DFS root or link target is offline. Online DFS_STORAGE_STATE_ONLINE The DFS root or link target is online."
  },
  "api/Alphaleonis.Win32.Network.DfsStorageInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.DfsStorageInfo.html",
    "title": "Class DfsStorageInfo | AlphaFS",
    "keywords": "Class DfsStorageInfo Contains information about a DFS root or link target in a DFS namespace or from the cache maintained by the DFS client. This class cannot be inherited. Inheritance Object DfsStorageInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax public sealed class DfsStorageInfo Constructors | Improve this Doc View Source DfsStorageInfo() Initializes a new instance of the DfsStorageInfo class, which acts as a wrapper for a DFS root or link target. Declaration public DfsStorageInfo() Properties | Improve this Doc View Source ServerName The server name of the DFS root target or link target. Declaration public string ServerName { get; } Property Value Type Description String | Improve this Doc View Source ShareName The share name of the DFS root target or link target. Declaration public string ShareName { get; } Property Value Type Description String | Improve this Doc View Source State An DfsStorageStates enum of the DFS root target or link target. Declaration public DfsStorageStates State { get; } Property Value Type Description DfsStorageStates | Improve this Doc View Source TargetPriorityClass Contains a DFS target's priority class and rank. Declaration public DfsTargetPriorityClass TargetPriorityClass { get; } Property Value Type Description DfsTargetPriorityClass | Improve this Doc View Source TargetPriorityRank Specifies the priority rank value of the target. The default value is 0, which indicates the highest priority rank within a priority class. Declaration public int TargetPriorityRank { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source ToString() The share name of the DFS root target or link target. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString()"
  },
  "api/Alphaleonis.Win32.Network.DfsPropertyFlags.html": {
    "href": "api/Alphaleonis.Win32.Network.DfsPropertyFlags.html",
    "title": "Enum DfsPropertyFlags | AlphaFS",
    "keywords": "Enum DfsPropertyFlags A set of bit flags that describe specific properties of a DFS namespace, root, or link. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Flags] public enum DfsPropertyFlags Fields Name Description AccessBasedDirectoryEnumeration DFS_PROPERTY_FLAG_ABDE Scope: Domain-based DFS roots and stand-alone DFS roots. When this flag is set, Access-Based Directory Enumeration (ABDE) mode support is enabled on the entire DFS root target share of the DFS namespace. ClusterEnabled DFS_PROPERTY_FLAG_CLUSTER_ENABLED Scope: Stand-alone DFS roots and links only. The DFS root is clustered to provide high availability for storage failover. InsiteReferrals DFS_PROPERTY_FLAG_INSITE_REFERRALS Scope: Domain roots, stand-alone roots, and links. If this flag is set at the DFS root, it applies to all links; otherwise, the value of this flag is considered for each individual link. When this flag is set, a DFS referral response from a DFS server for a DFS root or link with the \"INSITE\" option enabled contains only those targets which are in the same site as the DFS client requesting the referral. Targets in the two global priority classes are always returned, regardless of their site location. None No property flag. RootScalability DFS_PROPERTY_FLAG_ROOT_SCALABILITY Scope: The entire DFS namespace for a domain-based DFS namespace only. By default, a DFS root target server polls the PDS to detect changes to the DFS metadata. To prevent heavy server load on the PDC, root scalability can be enabled for the DFS namespace. Setting this flag will cause the DFS server to poll the nearest domain controller instead of the PDC for DFS metadata changes for the common namespace. Note that any changes made to the metadata must still occur on the PDC, however. SiteCosting DFS_PROPERTY_FLAG_SITE_COSTING Scope: The entire DFS namespace for both domain-based and stand-alone DFS namespaces. By default, targets returned in a referral response from a DFS server to a DFS client for a DFS root or link consists of two groups: targets in the same site as the client, and targets outside the site. If site-costing is enabled for the Active Directory, the response can have more than two groups, with each group containing targets with the same site cost for the specific DFS client requesting the referral. The groups are ordered by increasing site cost. For more information about how site-costing is used to prioritize targets. TargetFailback DFS_PROPERTY_FLAG_TARGET_FAILBACK Scope: Domain-based DFS roots, stand-alone DFS roots, and DFS links. If this flag is set at the DFS root, it applies to all links; otherwise, the value of this flag is considered for each individual link. When this flag is set, optimal target failback is enabled for V4 DFS clients, allowing them to fail back to an optimal target after failing over to a non-optimal one. The target failback setting is provided to the DFS client in a V4 referral response by a DFS server."
  },
  "api/Alphaleonis.Win32.Network.DfsInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.DfsInfo.html",
    "title": "Class DfsInfo | AlphaFS",
    "keywords": "Class DfsInfo Contains information about a Distributed File System (DFS) root or link. This class cannot be inherited. This structure contains the name, status, GUID, time-out, number of targets, and information about each target of the root or link. Inheritance Object DfsInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Serializable] public sealed class DfsInfo Constructors | Improve this Doc View Source DfsInfo() Initializes a new instance of the DfsInfo class which acts as a wrapper for a DFS root or link target. Declaration public DfsInfo() Properties | Improve this Doc View Source Comment The comment of the DFS root or link. Declaration public string Comment { get; } Property Value Type Description String | Improve this Doc View Source DirectoryInfo The DirectoryInfo instance of the DFS root or link. Declaration public DirectoryInfo DirectoryInfo { get; } Property Value Type Description DirectoryInfo | Improve this Doc View Source EntryPath The Universal Naming Convention (UNC) path of the DFS root or link. Declaration public string EntryPath { get; } Property Value Type Description String | Improve this Doc View Source Guid Specifies the GUID of the DFS root or link. Declaration public Guid Guid { get; } Property Value Type Description Guid | Improve this Doc View Source MetadataSize For domain-based DFS namespaces, this member specifies the size of the corresponding Active Directory data blob, in bytes. For stand-alone DFS namespaces, this field specifies the size of the metadata stored in the registry, including the key names and value names, in addition to the specific data items associated with them. This field is valid for DFS roots only. Declaration public long MetadataSize { get; } Property Value Type Description Int64 | Improve this Doc View Source PropertyFlags Specifies a set of flags that describe specific properties of a DFS namespace, root, or link. Declaration public DfsPropertyFlags PropertyFlags { get; } Property Value Type Description DfsPropertyFlags | Improve this Doc View Source SecurityDescriptor Pointer to a SECURITY_DESCRIPTOR structure that specifies a self-relative security descriptor to be associated with the DFS link's reparse point. This field is valid for DFS links only. Declaration public IntPtr SecurityDescriptor { get; } Property Value Type Description IntPtr | Improve this Doc View Source State An DfsVolumeStates enum that specifies a set of bit flags that describe the DFS root or link. Declaration public DfsVolumeStates State { get; } Property Value Type Description DfsVolumeStates | Improve this Doc View Source StorageInfoCollection The collection of DFS targets of the DFS root or link. Declaration public IEnumerable<DfsStorageInfo> StorageInfoCollection { get; } Property Value Type Description IEnumerable < DfsStorageInfo > | Improve this Doc View Source Timeout Specifies the time-out, in seconds, of the DFS root or link. Declaration public long Timeout { get; } Property Value Type Description Int64 Methods | Improve this Doc View Source ToString() Returns the Universal Naming Convention (UNC) path of the DFS root or link. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString()"
  },
  "api/Alphaleonis.Win32.Network.ConnectivityStates.html": {
    "href": "api/Alphaleonis.Win32.Network.ConnectivityStates.html",
    "title": "Enum ConnectivityStates | AlphaFS",
    "keywords": "Enum ConnectivityStates Specifies types of network connectivity state. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Flags] public enum ConnectivityStates Fields Name Description IPv4Internet There is connectivity to the Internet using the IPv4 protocol. IPv4LocalNetwork There is connectivity to a routed network using the IPv4 protocol. IPv4NoTraffic There is connectivity to a network, but the service cannot detect any IPv4 Network Traffic. IPv4Subnet There is connectivity to the local subnet using the IPv4 protocol. IPv6Internet There is connectivity to the Internet using the IPv6 protocol. IPv6LocalNetwork There is connectivity to a local network using the IPv6 protocol. IPv6NoTraffic There is connectivity to a network, but the service cannot detect any IPv6 Network Traffic. IPv6Subnet There is connectivity to the local subnet using the IPv6 protocol. None The underlying network interfaces have no connectivity to any network."
  },
  "api/Alphaleonis.Win32.Network.AccessPermissions.html": {
    "href": "api/Alphaleonis.Win32.Network.AccessPermissions.html",
    "title": "Enum AccessPermissions | AlphaFS",
    "keywords": "Enum AccessPermissions A set of bit flags that describe the permissions for the shared resource's on servers running with share-level security. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Flags] public enum AccessPermissions Remarks Note that Windows does not support share-level security. This member is ignored on a server running user-level security. Fields Name Description All ACCESS_ALL Permission to read, write, create, execute, and delete resources, and to modify their attributes and permissions. Attributes ACCESS_ATRIB Permission to modify the resource's attributes, such as the date and time when a file was last modified. Create ACCESS_CREATE Permission to create an instance of the resource (such as a file); data can be written to the resource as the resource is created. Delete ACCESS_DELETE Permission to delete the resource. Execute ACCESS_EXEC Permission to execute the resource. None No permissions. Permissions ACCESS_PERM Permission to modify the permissions (read, write, create, execute, and delete) assigned to a resource for a user or application. Read ACCESS_READ Permission to read data from a resource and, by default, to execute the resource. Write ACCESS_WRITE Permission to write data to the resource."
  },
  "api/Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.UnrecognizedReparsePointException.html",
    "title": "Class UnrecognizedReparsePointException | AlphaFS",
    "keywords": "Class UnrecognizedReparsePointException [AlphaFS] The function attempted to use a name that is reserved for use by another transaction. Inheritance Object Exception SystemException IOException UnrecognizedReparsePointException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class UnrecognizedReparsePointException : IOException, ISerializable, _Exception Constructors | Improve this Doc View Source UnrecognizedReparsePointException() [AlphaFS] Initializes a new instance of the UnrecognizedReparsePointException class. Declaration public UnrecognizedReparsePointException() | Improve this Doc View Source UnrecognizedReparsePointException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the UnrecognizedReparsePointException class. Declaration protected UnrecognizedReparsePointException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The info. StreamingContext context The context. | Improve this Doc View Source UnrecognizedReparsePointException(String) [AlphaFS] Initializes a new instance of the UnrecognizedReparsePointException class. Declaration public UnrecognizedReparsePointException(string path) Parameters Type Name Description String path The path to the file system object. | Improve this Doc View Source UnrecognizedReparsePointException(String, Exception) [AlphaFS] Initializes a new instance of the UnrecognizedReparsePointException class. Declaration public UnrecognizedReparsePointException(string path, Exception innerException) Parameters Type Name Description String path The path to the file system object. Exception innerException The inner exception. | Improve this Doc View Source UnrecognizedReparsePointException(String, Int32) [AlphaFS] Initializes a new instance of the UnrecognizedReparsePointException class. Declaration public UnrecognizedReparsePointException(string message, int lastError) Parameters Type Name Description String message The custom error message.. Int32 lastError The GetLastWin32Error. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.TransactionException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.TransactionException.html",
    "title": "Class TransactionException | AlphaFS",
    "keywords": "Class TransactionException [AlphaFS] The exception that is thrown when an attempt to create a file or directory that already exists was made. Inheritance Object Exception SystemException TransactionException InvalidTransactionException TransactionalConflictException TransactionAlreadyAbortedException TransactionAlreadyCommittedException UnsupportedRemoteTransactionException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class TransactionException : SystemException, ISerializable, _Exception Constructors | Improve this Doc View Source TransactionException() [AlphaFS] Initializes a new instance of the TransactionException class. Declaration public TransactionException() | Improve this Doc View Source TransactionException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the TransactionException class. Declaration protected TransactionException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The data for serializing or deserializing the object. StreamingContext context The source and destination for the object. | Improve this Doc View Source TransactionException(String) [AlphaFS] Initializes a new instance of the TransactionException class. Declaration public TransactionException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source TransactionException(String, Exception) [AlphaFS] Initializes a new instance of the TransactionException class. Declaration public TransactionException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.Shell32.FileInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Shell32.FileInfo.html",
    "title": "Struct Shell32.FileInfo | AlphaFS",
    "keywords": "Struct Shell32.FileInfo SHFILEINFO structure, contains information about a file system object. Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public struct FileInfo Fields | Improve this Doc View Source Attributes An array of values that indicates the attributes of the file object. Declaration public readonly Shell32.GetAttributesOf Attributes Field Value Type Description Shell32.GetAttributesOf | Improve this Doc View Source DisplayName The name of the file as it appears in the Windows Shell, or the path and file name of the file that contains the icon representing the file. Declaration public string DisplayName Field Value Type Description String | Improve this Doc View Source IconHandle A handle to the icon that represents the file. Declaration public readonly IntPtr IconHandle Field Value Type Description IntPtr Remarks Caller is responsible for destroying this handle with DestroyIcon() when no longer needed. | Improve this Doc View Source IconIndex The index of the icon image within the system image list. Declaration public int IconIndex Field Value Type Description Int32 | Improve this Doc View Source TypeName The type of file. Declaration public string TypeName Field Value Type Description String"
  },
  "api/Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Shell32.FileAttributes.html",
    "title": "Enum Shell32.FileAttributes | AlphaFS",
    "keywords": "Enum Shell32.FileAttributes Shell32 FileAttributes structure, used to retrieve the different types of a file system object. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum FileAttributes Fields Name Description AddOverlays 0x000000020 - Apply the appropriate overlays to the file's icon. Attributes 0x000000800 - Retrieve the item attributes. The attributes are copied to the Attributes member of the structure. AttributesSpecified 0x000020000 - Modify Attributes to indicate that Attributes contains specific attributes that are desired. DisplayName 0x000000200 - Retrieve the display name for the file. The name is copied to the DisplayName member of the structure. ExeType 0x000002000 - Retrieve the type of the executable file if pszPath identifies an executable file. Icon 0x000000100 - Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the IconHandle member of the structure, and the index is copied to the IconIndex member. IconLocation 0x000001000 - Retrieve the name of the file that contains the icon representing the file specified by pszPath. The name of the file containing the icon is copied to the DisplayName member of the structure. The icon's index is copied to that structure's IconIndex member. LargeIcon 0x000000000 - Get file system object large icon. LinkOverlay 0x000008000 - Add the link overlay to the file's icon. OpenIcon 0x000000002 - Get file system object open icon. OverlayIndex 0x000000040 - Returns the index of the overlay icon. Pidl 0x000000008 - Get file system object by its PIDL. Selected 0x000010000 - Blend the file's icon with the system highlight color. ShellIconSize 0x000000004 - Get file system object Shell-sized icon. SmallIcon 0x000000001 - Get file system object small icon. SysIconIndex 0x000004000 - Retrieve the index of a system image list icon. TypeName 0x000000400 - Retrieve the string that describes the file's type. UseFileAttributes 0x000000010 - Indicates that the given file should not be accessed. Rather, it should act as if the given file exists and use the supplied attributes."
  },
  "api/Alphaleonis.Win32.Filesystem.ReparsePointTag.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.ReparsePointTag.html",
    "title": "Enum ReparsePointTag | AlphaFS",
    "keywords": "Enum ReparsePointTag Enumeration specifying the different reparse point tags. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum ReparsePointTag Remarks Reparse tags, with the exception of IO_REPARSE_TAG_SYMLINK, are processed on the server and are not processed by a client after transmission over the wire. Clients should treat associated reparse data as opaque data. Fields Name Description AppXStream IO_REPARSE_APPXSTREAM Csv IO_REPARSE_TAG_CSV Dedup IO_REPARSE_TAG_DEDUP Dfs IO_REPARSE_TAG_DFS Used by the DFS filter. Dfsr IO_REPARSE_TAG_DFSR Used by the DFS filter. DriverExtender IO_REPARSE_TAG_DRIVER_EXTENDER Used by Home server drive extender. FilterManager IO_REPARSE_TAG_FILTER_MANAGER Used by filter manager test harness. Hsm IO_REPARSE_TAG_HSM (Obsolete) Used by legacy Hierarchical Storage Manager Product. Hsm2 IO_REPARSE_TAG_HSM2 (Obsolete) Used by legacy Hierarchical Storage Manager Product. MountPoint IO_REPARSE_TAG_MOUNT_POINT Used for mount point support. Nfs IO_REPARSE_TAG_NFS NFS symlinks, Windows 8 / SMB3 and later. None The entry is not a reparse point. Sis IO_REPARSE_TAG_SIS Used by single-instance storage (SIS) filter driver. SymLink IO_REPARSE_TAG_SYMLINK Used for symbolic link support. Wim IO_REPARSE_TAG_WIM"
  },
  "api/Alphaleonis.Win32.Filesystem.PathFormat.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.PathFormat.html",
    "title": "Enum PathFormat | AlphaFS",
    "keywords": "Enum PathFormat Indicates the format of a path passed to a method. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public enum PathFormat Remarks At some point in code you know the full path of file system objects, e.g.: \"C:\\Windows\". For example, Directory.EnumerateFileSystemEntries() will return all files and directories from a given path. Most likely, some processing will happen on the results of the enum. The file or directory may be passed on to another function. Whenever a file path is required, some performance can be gained. A path like: \"C:\\Windows\" or \"\\\\server\\share\" is considered a full path for a directory because it is rooted and has a drive/unc path. If the method supports it, FullPath and LongFullPath will skip GetFullPath() calls for path resolving of the object, while also avoiding path validation and checks. Using RelativePath (default) will always call GetFullPath() and perform path validation and checks. When working in a loop with thousands of files, LongFullPath will give the best performance. Fields Name Description FullPath The path is a full path in either normal or extended length (UNICODE) format. Internally it will be converted to an extended length (UNICODE) path. Using this option has a very slight performance advantage compared to using RelativePath . Example full path: \"C:\\Windows\" or \"\\\\server\\share\". LongFullPath The path is an extended length path. No additional processing will be done on the path, and it will be used as-is. Using this option has a slight performance advantage compared to using RelativePath . Example long full path: \"\\\\?\\C:\\Windows\" or \"\\\\?\\UNC\\server\\share\". RelativePath The format of the path is automatically detected by the method and internally converted to an extended length path. It can be either a standard (short) full path, an extended length (unicode) full path or a relative path. Example relative path: \"Windows\"."
  },
  "api/Alphaleonis.Win32.Filesystem.Path.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.Path.html",
    "title": "Class Path | AlphaFS",
    "keywords": "Class Path Performs operations on String instances that contain file or directory path information. These operations are performed in a cross-platform manner. Inheritance Object Path Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public static class Path Fields | Improve this Doc View Source AltDirectorySeparator [AlphaFS] AltDirectorySeparatorChar = \"/\" Provides a platform-specific alternate string used to separate directory levels in a path string that reflects a hierarchical file system organization. Declaration public static readonly string AltDirectorySeparator Field Value Type Description String | Improve this Doc View Source AltDirectorySeparatorChar AltDirectorySeparatorChar = '/' Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization. Declaration public static readonly char AltDirectorySeparatorChar Field Value Type Description Char | Improve this Doc View Source CurrentDirectoryPrefix [AlphaFS] CurrentDirectoryPrefix = \".\" Provides a current directory string. Declaration public static readonly string CurrentDirectoryPrefix Field Value Type Description String | Improve this Doc View Source CurrentDirectoryPrefixChar [AlphaFS] CurrentDirectoryPrefix = '.' Provides a current directory character. Declaration public const char CurrentDirectoryPrefixChar = '.' Field Value Type Description Char | Improve this Doc View Source DevicePrefix [AlphaFS] DevicePrefix = \"\\Device&quot; Provides standard Windows Device prefix. Declaration public static readonly string DevicePrefix Field Value Type Description String | Improve this Doc View Source DirectorySeparator [AlphaFS] DirectorySeparator = \"&quot; Provides a platform-specific string used to separate directory levels in a path string that reflects a hierarchical file system organization. Declaration public static readonly string DirectorySeparator Field Value Type Description String | Improve this Doc View Source DirectorySeparatorChar DirectorySeparatorChar = '&apos; Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization. Declaration public static readonly char DirectorySeparatorChar Field Value Type Description Char | Improve this Doc View Source DosDeviceLanmanPrefix [AlphaFS] DosDeviceLanmanPrefix = \"\\Device\\LanmanRedirector&quot; Provides a MS-Dos Lanman Redirector Path UNC prefix to a network share. Declaration [Obsolete(\"Unused\")] public static readonly string DosDeviceLanmanPrefix Field Value Type Description String | Improve this Doc View Source DosDeviceMupPrefix [AlphaFS] DosDeviceMupPrefix = \"\\Device\\Mup&quot; Provides a MS-Dos Mup Redirector Path UNC prefix to a network share. Declaration [Obsolete(\"Unused\")] public static readonly string DosDeviceMupPrefix Field Value Type Description String | Improve this Doc View Source DosDeviceUncPrefix [AlphaFS] DosDeviceUncPrefix = \"??\\UNC&quot; Provides a SUBST.EXE Path UNC prefix to a network share. Declaration public static readonly string DosDeviceUncPrefix Field Value Type Description String | Improve this Doc View Source ExtensionSeparatorChar [AlphaFS] ExtensionSeparatorChar = '.' Provides an Extension Separator character. Declaration public const char ExtensionSeparatorChar = '.' Field Value Type Description Char | Improve this Doc View Source GlobalRootDevicePrefix [AlphaFS] GlobalRootDevicePrefix = \"\\?\\GlobalRoot\\Device&quot; Provides standard Windows Volume prefix. Declaration public static readonly string GlobalRootDevicePrefix Field Value Type Description String | Improve this Doc View Source GlobalRootPrefix [AlphaFS] GlobalRootPrefix = \"\\?\\GlobalRoot&quot; Provides standard Windows Volume prefix. Declaration public static readonly string GlobalRootPrefix Field Value Type Description String | Improve this Doc View Source LogicalDrivePrefix [AlphaFS] Win32 Device Namespace. The \"\\.&quot;prefix is how to access physical disks and volumes, without going through the file system, if the API supports this type of access. Declaration public static readonly string LogicalDrivePrefix Field Value Type Description String | Improve this Doc View Source LongPathPrefix [AlphaFS] Win32 File Namespace. The \"\\?&quot; prefix to a path string tells the Windows APIs to disable all string parsing and to send the string that follows it straight to the file system. Declaration public static readonly string LongPathPrefix Field Value Type Description String | Improve this Doc View Source LongPathUncPrefix [AlphaFS] LongPathUncPrefix = \"\\?\\UNC&quot; Provides standard Windows Long Path UNC prefix. Declaration public static readonly string LongPathUncPrefix Field Value Type Description String | Improve this Doc View Source NetworkDriveSeparator [AlphaFS] NetworkDriveSeparator = \"$\" Provides a platform-specific network drive separator string. Declaration public static readonly string NetworkDriveSeparator Field Value Type Description String | Improve this Doc View Source NetworkDriveSeparatorChar [AlphaFS] NetworkDriveSeparator = '$' Provides a platform-specific network drive separator character. Declaration public const char NetworkDriveSeparatorChar = '$' Field Value Type Description Char | Improve this Doc View Source NonInterpretedPathPrefix [AlphaFS] NonInterpretedPathPrefix = \"??&quot; Provides a non-interpreted path prefix. Declaration public static readonly string NonInterpretedPathPrefix Field Value Type Description String | Improve this Doc View Source ParentDirectoryPrefix [AlphaFS] ParentDirectoryPrefix = \"..\" Provides a parent directory string. Declaration public const string ParentDirectoryPrefix = \"..\" Field Value Type Description String | Improve this Doc View Source PathSeparator PathSeparator = ';' A platform-specific separator character used to separate path strings in environment variables. Declaration public static readonly char PathSeparator Field Value Type Description Char | Improve this Doc View Source PhysicalDrivePrefix [AlphaFS] PhysicalDrivePrefix = \"\\.\\PhysicalDrive\" Provides standard physical drive prefix. Declaration public static readonly string PhysicalDrivePrefix Field Value Type Description String | Improve this Doc View Source StreamDataLabel [AlphaFS] StreamDataLabel = ':$DATA' Provides a platform-specific Stream :$DATA label. Declaration public static readonly string StreamDataLabel Field Value Type Description String | Improve this Doc View Source StreamSeparator [AlphaFS] StreamSeparator = ':' Provides a platform-specific Stream-name string. Declaration public static readonly string StreamSeparator Field Value Type Description String | Improve this Doc View Source StreamSeparatorChar [AlphaFS] StreamSeparator = ':' Provides a platform-specific Stream-name character. Declaration public const char StreamSeparatorChar = ':' Field Value Type Description Char | Improve this Doc View Source StringTerminatorChar [AlphaFS] StringTerminatorChar = '\\0' String Terminator Suffix. Declaration public const char StringTerminatorChar = '\\0' Field Value Type Description Char | Improve this Doc View Source UncPrefix [AlphaFS] UncPrefix = \"\\\" Provides standard Windows Path UNC prefix. Declaration public static readonly string UncPrefix Field Value Type Description String | Improve this Doc View Source VolumePrefix [AlphaFS] VolumePrefix = \"\\?\\Volume\" Provides standard Windows Volume prefix. Declaration public static readonly string VolumePrefix Field Value Type Description String | Improve this Doc View Source VolumeSeparator [AlphaFS] VolumeSeparator = \":\" Provides a platform-specific Volume Separator string. Declaration public static readonly string VolumeSeparator Field Value Type Description String | Improve this Doc View Source VolumeSeparatorChar VolumeSeparatorChar = ':' Provides a platform-specific Volume Separator character. Declaration public static readonly char VolumeSeparatorChar Field Value Type Description Char | Improve this Doc View Source WildcardQuestion [AlphaFS] WildcardQuestion = \"?\" Provides a replace-item string. Declaration public static readonly string WildcardQuestion Field Value Type Description String | Improve this Doc View Source WildcardQuestionChar [AlphaFS] WildcardQuestion = '?' Provides a replace-item string. Declaration public const char WildcardQuestionChar = '?' Field Value Type Description Char | Improve this Doc View Source WildcardStarMatchAll [AlphaFS] WildcardStarMatchAll = \"*\" Provides a match-all-items string. Declaration public static readonly string WildcardStarMatchAll Field Value Type Description String | Improve this Doc View Source WildcardStarMatchAllChar [AlphaFS] WildcardStarMatchAll = '*' Provides a match-all-items character. Declaration public const char WildcardStarMatchAllChar = '*' Field Value Type Description Char Methods | Improve this Doc View Source AddTrailingDirectorySeparator(String) [AlphaFS] Adds a trailing DirectorySeparatorChar character to the string, when absent. Declaration [SecurityCritical] public static string AddTrailingDirectorySeparator(string path) Parameters Type Name Description String path A text string to which the trailing DirectorySeparatorChar is to be added, when absent. Returns Type Description String A text string with a trailing DirectorySeparatorChar character. The function returns null when path is null . | Improve this Doc View Source AddTrailingDirectorySeparator(String, Boolean) [AlphaFS] Adds a trailing DirectorySeparatorChar or AltDirectorySeparatorChar character to the string, when absent. Declaration [SecurityCritical] public static string AddTrailingDirectorySeparator(string path, bool addAlternateSeparator) Parameters Type Name Description String path A text string to which the trailing DirectorySeparatorChar or AltDirectorySeparatorChar is to be added, when absent. Boolean addAlternateSeparator If true the AltDirectorySeparatorChar character will be added instead. Returns Type Description String A text string with a trailing DirectorySeparatorChar or AltDirectorySeparatorChar character. The function returns null when path is null . | Improve this Doc View Source ChangeExtension(String, String) Changes the extension of a path string. Declaration [SecurityCritical] public static string ChangeExtension(string path, string extension) Parameters Type Name Description String path The path information to modify. The path cannot contain any of the characters defined in GetInvalidPathChars() . String extension The new extension (with or without a leading period). Specify null to remove an existing extension from path. Returns Type Description String The modified path information. Exceptions Type Condition ArgumentException | Improve this Doc View Source Combine(String[]) Combines an array of strings into a path. Declaration [SecurityCritical] public static string Combine(params string[] paths) Parameters Type Name Description String [] paths An array of parts of the path. Returns Type Description String The combined paths. Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source GetDirectoryName(String) Returns the directory information for the specified path string. Declaration [SecurityCritical] public static string GetDirectoryName(string path) Parameters Type Name Description String path The path of a file or directory. Returns Type Description String Directory information for path , or null if path denotes a root directory or is null . Returns Empty if path does not contain directory information. Exceptions Type Condition ArgumentException | Improve this Doc View Source GetDirectoryName(String, Boolean) [AlphaFS] Returns the directory information for the specified path string. Declaration [SecurityCritical] public static string GetDirectoryName(string path, bool checkInvalidPathChars) Parameters Type Name Description String path The path of a file or directory. Boolean checkInvalidPathChars true will check path for invalid path characters. Returns Type Description String Directory information for path , or null if path denotes a root directory or is null . Returns Empty if path does not contain directory information. Exceptions Type Condition ArgumentException | Improve this Doc View Source GetDirectoryNameWithoutRoot(String) [AlphaFS] Returns the directory information for the specified path string without the root information, for example: \"C:\\Windows\\system32\" returns: \"Windows\". Declaration [SecurityCritical] public static string GetDirectoryNameWithoutRoot(string path) Parameters Type Name Description String path The path. Returns Type Description String The path without the file name part and without the root information (if any), or null if path is null or if path denotes a root (such as \"&quot;, \"C:\", or * \"\\server\\share\"). | Improve this Doc View Source GetDirectoryNameWithoutRoot(String, PathFormat) [AlphaFS] Returns the directory information for the specified path string without the root information, for example: \"C:\\Windows\\system32\" returns: \"Windows\". Declaration [SecurityCritical] public static string GetDirectoryNameWithoutRoot(string path, PathFormat pathFormat) Parameters Type Name Description String path The path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The path without the file name part and without the root information (if any), or null if path is null or if path denotes a root (such as \"&quot;, \"C:\", or * \"\\server\\share\"). | Improve this Doc View Source GetDirectoryNameWithoutRootTransacted(KernelTransaction, String) [AlphaFS] Returns the directory information for the specified path string without the root information, for example: \"C:\\Windows\\system32\" returns: \"Windows\". Declaration [SecurityCritical] public static string GetDirectoryNameWithoutRootTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path. Returns Type Description String The path without the file name part and without the root information (if any), or null if path is null or if path denotes a root (such as \"&quot;, \"C:\", or * \"\\server\\share\"). | Improve this Doc View Source GetDirectoryNameWithoutRootTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Returns the directory information for the specified path string without the root information, for example: \"C:\\Windows\\system32\" returns: \"Windows\". Declaration [SecurityCritical] public static string GetDirectoryNameWithoutRootTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The path without the file name part and without the root information (if any), or null if path is null or if path denotes a root (such as \"&quot;, \"C:\", or * \"\\server\\share\"). | Improve this Doc View Source GetExtension(String) Returns the extension of the specified path string. Declaration [SecurityCritical] public static string GetExtension(string path) Parameters Type Name Description String path The path string from which to get the extension. The path cannot contain any of the characters defined in GetInvalidPathChars() . Returns Type Description String The extension of the specified path (including the period \".\"), or null, or Empty . If path is null, this method returns null. If path does not have extension information, this method returns Empty . Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source GetExtension(String, Boolean) [AlphaFS] Returns the extension of the specified path string. Declaration [SecurityCritical] public static string GetExtension(string path, bool checkInvalidPathChars) Parameters Type Name Description String path The path string from which to get the extension. The path cannot contain any of the characters defined in GetInvalidPathChars() . Boolean checkInvalidPathChars true will check path for invalid path characters. Returns Type Description String The extension of the specified path (including the period \".\"), or null, or Empty . If path is null, this method returns null. If path does not have extension information, this method returns Empty . Exceptions Type Condition ArgumentException | Improve this Doc View Source GetFileName(String) Returns the file name and extension of the specified path string. Declaration [SecurityCritical] public static string GetFileName(string path) Parameters Type Name Description String path The path string from which to obtain the file name and extension. The path cannot contain any of the characters defined in GetInvalidPathChars() . Returns Type Description String The characters after the last directory character in path . If the last character of path is a directory or volume separator character, this method returns string.Empty . If path is null, this method returns null. Exceptions Type Condition ArgumentException | Improve this Doc View Source GetFileName(String, Boolean) [AlphaFS] Returns the file name and extension of the specified path string. Declaration public static string GetFileName(string path, bool checkInvalidPathChars) Parameters Type Name Description String path The path string from which to obtain the file name and extension. Boolean checkInvalidPathChars true will check path for invalid path characters. Returns Type Description String The characters after the last directory character in path . If the last character of path is a directory or volume separator character, this method returns string.Empty . If path is null, this method returns null. Exceptions Type Condition ArgumentException | Improve this Doc View Source GetFileNameWithoutExtension(String) Returns the file name of the specified path string without the extension. Declaration [SecurityCritical] public static string GetFileNameWithoutExtension(string path) Parameters Type Name Description String path The path of the file. The path cannot contain any of the characters defined in GetInvalidPathChars() . Returns Type Description String The string returned by GetFileName, minus the last period (.) and all characters following it. Exceptions Type Condition ArgumentException | Improve this Doc View Source GetFileNameWithoutExtension(String, Boolean) [AlphaFS] Returns the file name of the specified path string without the extension. Declaration [SecurityCritical] public static string GetFileNameWithoutExtension(string path, bool checkInvalidPathChars) Parameters Type Name Description String path The path of the file. The path cannot contain any of the characters defined in GetInvalidPathChars() . Boolean checkInvalidPathChars true will check path for invalid path characters. Returns Type Description String The string returned by GetFileName, minus the last period (.) and all characters following it. Exceptions Type Condition ArgumentException | Improve this Doc View Source GetFinalPathNameByHandle(SafeFileHandle) [AlphaFS] Retrieves the final path for the specified file, formatted as FinalPathFormats . Declaration [SecurityCritical] public static string GetFinalPathNameByHandle(SafeFileHandle handle) Parameters Type Name Description SafeFileHandle handle Then handle to a SafeFileHandle instance. Returns Type Description String The final path as a string. Remarks A final path is the path that is returned when a path is fully resolved. For example, for a symbolic link named \"C:\\tmp\\mydir\" that points to \"D:\\yourdir\", the final path would be \"D:\\yourdir\". | Improve this Doc View Source GetFinalPathNameByHandle(SafeFileHandle, FinalPathFormats) [AlphaFS] Retrieves the final path for the specified file, formatted as FinalPathFormats . Declaration [SecurityCritical] public static string GetFinalPathNameByHandle(SafeFileHandle handle, FinalPathFormats finalPath) Parameters Type Name Description SafeFileHandle handle Then handle to a SafeFileHandle instance. FinalPathFormats finalPath The final path, formatted as FinalPathFormats Returns Type Description String The final path as a string. Remarks A final path is the path that is returned when a path is fully resolved. For example, for a symbolic link named \"C:\\tmp\\mydir\" that points to \"D:\\yourdir\", the final path would be \"D:\\yourdir\". | Improve this Doc View Source GetFullPath(String) Returns the absolute path for the specified path string. Declaration [SecurityCritical] public static string GetFullPath(string path) Parameters Type Name Description String path The file or directory for which to obtain absolute path information. Returns Type Description String The fully qualified location of path, such as \"C:\\MyFile.txt\". Remarks GetFullPathName merges the name of the current drive and directory with a specified file name to determine the full path and file name of a specified file. It also calculates the address of the file name portion of the full path and file name. This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume. The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\\.\\PhysicalDrive0 . MSDN: Multithreaded applications and shared library code should not use the GetFullPathName function and should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process, therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value. This limitation also applies to the SetCurrentDirectory and GetCurrentDirectory functions. The exception being when the application is guaranteed to be running in a single thread, for example parsing file names from the command line argument string in the main thread prior to creating any additional threads. Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException | Improve this Doc View Source GetFullPath(String, GetFullPathOptions) [AlphaFS] Returns the absolute path for the specified path string. Declaration [SecurityCritical] public static string GetFullPath(string path, GetFullPathOptions options) Parameters Type Name Description String path The file or directory for which to obtain absolute path information. GetFullPathOptions options Options for controlling the full path retrieval. Returns Type Description String The fully qualified location of path, such as \"C:\\MyFile.txt\". Remarks GetFullPathName merges the name of the current drive and directory with a specified file name to determine the full path and file name of a specified file. It also calculates the address of the file name portion of the full path and file name. This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume. The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\\.\\PhysicalDrive0 . MSDN: Multithreaded applications and shared library code should not use the GetFullPathName function and should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process, therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value. This limitation also applies to the SetCurrentDirectory and GetCurrentDirectory functions. The exception being when the application is guaranteed to be running in a single thread, for example parsing file names from the command line argument string in the main thread prior to creating any additional threads. Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported. Exceptions Type Condition ArgumentNullException ArgumentException NotSupportedException | Improve this Doc View Source GetFullPathTransacted(KernelTransaction, String) [AlphaFS] Returns the absolute path for the specified path string. Declaration [SecurityCritical] public static string GetFullPathTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file or directory for which to obtain absolute path information. Returns Type Description String The fully qualified location of path, such as \"C:\\MyFile.txt\". Remarks GetFullPathName merges the name of the current drive and directory with a specified file name to determine the full path and file name of a specified file. It also calculates the address of the file name portion of the full path and file name. This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume. The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\\.\\PhysicalDrive0 . MSDN: Multithreaded applications and shared library code should not use the GetFullPathName function and should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process, therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value. This limitation also applies to the SetCurrentDirectory and GetCurrentDirectory functions. The exception being when the application is guaranteed to be running in a single thread, for example parsing file names from the command line argument string in the main thread prior to creating any additional threads. Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported. Exceptions Type Condition ArgumentException ArgumentNullException NotSupportedException | Improve this Doc View Source GetFullPathTransacted(KernelTransaction, String, GetFullPathOptions) [AlphaFS] Returns the absolute path for the specified path string. Declaration [SecurityCritical] public static string GetFullPathTransacted(KernelTransaction transaction, string path, GetFullPathOptions options) Parameters Type Name Description KernelTransaction transaction The transaction. String path The file or directory for which to obtain absolute path information. GetFullPathOptions options Options for controlling the full path retrieval. Returns Type Description String The fully qualified location of path, such as \"C:\\MyFile.txt\". Remarks GetFullPathName merges the name of the current drive and directory with a specified file name to determine the full path and file name of a specified file. It also calculates the address of the file name portion of the full path and file name. This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume. The .NET Framework does not support direct access to physical disks through paths that are device names, such as \\\\.\\PhysicalDrive0 . MSDN: Multithreaded applications and shared library code should not use the GetFullPathName function and should avoid using relative path names. The current directory state written by the SetCurrentDirectory function is stored as a global variable in each process, therefore multithreaded applications cannot reliably use this value without possible data corruption from other threads that may also be reading or setting this value. This limitation also applies to the SetCurrentDirectory and GetCurrentDirectory functions. The exception being when the application is guaranteed to be running in a single thread, for example parsing file names from the command line argument string in the main thread prior to creating any additional threads. Using relative path names in multithreaded applications or shared library code can yield unpredictable results and is not supported. Exceptions Type Condition ArgumentException ArgumentNullException NotSupportedException | Improve this Doc View Source GetInvalidFileNameChars() Gets an array containing the characters that are not allowed in file names. Declaration [SecurityCritical] public static char[] GetInvalidFileNameChars() Returns Type Description Char [] An array containing the characters that are not allowed in file names. | Improve this Doc View Source GetInvalidPathChars() Gets an array containing the characters that are not allowed in path names. Declaration [SecurityCritical] public static char[] GetInvalidPathChars() Returns Type Description Char [] An array containing the characters that are not allowed in path names. | Improve this Doc View Source GetLongFrom83ShortPath(String) [AlphaFS] Converts the specified existing path to its regular long form. Declaration [SecurityCritical] public static string GetLongFrom83ShortPath(string path) Parameters Type Name Description String path An existing path to a folder or file. Returns Type Description String The regular full path. Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source GetLongFrom83ShortPathTransacted(KernelTransaction, String) [AlphaFS] Converts the specified existing path to its regular long form. Declaration [SecurityCritical] public static string GetLongFrom83ShortPathTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path An existing path to a folder or file. Returns Type Description String The regular full path. Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source GetLongPath(String) [AlphaFS] Makes an extended long path from the specified path by prefixing LongPathPrefix . Declaration [SecurityCritical] public static string GetLongPath(string path) Parameters Type Name Description String path The path to the file or directory, this can also be an UNC path. Returns Type Description String The path prefixed with a LongPathPrefix , the minimum required full path is: \"C:&quot;. Remarks This method does not verify that the resulting path and file name are valid, or that they see an existing file on the associated volume. Exceptions Type Condition ArgumentNullException ArgumentException | Improve this Doc View Source GetPathRoot(String) Gets the root directory information of the specified path. Declaration [SecurityCritical] public static string GetPathRoot(string path) Parameters Type Name Description String path The path from which to obtain root directory information. Returns Type Description String Returns the root directory of path , such as \"C:&quot;, or null if path is null , or an empty string if path does not contain root directory information. Exceptions Type Condition ArgumentException | Improve this Doc View Source GetPathRoot(String, Boolean) [AlphaFS] Gets the root directory information of the specified path. Declaration [SecurityCritical] public static string GetPathRoot(string path, bool checkInvalidPathChars) Parameters Type Name Description String path The path from which to obtain root directory information. Boolean checkInvalidPathChars true will check path for invalid path characters. Returns Type Description String Returns the root directory of path , such as \"C:&quot;, or null if path is null , or an empty string if path does not contain root directory information. Exceptions Type Condition ArgumentException | Improve this Doc View Source GetRandomFileName() Returns a random folder name or file name. Declaration [SecurityCritical] public static string GetRandomFileName() Returns Type Description String A random folder name or file name. | Improve this Doc View Source GetRegularPath(String) [AlphaFS] Gets the regular path from long prefixed one. i.e.: \"\\?\\C:\\Temp\\file.txt\" to C:\\Temp\\file.txt\" or: \"\\?\\UNC\\Server\\share\\file.txt\" to \"\\Server\\share\\file.txt\". Declaration [SecurityCritical] public static string GetRegularPath(string path) Parameters Type Name Description String path The path. Returns Type Description String Regular form path string. Remarks This method does not handle paths with volume names, eg. \\?\\Volume{GUID}\\Folder\\file.txt. Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source GetRelativePath(String, String) [AlphaFS] Gets the relative path from the startPath path to the end path. Declaration public static string GetRelativePath(string startPath, string selectedPath) Parameters Type Name Description String startPath The absolute or relative folder path. String selectedPath The absolute or relative path containing the directory or file. Returns Type Description String The relative path containing the directory or file, from the startPath path to the end path. Exceptions Type Condition ArgumentNullException InvalidOperationException | Improve this Doc View Source GetShort83Path(String) [AlphaFS] Retrieves the short path form of the specified path. Declaration [SecurityCritical] public static string GetShort83Path(string path) Parameters Type Name Description String path An existing path to a folder or file. Returns Type Description String A path that has the 8.3 path form. Remarks Will fail on NTFS volumes with disabled 8.3 name generation. Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source GetShort83PathTransacted(KernelTransaction, String) [AlphaFS] Retrieves the short path form of the specified path. Declaration [SecurityCritical] public static string GetShort83PathTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path An existing path to a folder or file. Returns Type Description String A path that has the 8.3 path form. Remarks Will fail on NTFS volumes with disabled 8.3 name generation. Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source GetSuffixedDirectoryName(String) [AlphaFS] Returns the directory information for the specified path with a trailing DirectorySeparatorChar character. Declaration [SecurityCritical] public static string GetSuffixedDirectoryName(string path) Parameters Type Name Description String path The path. Returns Type Description String The suffixed directory information for the specified path with a trailing DirectorySeparatorChar character, or null if path is null or if path denotes a root (such as \"\\\", \"C:\", or * \"\\\\server\\share\"). Remarks This method is similar to calling Path.GetDirectoryName() + Path.AddTrailingDirectorySeparator() | Improve this Doc View Source GetSuffixedDirectoryName(String, PathFormat) [AlphaFS] Returns the directory information for the specified path with a trailing DirectorySeparatorChar character. Declaration [SecurityCritical] public static string GetSuffixedDirectoryName(string path, PathFormat pathFormat) Parameters Type Name Description String path The path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The suffixed directory information for the specified path with a trailing DirectorySeparatorChar character, or null if path is null or if path denotes a root (such as \"\\\", \"C:\", or * \"\\\\server\\share\"). Remarks This method is similar to calling Path.GetDirectoryName() + Path.AddTrailingDirectorySeparator() | Improve this Doc View Source GetSuffixedDirectoryNameTransacted(KernelTransaction, String) [AlphaFS] Returns the directory information for the specified path with a trailing DirectorySeparatorChar character. Declaration [SecurityCritical] public static string GetSuffixedDirectoryNameTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path. Returns Type Description String The suffixed directory information for the specified path with a trailing DirectorySeparatorChar character, or null if path is null or if path denotes a root (such as \"\\\", \"C:\", or * \"\\\\server\\share\"). Remarks This method is similar to calling Path.GetDirectoryName() + Path.AddTrailingDirectorySeparator() | Improve this Doc View Source GetSuffixedDirectoryNameTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Returns the directory information for the specified path with a trailing DirectorySeparatorChar character. Declaration [SecurityCritical] public static string GetSuffixedDirectoryNameTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The suffixed directory information for the specified path with a trailing DirectorySeparatorChar character, or null if path is null or if path denotes a root (such as \"\\\", \"C:\", or * \"\\\\server\\share\"). Remarks This method is similar to calling Path.GetDirectoryName() + Path.AddTrailingDirectorySeparator() | Improve this Doc View Source GetSuffixedDirectoryNameWithoutRoot(String) [AlphaFS] Returns the directory information for the specified path without the root and with a trailing DirectorySeparatorChar character. Declaration [SecurityCritical] public static string GetSuffixedDirectoryNameWithoutRoot(string path) Parameters Type Name Description String path The path. Returns Type Description String The directory information for the specified path without the root and with a trailing DirectorySeparatorChar character, or null if path is null or if path is null . | Improve this Doc View Source GetSuffixedDirectoryNameWithoutRoot(String, PathFormat) [AlphaFS] Returns the directory information for the specified path without the root and with a trailing DirectorySeparatorChar character. Declaration [SecurityCritical] public static string GetSuffixedDirectoryNameWithoutRoot(string path, PathFormat pathFormat) Parameters Type Name Description String path The path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The directory information for the specified path without the root and with a trailing DirectorySeparatorChar character, or null if path is null or if path is null . | Improve this Doc View Source GetSuffixedDirectoryNameWithoutRootTransacted(KernelTransaction, String) [AlphaFS] Returns the directory information for the specified path without the root and with a trailing DirectorySeparatorChar character. Declaration [SecurityCritical] public static string GetSuffixedDirectoryNameWithoutRootTransacted(KernelTransaction transaction, string path) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path. Returns Type Description String The directory information for the specified path without the root and with a trailing DirectorySeparatorChar character, or null if path is null or if path is null . | Improve this Doc View Source GetSuffixedDirectoryNameWithoutRootTransacted(KernelTransaction, String, PathFormat) [AlphaFS] Returns the directory information for the specified path without the root and with a trailing DirectorySeparatorChar character. Declaration [SecurityCritical] public static string GetSuffixedDirectoryNameWithoutRootTransacted(KernelTransaction transaction, string path, PathFormat pathFormat) Parameters Type Name Description KernelTransaction transaction The transaction. String path The path. PathFormat pathFormat Indicates the format of the path parameter(s). Returns Type Description String The directory information for the specified path without the root and with a trailing DirectorySeparatorChar character, or null if path is null or if path is null . | Improve this Doc View Source GetTempFileName() Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file. Declaration [SecurityCritical] public static string GetTempFileName() Returns Type Description String The full path of the temporary file. | Improve this Doc View Source GetTempPath() Returns the path of the current user's temporary folder. Declaration [SecurityCritical] public static string GetTempPath() Returns Type Description String The path to the temporary folder, ending with a backslash. | Improve this Doc View Source GetTempPath(String) [AlphaFS] Returns the path of the current user's temporary folder. Declaration [SecurityCritical] public static string GetTempPath(string combinePath) Parameters Type Name Description String combinePath The folder name to append to the temporary folder. Returns Type Description String The path to the temporary folder, combined with combinePath . | Improve this Doc View Source HasExtension(String) Determines whether a path includes a file name extension. Declaration [SecurityCritical] public static bool HasExtension(string path) Parameters Type Name Description String path The path to search for an extension. The path cannot contain any of the characters defined in GetInvalidPathChars() . Returns Type Description Boolean true if the characters that follow the last directory separator (\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, false . Exceptions Type Condition ArgumentException | Improve this Doc View Source IsLogicalDrive(String) [AlphaFS] Checks if path is in a logical drive format, such as \"C:\", \"D:\". Declaration public static bool IsLogicalDrive(string path) Parameters Type Name Description String path The absolute path to check. Returns Type Description Boolean true when path is in a logical drive format, such as \"C:\", \"D:\". Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source IsLongPath(String) [AlphaFS] Determines whether the specified path starts with a LongPathPrefix or LongPathUncPrefix . Declaration [SecurityCritical] public static bool IsLongPath(string path) Parameters Type Name Description String path The path to the file or directory. Returns Type Description Boolean true if the specified path has a long path (UNC) prefix, false otherwise. | Improve this Doc View Source IsPathRooted(String) Gets a value indicating whether the specified path string contains absolute or relative path information. Declaration [SecurityCritical] public static bool IsPathRooted(string path) Parameters Type Name Description String path The path to test. The path cannot contain any of the characters defined in GetInvalidPathChars() . Returns Type Description Boolean true if path contains a root; otherwise, false . Remarks The IsPathRooted method returns true if the first character is a directory separator character such as DirectorySeparatorChar , or if the path starts with a drive letter and colon ( VolumeSeparatorChar ). For example, it returns true for path strings such as \"\\MyDir\\MyFile.txt\", \"C:\\MyDir\", or \"C:MyDir\". It returns false for path strings such as \"MyDir\". Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source IsPathRooted(String, Boolean) [AlphaFS] Gets a value indicating whether the specified path string contains absolute or relative path information. Declaration [SecurityCritical] public static bool IsPathRooted(string path, bool checkInvalidPathChars) Parameters Type Name Description String path The path to test. The path cannot contain any of the characters defined in GetInvalidPathChars() . Boolean checkInvalidPathChars true will check path for invalid path characters. Returns Type Description Boolean true if path contains a root; otherwise, false . Remarks The IsPathRooted method returns true if the first character is a directory separator character such as DirectorySeparatorChar , or if the path starts with a drive letter and colon ( VolumeSeparatorChar ). For example, it returns true for path strings such as \"\\MyDir\\MyFile.txt\", \"C:\\MyDir\", or \"C:MyDir\". It returns false for path strings such as \"MyDir\". Exceptions Type Condition ArgumentException ArgumentNullException | Improve this Doc View Source IsUncPath(String) [AlphaFS] Determines if a path string is a valid Universal Naming Convention (UNC) path. Declaration [SecurityCritical] public static bool IsUncPath(string path) Parameters Type Name Description String path The path to check. Returns Type Description Boolean true if the specified path is a Universal Naming Convention (UNC) path, false otherwise. | Improve this Doc View Source IsValidName(String) [AlphaFS] Check if file or folder name has any invalid characters. Declaration public static bool IsValidName(string name) Parameters Type Name Description String name File or folder name. Returns Type Description Boolean true if name contains any invalid characters. Otherwise false Exceptions Type Condition ArgumentNullException | Improve this Doc View Source LocalToUnc(String) [AlphaFS] Converts a local path to a network share path. A Local path, e.g.: \"C:\\Windows\" or \"C:\\Windows\\\" will be returned as: \"\\\\localhost\\C$\\Windows\". If a logical drive points to a network share path (mapped drive), the share path will be returned without a trailing DirectorySeparator character. Declaration [SecurityCritical] public static string LocalToUnc(string localPath) Parameters Type Name Description String localPath A local path, e.g.: \"C:\\Windows\". Returns Type Description String On successful conversion a UNC path is returned. If the conversion fails, localPath is returned. If localPath is an empty string or null , null is returned. Exceptions Type Condition ArgumentException PathTooLongException | Improve this Doc View Source LocalToUnc(String, GetFullPathOptions) [AlphaFS] Converts a local path to a network share path, optionally returning it as a long path format and the ability to add or remove a trailing backslash. A Local path, e.g.: \"C:\\Windows\" or \"C:\\Windows\\\" will be returned as: \"\\\\localhost\\C$\\Windows\". If a logical drive points to a network share path (mapped drive), the share path will be returned without a trailing DirectorySeparator character. Declaration [SecurityCritical] public static string LocalToUnc(string localPath, GetFullPathOptions fullPathOptions) Parameters Type Name Description String localPath A local path, e.g.: \"C:\\Windows\". GetFullPathOptions fullPathOptions Options for controlling the full path retrieval. Returns Type Description String On successful conversion a UNC path is returned. If the conversion fails, localPath is returned. If localPath is an empty string or null , null is returned. Exceptions Type Condition ArgumentException PathTooLongException | Improve this Doc View Source LocalToUnc(String, GetFullPathOptions, PathFormat) [AlphaFS] Converts a local path to a network share path, optionally returning it as a long path format and the ability to add or remove a trailing backslash. A Local path, e.g.: \"C:\\Windows\" or \"C:\\Windows\\\" will be returned as: \"\\\\localhost\\C$\\Windows\". If a logical drive points to a network share path (mapped drive), the share path will be returned without a trailing DirectorySeparator character. Declaration [SecurityCritical] public static string LocalToUnc(string localPath, GetFullPathOptions fullPathOptions, PathFormat pathFormat) Parameters Type Name Description String localPath A local path, e.g.: \"C:\\Windows\". GetFullPathOptions fullPathOptions Options for controlling the full path retrieval. PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description String On successful conversion a UNC path is returned. If the conversion fails, localPath is returned. If localPath is an empty string or null , null is returned. Exceptions Type Condition ArgumentException PathTooLongException | Improve this Doc View Source LocalToUnc(String, PathFormat) [AlphaFS] Converts a local path to a network share path. A Local path, e.g.: \"C:\\Windows\" or \"C:\\Windows\\\" will be returned as: \"\\\\localhost\\C$\\Windows\". If a logical drive points to a network share path (mapped drive), the share path will be returned without a trailing DirectorySeparator character. Declaration [SecurityCritical] public static string LocalToUnc(string localPath, PathFormat pathFormat) Parameters Type Name Description String localPath A local path, e.g.: \"C:\\Windows\". PathFormat pathFormat Indicates the format of the path parameter. Returns Type Description String On successful conversion a UNC path is returned. If the conversion fails, localPath is returned. If localPath is an empty string or null , null is returned. Exceptions Type Condition ArgumentException PathTooLongException | Improve this Doc View Source LocalToUnc(String, PathFormat, GetFullPathOptions) [AlphaFS] Converts a local path to a network share path, optionally returning it as a long path format and the ability to add or remove a trailing backslash. A Local path, e.g.: \"C:\\Windows\" or \"C:\\Windows\\\" will be returned as: \"\\\\localhost\\C$\\Windows\". If a logical drive points to a network share path (mapped drive), the share path will be returned without a trailing DirectorySeparator character. Declaration [Obsolete] [SecurityCritical] public static string LocalToUnc(string localPath, PathFormat pathFormat, GetFullPathOptions fullPathOptions) Parameters Type Name Description String localPath A local path, e.g.: \"C:\\Windows\". PathFormat pathFormat Indicates the format of the path parameter. GetFullPathOptions fullPathOptions Options for controlling the full path retrieval. Returns Type Description String On successful conversion a UNC path is returned. If the conversion fails, localPath is returned. If localPath is an empty string or null , null is returned. Exceptions Type Condition ArgumentException PathTooLongException | Improve this Doc View Source RemoveTrailingDirectorySeparator(String) [AlphaFS] Removes the trailing DirectorySeparatorChar character from the string, when present. Declaration [SecurityCritical] public static string RemoveTrailingDirectorySeparator(string path) Parameters Type Name Description String path A text string from which the trailing DirectorySeparatorChar is to be removed, when present. Returns Type Description String A text string where the trailing DirectorySeparatorChar character has been removed. The function returns null when path is null . | Improve this Doc View Source RemoveTrailingDirectorySeparator(String, Boolean) [AlphaFS] Removes the trailing DirectorySeparatorChar or AltDirectorySeparatorChar character from the string, when present. Declaration [SecurityCritical] public static string RemoveTrailingDirectorySeparator(string path, bool removeAlternateSeparator) Parameters Type Name Description String path A text string from which the trailing DirectorySeparatorChar or AltDirectorySeparatorChar is to be removed, when present. Boolean removeAlternateSeparator If true the trailing AltDirectorySeparatorChar character will be removed instead. Returns Type Description String A text string where the trailing DirectorySeparatorChar or AltDirectorySeparatorChar character has been removed. The function returns null when path is null . | Improve this Doc View Source ResolveRelativePath(String, String) [AlphaFS] Gets the absolute path from the relative or absolute startPath and the relative selectedPath . Declaration public static string ResolveRelativePath(string startPath, string selectedPath) Parameters Type Name Description String startPath The absolute folder path. String selectedPath The selected path containing the directory or file. Returns Type Description String The absolute path from the relative or absolute startPath and the relative selectedPath . Exceptions Type Condition ArgumentNullException InvalidOperationException"
  },
  "api/Alphaleonis.Win32.Filesystem.NotSameDeviceException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.NotSameDeviceException.html",
    "title": "Class NotSameDeviceException | AlphaFS",
    "keywords": "Class NotSameDeviceException [AlphaFS] The exception that is thrown when an attempt perform an operation across difference devices when this is not supported. Inheritance Object Exception SystemException IOException NotSameDeviceException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class NotSameDeviceException : IOException, ISerializable, _Exception Constructors | Improve this Doc View Source NotSameDeviceException() [AlphaFS] Initializes a new instance of the NotSameDeviceException class. Declaration public NotSameDeviceException() | Improve this Doc View Source NotSameDeviceException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the NotSameDeviceException class. Declaration protected NotSameDeviceException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The data for serializing or deserializing the object. StreamingContext context The source and destination for the object. | Improve this Doc View Source NotSameDeviceException(String) [AlphaFS] Initializes a new instance of the NotSameDeviceException class. Declaration public NotSameDeviceException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source NotSameDeviceException(String, Boolean) [AlphaFS] Initializes a new instance of the NotSameDeviceException class. Declaration public NotSameDeviceException(string path, bool isPath) Parameters Type Name Description String path The path to the device. Boolean isPath Always set to true when using this constructor. | Improve this Doc View Source NotSameDeviceException(String, Exception) [AlphaFS] Initializes a new instance of the NotSameDeviceException class. Declaration public NotSameDeviceException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.NotAReparsePointException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.NotAReparsePointException.html",
    "title": "Class NotAReparsePointException | AlphaFS",
    "keywords": "Class NotAReparsePointException [AlphaFS] The file or directory was not a reparse point. Inheritance Object Exception SystemException IOException NotAReparsePointException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class NotAReparsePointException : IOException, ISerializable, _Exception Constructors | Improve this Doc View Source NotAReparsePointException() [AlphaFS] Initializes a new instance of the NotAReparsePointException class. Declaration public NotAReparsePointException() | Improve this Doc View Source NotAReparsePointException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the NotAReparsePointException class. Declaration protected NotAReparsePointException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The info. StreamingContext context The context. | Improve this Doc View Source NotAReparsePointException(String) [AlphaFS] Initializes a new instance of the NotAReparsePointException class. Declaration public NotAReparsePointException(string path) Parameters Type Name Description String path The path to the reparse point. | Improve this Doc View Source NotAReparsePointException(String, Exception) [AlphaFS] Initializes a new instance of the NotAReparsePointException class. Declaration public NotAReparsePointException(string path, Exception innerException) Parameters Type Name Description String path The path to the reparse point. Exception innerException The inner exception. | Improve this Doc View Source NotAReparsePointException(String, Int32) [AlphaFS] Initializes a new instance of the NotAReparsePointException class. Declaration public NotAReparsePointException(string message, int lastError) Parameters Type Name Description String message The custom error message.. Int32 lastError The GetLastWin32Error. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.MoveOptions.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.MoveOptions.html",
    "title": "Enum MoveOptions | AlphaFS",
    "keywords": "Enum MoveOptions Used by MoveFileXxx.Flags that specify how a file or directory is to be moved. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum MoveOptions Fields Name Description CopyAllowed MOVE_FILE_COPY_ALLOWED If the file is to be moved to a different volume, the function simulates the move by using the CopyFile and DeleteFile functions. This value cannot be used with DelayUntilReboot . CreateHardlink MOVE_FILE_CREATE_HARDLINK Reserved for future use. DelayUntilReboot MOVE_FILE_DELAY_UNTIL_REBOOT The system does not move the file until the operating system is restarted. The system moves the file immediately after AUTOCHK is executed, but before creating any paging files. Consequently, this parameter enables the function to delete paging files from previous startups. This value can only be used if the process is in the context of a user who belongs to the administrators group or the LocalSystem account. This value cannot be used with CopyAllowed . FailIfNotTrackable MOVE_FILE_FAIL_IF_NOT_TRACKABLE The function fails if the source file is a link source, but the file cannot be tracked after the move. This situation can occur if the destination is a volume formatted with the FAT file system. None No MoveOptions used, this fails when the file name already exists. ReplaceExisting MOVE_FILE_REPLACE_EXISTSING If the destination file name already exists, the function replaces its contents with the contents of the source file. This value cannot be used if lpNewFileName or lpExistingFileName names a directory. This value cannot be used if either source or destination names a directory. WriteThrough MOVE_FILE_WRITE_THROUGH The function does not return until the file has actually been moved on the disk. Setting this value guarantees that a move performed as a copy and delete operation is flushed to disk before the function returns. The flush occurs at the end of the copy operation. This value has no effect if DelayUntilReboot is set."
  },
  "api/Alphaleonis.Win32.Security.Privilege.html": {
    "href": "api/Alphaleonis.Win32.Security.Privilege.html",
    "title": "Class Privilege | AlphaFS",
    "keywords": "Class Privilege Represents a privilege for an access token. The privileges available on the local machine are available as static instances from this class. To create a Privilege representing a privilege on another system, use the constructor specifying a system name together with one of these static instances. Inheritance Object Privilege Implements IEquatable < Privilege > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Security Assembly : AlphaFS.dll Syntax public class Privilege : IEquatable<Privilege> Constructors | Improve this Doc View Source Privilege(String, Privilege) Create a new Privilege instance, representing the specified privilege on the specified system. Declaration public Privilege(string systemName, Privilege privilege) Parameters Type Name Description String systemName Name of the system. Privilege privilege The privilege to copy the privilege name from. Fields | Improve this Doc View Source AssignPrimaryToken Required to assign the primary token of a process. User Right: Replace a process-level token. Declaration public static readonly Privilege AssignPrimaryToken Field Value Type Description Privilege | Improve this Doc View Source Audit Required to generate audit-log entries. Give this privilege to secure servers. User Right: Generate security audits. Declaration public static readonly Privilege Audit Field Value Type Description Privilege | Improve this Doc View Source Backup Required to perform backup operations. This privilege causes the system to grant all read access control to any file, regardless of the access control list (ACL) specified for the file. Any access request other than read is still evaluated with the ACL. User Right: Back up files and directories. Declaration public static readonly Privilege Backup Field Value Type Description Privilege | Improve this Doc View Source ChangeNotify Required to receive notifications of changes to files or directories. This privilege also causes the system to skip all traversal access checks. It is enabled by default for all users. User Right: Bypass traverse checking. Declaration public static readonly Privilege ChangeNotify Field Value Type Description Privilege | Improve this Doc View Source CreateGlobal Required to create named file mapping objects in the global namespace during Terminal Services sessions. This privilege is enabled by default for administrators, services, and the local system account. User Right: Create global objects. Declaration public static readonly Privilege CreateGlobal Field Value Type Description Privilege Remarks Windows XP/2000: This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4. | Improve this Doc View Source CreatePagefile Required to create a paging file. User Right: Create a pagefile. Declaration public static readonly Privilege CreatePagefile Field Value Type Description Privilege | Improve this Doc View Source CreatePermanent Required to create a permanent object. User Right: Create permanent shared objects. Declaration public static readonly Privilege CreatePermanent Field Value Type Description Privilege | Improve this Doc View Source CreateSymbolicLink Required to create a symbolic link. User Right: Create symbolic links. Declaration public static readonly Privilege CreateSymbolicLink Field Value Type Description Privilege | Improve this Doc View Source CreateToken Required to create a primary token. User Right: Create a token object. Declaration public static readonly Privilege CreateToken Field Value Type Description Privilege | Improve this Doc View Source Debug Required to debug and adjust the memory of a process owned by another account. User Right: Debug programs. Declaration public static readonly Privilege Debug Field Value Type Description Privilege | Improve this Doc View Source EnableDelegation Required to mark user and computer accounts as trusted for delegation. User Right: Enable computer and user accounts to be trusted for delegation. Declaration public static readonly Privilege EnableDelegation Field Value Type Description Privilege | Improve this Doc View Source Impersonate Required to impersonate. User Right: Impersonate a client after authentication. Declaration public static readonly Privilege Impersonate Field Value Type Description Privilege Remarks Windows XP/2000: This privilege is not supported. Note that this value is supported starting with Windows Server 2003, Windows XP SP2, and Windows 2000 SP4. | Improve this Doc View Source IncreaseBasePriority Required to increase the base priority of a process. User Right: Increase scheduling priority. Declaration public static readonly Privilege IncreaseBasePriority Field Value Type Description Privilege | Improve this Doc View Source IncreaseQuota Required to increase the quota assigned to a process. User Right: Adjust memory quotas for a process. Declaration public static readonly Privilege IncreaseQuota Field Value Type Description Privilege | Improve this Doc View Source IncreaseWorkingSet Required to allocate more memory for applications that run in the context of users. User Right: Increase a process working set. Declaration public static readonly Privilege IncreaseWorkingSet Field Value Type Description Privilege | Improve this Doc View Source LoadDriver Required to load or unload a device driver. User Right: Load and unload device drivers. Declaration public static readonly Privilege LoadDriver Field Value Type Description Privilege | Improve this Doc View Source LockMemory Required to lock physical pages in memory. User Right: Lock pages in memory. Declaration public static readonly Privilege LockMemory Field Value Type Description Privilege | Improve this Doc View Source MachineAccount Required to create a computer account. User Right: Add workstations to domain. Declaration public static readonly Privilege MachineAccount Field Value Type Description Privilege | Improve this Doc View Source ManageVolume Required to enable volume management privileges. User Right: Manage the files on a volume. Declaration public static readonly Privilege ManageVolume Field Value Type Description Privilege | Improve this Doc View Source ProfileSingleProcess Required to gather profiling information for a single process. User Right: Profile single process. Declaration public static readonly Privilege ProfileSingleProcess Field Value Type Description Privilege | Improve this Doc View Source Relabel Required to modify the mandatory integrity level of an object. User Right: Modify an object label. Declaration public static readonly Privilege Relabel Field Value Type Description Privilege | Improve this Doc View Source RemoteShutdown Required to shut down a system using a network request. User Right: Force shutdown from a remote system. Declaration public static readonly Privilege RemoteShutdown Field Value Type Description Privilege | Improve this Doc View Source Restore Required to perform restore operations. This privilege causes the system to grant all write access control to any file, regardless of the ACL specified for the file. Any access request other than write is still evaluated with the ACL. Additionally, this privilege enables you to set any valid user or group SID as the owner of a file. User Right: Restore files and directories. Declaration public static readonly Privilege Restore Field Value Type Description Privilege | Improve this Doc View Source Security Required to perform a number of security-related functions, such as controlling and viewing audit messages. This privilege identifies its holder as a security operator. User Right: Manage auditing and security log. Declaration public static readonly Privilege Security Field Value Type Description Privilege | Improve this Doc View Source Shutdown Required to shut down a local system. User Right: Shut down the system. Declaration public static readonly Privilege Shutdown Field Value Type Description Privilege | Improve this Doc View Source SyncAgent Required for a domain controller to use the LDAP directory synchronization services. This privilege enables the holder to read all objects and properties in the directory, regardless of the protection on the objects and properties. By default, it is assigned to the Administrator and LocalSystem accounts on domain controllers. User Right: Synchronize directory service data. Declaration public static readonly Privilege SyncAgent Field Value Type Description Privilege | Improve this Doc View Source SystemEnvironment Required to modify the nonvolatile RAM of systems that use this type of memory to store configuration information. User Right: Modify firmware environment values. Declaration public static readonly Privilege SystemEnvironment Field Value Type Description Privilege | Improve this Doc View Source SystemProfile Required to gather profiling information for the entire system. User Right: Profile system performance. Declaration public static readonly Privilege SystemProfile Field Value Type Description Privilege | Improve this Doc View Source SystemTime Required to modify the system time. User Right: Change the system time. Declaration public static readonly Privilege SystemTime Field Value Type Description Privilege | Improve this Doc View Source TakeOwnership Required to take ownership of an object without being granted discretionary access. This privilege allows the owner value to be set only to those values that the holder may legitimately assign as the owner of an object. User Right: Take ownership of files or other objects. Declaration public static readonly Privilege TakeOwnership Field Value Type Description Privilege | Improve this Doc View Source Tcb This privilege identifies its holder as part of the trusted computer base. Some trusted protected subsystems are granted this privilege. User Right: Act as part of the operating system. Declaration public static readonly Privilege Tcb Field Value Type Description Privilege | Improve this Doc View Source TimeZone Required to adjust the time zone associated with the computer's internal clock. User Right: Change the time zone. Declaration public static readonly Privilege TimeZone Field Value Type Description Privilege | Improve this Doc View Source TrustedCredManAccess Required to access Credential Manager as a trusted caller. User Right: Access Credential Manager as a trusted caller. Declaration public static readonly Privilege TrustedCredManAccess Field Value Type Description Privilege | Improve this Doc View Source Undock Required to undock a laptop. User Right: Remove computer from docking station. Declaration public static readonly Privilege Undock Field Value Type Description Privilege | Improve this Doc View Source UnsolicitedInput Required to read unsolicited input from a terminal device. User Right: Not applicable. Declaration public static readonly Privilege UnsolicitedInput Field Value Type Description Privilege Properties | Improve this Doc View Source Name Gets the system name identifying this privilege. Declaration public string Name { get; } Property Value Type Description String The system name identifying this privilege. Methods | Improve this Doc View Source Equals(Privilege) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Privilege other) Parameters Type Name Description Privilege other An object to compare with this object. Returns Type Description Boolean true if the current object is equal to the other parameter; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to the current Object . Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare with the current Object . Returns Type Description Boolean true if the specified Object is equal to the current Object ; otherwise, false . Overrides Object.Equals(Object) Exceptions Type Condition NullReferenceException | Improve this Doc View Source GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current Object. Overrides Object.GetHashCode() | Improve this Doc View Source LookupDisplayName() Retrieves the display name that represents this privilege. Declaration [SecurityCritical] public string LookupDisplayName() Returns Type Description String The display name that represents this privilege. | Improve this Doc View Source LookupLuid() Retrieves the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates). Declaration [SecurityCritical] public long LookupLuid() Returns Type Description Int64 the locally unique identifier (LUID) used on to represent this privilege (on the system from which it originates). | Improve this Doc View Source ToString() Returns the system name for this privilege. Declaration public override string ToString() Returns Type Description String A String that represents the current Object . Overrides Object.ToString() Remarks This is equivalent to Name . Operators | Improve this Doc View Source Equality(Privilege, Privilege) Implements the operator == Declaration public static bool operator ==(Privilege left, Privilege right) Parameters Type Name Description Privilege left A. Privilege right B. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(Privilege, Privilege) Implements the operator != Declaration public static bool operator !=(Privilege left, Privilege right) Parameters Type Name Description Privilege left A. Privilege right B. Returns Type Description Boolean The result of the operator. Implements System.IEquatable<T> See Also PrivilegeEnabler"
  },
  "api/Alphaleonis.Win32.Security.HashType.html": {
    "href": "api/Alphaleonis.Win32.Security.HashType.html",
    "title": "Enum HashType | AlphaFS",
    "keywords": "Enum HashType Enum containing the supported hash types. Namespace : Alphaleonis.Win32.Security Assembly : AlphaFS.dll Syntax public enum HashType Fields Name Description CRC32 CRC-32 (Cyclic Redundancy Check) CRC64ISO3309 CRC-64 ISO-3309 compliant. MD5 MD5 (Message digest) RIPEMD160 RIPEMD-160 is a 160-bit cryptographic hash function. It is intended for use as a replacement for the 128-bit hash functions MD4, MD5, and RIPEMD. SHA1 SHA-1 (Secure Hash Algorithm) SHA256 SHA-256 (Secure Hash Algorithm) SHA384 SHA-384 (Secure Hash Algorithm) SHA512 SHA-512 (Secure Hash Algorithm)"
  },
  "api/Alphaleonis.Win32.SafeTokenHandle.html": {
    "href": "api/Alphaleonis.Win32.SafeTokenHandle.html",
    "title": "Class SafeTokenHandle | AlphaFS",
    "keywords": "Class SafeTokenHandle Represents a wrapper class for a handle used by the Token Win32 API functions. Inheritance Object CriticalFinalizerObject SafeHandle SafeHandleZeroOrMinusOneIsInvalid SafeTokenHandle Implements IDisposable Inherited Members SafeHandleZeroOrMinusOneIsInvalid.IsInvalid SafeHandle.handle SafeHandle.SetHandle(IntPtr) SafeHandle.DangerousGetHandle() SafeHandle.Close() SafeHandle.Dispose() SafeHandle.Dispose(Boolean) SafeHandle.SetHandleAsInvalid() SafeHandle.DangerousAddRef(Boolean) SafeHandle.DangerousRelease() SafeHandle.IsClosed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32 Assembly : AlphaFS.dll Syntax [SecurityCritical] public sealed class SafeTokenHandle : SafeHandleZeroOrMinusOneIsInvalid, IDisposable Constructors | Improve this Doc View Source SafeTokenHandle() Initializes a new instance of the SafeTokenHandle class. Declaration public SafeTokenHandle() | Improve this Doc View Source SafeTokenHandle(IntPtr, Boolean) Initializes a new instance of the SafeTokenHandle class. Declaration public SafeTokenHandle(IntPtr handle, bool callerHandle) Parameters Type Name Description IntPtr handle The handle. Boolean callerHandle true [owns handle]. Methods | Improve this Doc View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements System.IDisposable"
  },
  "api/Alphaleonis.Win32.OperatingSystem.html": {
    "href": "api/Alphaleonis.Win32.OperatingSystem.html",
    "title": "Class OperatingSystem | AlphaFS",
    "keywords": "Class OperatingSystem Static class providing access to information about the operating system under which the assembly is executing. Inheritance Object OperatingSystem Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32 Assembly : AlphaFS.dll Syntax public static class OperatingSystem Properties | Improve this Doc View Source IsServer Gets a value indicating whether the operating system is a server operating system. Declaration public static bool IsServer { get; } Property Value Type Description Boolean true if the current operating system is a server operating system; otherwise, false . | Improve this Doc View Source IsWow64Process Gets a value indicating whether the current process is running under WOW64. Declaration public static bool IsWow64Process { get; } Property Value Type Description Boolean true if the current process is running under WOW64; otherwise, false . | Improve this Doc View Source OSVersion Gets the numeric version of the operating system. Declaration public static Version OSVersion { get; } Property Value Type Description Version The numeric version of the operating system. | Improve this Doc View Source ProcessorArchitecture Gets the processor architecture for which the operating system is targeted. Declaration public static OperatingSystem.EnumProcessorArchitecture ProcessorArchitecture { get; } Property Value Type Description OperatingSystem.EnumProcessorArchitecture The processor architecture for which the operating system is targeted. Remarks If running under WOW64 this will return a 32-bit processor. Use IsWow64Process to determine if this is the case. | Improve this Doc View Source ServicePackVersion Gets the version of the service pack currently installed on the operating system. Declaration public static Version ServicePackVersion { get; } Property Value Type Description Version The version of the service pack currently installed on the operating system. Remarks Only the Major and Minor fields are used. | Improve this Doc View Source VersionName Gets the named version of the operating system. Declaration public static OperatingSystem.EnumOsName VersionName { get; } Property Value Type Description OperatingSystem.EnumOsName The named version of the operating system. Methods | Improve this Doc View Source IsAtLeast(OperatingSystem.EnumOsName) Determines whether the operating system is of the specified version or later. Declaration public static bool IsAtLeast(OperatingSystem.EnumOsName version) Parameters Type Name Description OperatingSystem.EnumOsName version The lowest version for which to return true. Returns Type Description Boolean true if the operating system is of the specified version or later; otherwise, false . | Improve this Doc View Source IsAtLeast(OperatingSystem.EnumOsName, Int32) Determines whether the operating system is of the specified version or later, allowing specification of a minimum service pack that must be installed on the lowest version. Declaration public static bool IsAtLeast(OperatingSystem.EnumOsName version, int servicePackVersion) Parameters Type Name Description OperatingSystem.EnumOsName version The minimum required version. Int32 servicePackVersion The major version of the service pack that must be installed on the minimum required version to return true. This can be 0 to indicate that no service pack is required. Returns Type Description Boolean true if the operating system matches the specified version with the specified service pack, or if the operating system is of a later version; otherwise, false ."
  },
  "api/Alphaleonis.Win32.Network.SessionInfoLevel.html": {
    "href": "api/Alphaleonis.Win32.Network.SessionInfoLevel.html",
    "title": "Enum SessionInfoLevel | AlphaFS",
    "keywords": "Enum SessionInfoLevel The SessionInfo information level. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax public enum SessionInfoLevel Fields Name Description Info0 Contains the name of the computer that established the session. Info1 Contains information about the session, including name of the computer; name of the user; and open files, pipes, and devices on the computer. Info10 Contains information about the session, including name of the computer; name of the user; and active and idle times for the session. Info2 Contains information about the session, including name of the computer; name of the user; open files, pipes, and devices on the computer; and the type of client that established the session. Info502 Contains information about the session, including name of the computer; name of the user; open files, pipes, and devices on the computer; and the name of the transport the client is using."
  },
  "api/Alphaleonis.Win32.Network.SessionInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.SessionInfo.html",
    "title": "Class SessionInfo | AlphaFS",
    "keywords": "Class SessionInfo Contains information about Server Message Block (SMB) shares. This class cannot be inherited. Inheritance Object SessionInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Serializable] public sealed class SessionInfo Properties | Improve this Doc View Source ActiveTime The session active duration. Declaration public TimeSpan ActiveTime { get; } Property Value Type Description TimeSpan | Improve this Doc View Source ClientType The type of client that established the session. Sessions from LAN Manager servers running UNIX also will appear as LAN Manager 2.0. Declaration public string ClientType { get; } Property Value Type Description String | Improve this Doc View Source EncryptedSession A value that describes how the User established the session. Declaration public bool EncryptedSession { get; } Property Value Type Description Boolean | Improve this Doc View Source GuestSession A value that describes how the User established the session. Declaration public bool GuestSession { get; } Property Value Type Description Boolean | Improve this Doc View Source HostName The host name of this session information. Declaration public string HostName { get; } Property Value Type Description String | Improve this Doc View Source IdleTime The session idle duration. Declaration public TimeSpan IdleTime { get; } Property Value Type Description TimeSpan | Improve this Doc View Source NetName The Computer name or IP address that established the session. Declaration public string NetName { get; set; } Property Value Type Description String | Improve this Doc View Source OpenedResources The number of files, devices, and pipes opened during the session. Declaration public int OpenedResources { get; } Property Value Type Description Int32 | Improve this Doc View Source SessionLevel The structure level for the SessionInfo instance. Declaration public SessionInfoLevel SessionLevel { get; } Property Value Type Description SessionInfoLevel | Improve this Doc View Source TransportType The name of the transport that the client is using to communicate with the server. Declaration public string TransportType { get; } Property Value Type Description String | Improve this Doc View Source UserName The name of the User who established the session. Declaration public string UserName { get; } Property Value Type Description String Methods | Improve this Doc View Source ToString() Returns the host name of this session information. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString()"
  },
  "api/Alphaleonis.Win32.Network.ServerStatisticsInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.ServerStatisticsInfo.html",
    "title": "Class ServerStatisticsInfo | AlphaFS",
    "keywords": "Class ServerStatisticsInfo Contains operating statistics for the Server service. Inheritance Object ServerStatisticsInfo Implements IEquatable < ServerStatisticsInfo > Inherited Members Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Serializable] public sealed class ServerStatisticsInfo : IEquatable<ServerStatisticsInfo> Constructors | Improve this Doc View Source ServerStatisticsInfo() Create a ServerStatisticsInfo instance from the local host. Declaration public ServerStatisticsInfo() | Improve this Doc View Source ServerStatisticsInfo(String) Create a ServerStatisticsInfo instance from the specified host name. Declaration public ServerStatisticsInfo(string hostName) Parameters Type Name Description String hostName The host name. Properties | Improve this Doc View Source AccessPermissionErrors The number of server access permission errors. Declaration public int AccessPermissionErrors { get; } Property Value Type Description Int32 | Improve this Doc View Source AverageResponseTime The average server response time. Declaration public TimeSpan AverageResponseTime { get; } Property Value Type Description TimeSpan | Improve this Doc View Source BufferAllocationFailed The number of times the server required a big buffer but failed to allocate one. This value indicates that the server parameters may need adjustment. Declaration public int BufferAllocationFailed { get; } Property Value Type Description Int32 | Improve this Doc View Source BufferRequestFailed The number of times the server required a request buffer but failed to allocate one. This value indicates that the server parameters may need adjustment. Declaration public int BufferRequestFailed { get; } Property Value Type Description Int32 | Improve this Doc View Source BytesReceived The number of server bytes received from the network. Declaration public long BytesReceived { get; } Property Value Type Description Int64 | Improve this Doc View Source BytesReceivedUnitSize The number of server bytes received from the network, formatted as a unit size. Declaration public string BytesReceivedUnitSize { get; } Property Value Type Description String | Improve this Doc View Source BytesSent The number of server bytes sent to the network. Declaration public long BytesSent { get; } Property Value Type Description Int64 | Improve this Doc View Source BytesSentUnitSize The number of server bytes sent to the network, formatted as a unit size. Declaration public string BytesSentUnitSize { get; } Property Value Type Description String | Improve this Doc View Source DevicesOpened The number of times a server device is opened. Declaration public int DevicesOpened { get; } Property Value Type Description Int32 | Improve this Doc View Source FilesOpened The number of times a file is opened on a server. This includes the number of times named pipes are opened. Declaration public int FilesOpened { get; } Property Value Type Description Int32 | Improve this Doc View Source HostName The host name from where the statistics are gathered. Declaration public string HostName { get; } Property Value Type Description String | Improve this Doc View Source JobsQueued The number of server print jobs spooled. Declaration public int JobsQueued { get; } Property Value Type Description Int32 | Improve this Doc View Source PasswordViolations The number of server password violations. Declaration public int PasswordViolations { get; } Property Value Type Description Int32 | Improve this Doc View Source SessionsFailed The number of times the server sessions failed with an error. Declaration public int SessionsFailed { get; } Property Value Type Description Int32 | Improve this Doc View Source SessionsStarted The number of times the server session started. Declaration public int SessionsStarted { get; } Property Value Type Description Int32 | Improve this Doc View Source SessionsTimedOut The number of times the server session automatically disconnected. Declaration public int SessionsTimedOut { get; } Property Value Type Description Int32 | Improve this Doc View Source StatisticsStartTime The local time when statistics collection started or when the statistics were last cleared. Declaration public DateTime StatisticsStartTime { get; } Property Value Type Description DateTime | Improve this Doc View Source StatisticsStartTimeUtc The time when statistics collection started or when the statistics were last cleared. Declaration public DateTime StatisticsStartTimeUtc { get; } Property Value Type Description DateTime | Improve this Doc View Source SystemErrors The number of server system errors. Declaration public int SystemErrors { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Equals(ServerStatisticsInfo) Determines whether the specified Object is equal to the current Object. Declaration public bool Equals(ServerStatisticsInfo other) Parameters Type Name Description ServerStatisticsInfo other Another ServerStatisticsInfo instance to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . | Improve this Doc View Source Equals(Object) Determines whether the specified Object is equal to the current Object. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Another object to compare to. Returns Type Description Boolean true if the specified Object is equal to the current Object; otherwise, false . Overrides Object.Equals(Object) | Improve this Doc View Source GetHashCode() Serves as a hash function for a particular type. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for the current Object. Overrides Object.GetHashCode() | Improve this Doc View Source Refresh() Refreshes the state of the object. Declaration public void Refresh() | Improve this Doc View Source ToString() Returns the local time when statistics collection started or when the statistics were last cleared. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString() Operators | Improve this Doc View Source Equality(ServerStatisticsInfo, ServerStatisticsInfo) Implements the operator == Declaration public static bool operator ==(ServerStatisticsInfo left, ServerStatisticsInfo right) Parameters Type Name Description ServerStatisticsInfo left A. ServerStatisticsInfo right B. Returns Type Description Boolean The result of the operator. | Improve this Doc View Source Inequality(ServerStatisticsInfo, ServerStatisticsInfo) Implements the operator != Declaration public static bool operator !=(ServerStatisticsInfo left, ServerStatisticsInfo right) Parameters Type Name Description ServerStatisticsInfo left A. ServerStatisticsInfo right B. Returns Type Description Boolean The result of the operator. Implements System.IEquatable<T>"
  },
  "api/Alphaleonis.Win32.Network.OpenResourceInfo.html": {
    "href": "api/Alphaleonis.Win32.Network.OpenResourceInfo.html",
    "title": "Class OpenResourceInfo | AlphaFS",
    "keywords": "Class OpenResourceInfo Contains the identification number and other pertinent information about files, devices, and pipes. This class cannot be inherited. Inheritance Object OpenResourceInfo Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax [Serializable] public sealed class OpenResourceInfo Properties | Improve this Doc View Source Host The local or remote Host. Declaration [Obsolete(\"Use HostName\")] public string Host { get; } Property Value Type Description String | Improve this Doc View Source HostName The host name of this resource information. Declaration public string HostName { get; } Property Value Type Description String | Improve this Doc View Source Id The identification number assigned to the resource when it is opened. Declaration public long Id { get; } Property Value Type Description Int64 | Improve this Doc View Source PathName The path of the opened resource. Declaration public string PathName { get; } Property Value Type Description String | Improve this Doc View Source Permissions The access permissions associated with the opening application. This member can be one or more of the following AccessPermissions values. Declaration public AccessPermissions Permissions { get; } Property Value Type Description AccessPermissions | Improve this Doc View Source TotalLocks The number of file locks on the file, device, or pipe. Declaration public long TotalLocks { get; } Property Value Type Description Int64 | Improve this Doc View Source UserName Specifies which user (on servers that have user-level security) or which computer (on servers that have share-level security) opened the resource. Declaration public string UserName { get; } Property Value Type Description String Methods | Improve this Doc View Source Close() Forces the open resource to close. Declaration public void Close() Remarks You should this method with caution because it does not write data cached on the client system to the file before closing the file. | Improve this Doc View Source ToString() Returns the full path to the share. Declaration public override string ToString() Returns Type Description String A string that represents this instance. Overrides Object.ToString()"
  },
  "api/Alphaleonis.Win32.Network.NetworkCategory.html": {
    "href": "api/Alphaleonis.Win32.Network.NetworkCategory.html",
    "title": "Enum NetworkCategory | AlphaFS",
    "keywords": "Enum NetworkCategory Specifies the category type of a network. Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax public enum NetworkCategory Fields Name Description Authenticated The network is authenticated against an Active Directory domain. Private The network is a private (trusted) network. Public The network is a public (untrusted) network."
  },
  "api/Alphaleonis.Win32.Network.Host.html": {
    "href": "api/Alphaleonis.Win32.Network.Host.html",
    "title": "Class Host | AlphaFS",
    "keywords": "Class Host Provides static methods to retrieve network resource information from a local- or remote host. Inheritance Object Host Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Network Assembly : AlphaFS.dll Syntax public static class Host Methods | Improve this Doc View Source ConnectDrive(IntPtr, String, String, NetworkCredential, Boolean, Boolean, Boolean) Creates a connection to a network resource. The function can redirect a local device to a network resource. Declaration [SecurityCritical] public static string ConnectDrive(IntPtr winOwner, string localName, string remoteName, NetworkCredential credentials, bool prompt, bool updateProfile, bool saveCredentials) Parameters Type Name Description IntPtr winOwner Handle to a window that the provider of network resources can use as an owner window for dialog boxes. String localName The name of a local device to be redirected, such as \"F:\". When localName is null or string.Empty , the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on. String remoteName The network resource to connect to. The string can be up to MAX_PATH characters in length. NetworkCredential credentials An instance of which provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication. Boolean prompt true always pops-up an authentication dialog box. Boolean updateProfile true successful network resource connections will be saved. Boolean saveCredentials When the operating system prompts for a credential, the credential should be saved by the credential manager when true. Returns Type Description String If localName is null or string.Empty , returns the last available drive letter, null otherwise. | Improve this Doc View Source ConnectDrive(IntPtr, String, String, String, String, Boolean, Boolean, Boolean) Creates a connection to a network resource. The function can redirect a local device to a network resource. Declaration [SecurityCritical] public static string ConnectDrive(IntPtr winOwner, string localName, string remoteName, string userName, string password, bool prompt, bool updateProfile, bool saveCredentials) Parameters Type Name Description IntPtr winOwner Handle to a window that the provider of network resources can use as an owner window for dialog boxes. String localName The name of a local device to be redirected, such as \"F:\". When localName is null or string.Empty , the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on. String remoteName The network resource to connect to. The string can be up to MAX_PATH characters in length. String userName The user name for making the connection. If userName is null , the function uses the default user name. (The user context for the process provides the default user name) String password The password to be used for making the network connection. If password is null , the function uses the current default password associated with the user specified by userName . Boolean prompt true always pops-up an authentication dialog box. Boolean updateProfile true successful network resource connections will be saved. Boolean saveCredentials When the operating system prompts for a credential, the credential should be saved by the credential manager when true. Returns Type Description String If localName is null or string.Empty , returns the last available drive letter, null otherwise. | Improve this Doc View Source ConnectDrive(String, String) Creates a connection to a network resource. The function can redirect a local device to a network resource. Declaration [SecurityCritical] public static string ConnectDrive(string localName, string remoteName) Parameters Type Name Description String localName The name of a local device to be redirected, such as \"F:\". When localName is null or string.Empty , the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on. String remoteName The network resource to connect to. The string can be up to MAX_PATH characters in length. Returns Type Description String If localName is null or string.Empty , returns the last available drive letter, null otherwise. | Improve this Doc View Source ConnectDrive(String, String, NetworkCredential, Boolean, Boolean, Boolean) Creates a connection to a network resource. The function can redirect a local device to a network resource. Declaration [SecurityCritical] public static string ConnectDrive(string localName, string remoteName, NetworkCredential credentials, bool prompt, bool updateProfile, bool saveCredentials) Parameters Type Name Description String localName The name of a local device to be redirected, such as \"F:\". When localName is null or string.Empty , the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on. String remoteName The network resource to connect to. The string can be up to MAX_PATH characters in length. NetworkCredential credentials An instance of which provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication. Boolean prompt true always pops-up an authentication dialog box. Boolean updateProfile true successful network resource connections will be saved. Boolean saveCredentials When the operating system prompts for a credential, the credential should be saved by the credential manager when true. Returns Type Description String If localName is null or string.Empty , returns the last available drive letter, null otherwise. | Improve this Doc View Source ConnectDrive(String, String, String, String, Boolean, Boolean, Boolean) Creates a connection to a network resource. The function can redirect a local device to a network resource. Declaration [SecurityCritical] public static string ConnectDrive(string localName, string remoteName, string userName, string password, bool prompt, bool updateProfile, bool saveCredentials) Parameters Type Name Description String localName The name of a local device to be redirected, such as \"F:\". When localName is null or string.Empty , the last available drive letter will be used. Letters are assigned beginning with Z:, then Y: and so on. String remoteName The network resource to connect to. The string can be up to MAX_PATH characters in length. String userName The user name for making the connection. If userName is null , the function uses the default user name. (The user context for the process provides the default user name) String password The password to be used for making the network connection. If password is null , the function uses the current default password associated with the user specified by userName . Boolean prompt true always pops-up an authentication dialog box. Boolean updateProfile true successful network resource connections will be saved. Boolean saveCredentials When the operating system prompts for a credential, the credential should be saved by the credential manager when true. Returns Type Description String If localName is null or string.Empty , returns the last available drive letter, null otherwise. | Improve this Doc View Source ConnectTo(IntPtr, String, NetworkCredential, Boolean, Boolean, Boolean) Creates a connection to a network resource. Declaration [SecurityCritical] public static void ConnectTo(IntPtr winOwner, string remoteName, NetworkCredential credentials, bool prompt, bool updateProfile, bool saveCredentials) Parameters Type Name Description IntPtr winOwner Handle to a window that the provider of network resources can use as an owner window for dialog boxes. String remoteName A network resource to connect to, for example: \\server or \\server\\share. NetworkCredential credentials An instance of which provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication. Boolean prompt true always pops-up an authentication dialog box. Boolean updateProfile true successful network resource connections will be saved. Boolean saveCredentials When the operating system prompts for a credential, the credential should be saved by the credential manager when true. | Improve this Doc View Source ConnectTo(IntPtr, String, String, String, Boolean, Boolean, Boolean) Creates a connection to a network resource. Declaration [SecurityCritical] public static void ConnectTo(IntPtr winOwner, string remoteName, string userName, string password, bool prompt, bool updateProfile, bool saveCredentials) Parameters Type Name Description IntPtr winOwner Handle to a window that the provider of network resources can use as an owner window for dialog boxes. String remoteName A network resource to connect to, for example: \\server or \\server\\share. String userName The user name for making the connection. If userName is null , the function uses the default user name. (The user context for the process provides the default user name) String password The password to be used for making the network connection. If password is null , the function uses the current default password associated with the user specified by userName . Boolean prompt true always pops-up an authentication dialog box. Boolean updateProfile true successful network resource connections will be saved. Boolean saveCredentials When the operating system prompts for a credential, the credential should be saved by the credential manager when true. | Improve this Doc View Source ConnectTo(String) Creates a connection to a network resource. Declaration [SecurityCritical] public static void ConnectTo(string remoteName) Parameters Type Name Description String remoteName A network resource to connect to, for example: \\server or \\server\\share. | Improve this Doc View Source ConnectTo(String, NetworkCredential, Boolean, Boolean, Boolean) Creates a connection to a network resource. Declaration [SecurityCritical] public static void ConnectTo(string remoteName, NetworkCredential credentials, bool prompt, bool updateProfile, bool saveCredentials) Parameters Type Name Description String remoteName A network resource to connect to, for example: \\server or \\server\\share. NetworkCredential credentials An instance of which provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication. Boolean prompt true always pops-up an authentication dialog box. Boolean updateProfile true successful network resource connections will be saved. Boolean saveCredentials When the operating system prompts for a credential, the credential should be saved by the credential manager when true. | Improve this Doc View Source ConnectTo(String, String, String, Boolean, Boolean, Boolean) Creates a connection to a network resource. Declaration [SecurityCritical] public static void ConnectTo(string remoteName, string userName, string password, bool prompt, bool updateProfile, bool saveCredentials) Parameters Type Name Description String remoteName A network resource to connect to, for example: \\server or \\server\\share. String userName The user name for making the connection. If userName is null , the function uses the default user name. (The user context for the process provides the default user name) String password The password to be used for making the network connection. If password is null , the function uses the current default password associated with the user specified by userName . Boolean prompt true always pops-up an authentication dialog box. Boolean updateProfile true successful network resource connections will be saved. Boolean saveCredentials When the operating system prompts for a credential, the credential should be saved by the credential manager when true. | Improve this Doc View Source DisconnectDrive(String) Cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected. Declaration [SecurityCritical] public static void DisconnectDrive(string localName) Parameters Type Name Description String localName The name of a local device to be disconnected, such as \"F:\". | Improve this Doc View Source DisconnectDrive(String, Boolean, Boolean) Cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected. Declaration [SecurityCritical] public static void DisconnectDrive(string localName, bool force, bool updateProfile) Parameters Type Name Description String localName The name of a local device to be disconnected, such as \"F:\". Boolean force Specifies whether the disconnection should occur if there are open files or jobs on the connection. If this parameter is false , the function fails if there are open files or jobs. Boolean updateProfile true successful removal of network resource connections will be saved. | Improve this Doc View Source DisconnectFrom(String) Cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected. Declaration [SecurityCritical] public static void DisconnectFrom(string remoteName) Parameters Type Name Description String remoteName A network resource to disconnect from, for example: \\server or \\server\\share. | Improve this Doc View Source DisconnectFrom(String, Boolean, Boolean) Cancels an existing network connection. You can also call the function to remove remembered network connections that are not currently connected. Declaration [SecurityCritical] public static void DisconnectFrom(string remoteName, bool force, bool updateProfile) Parameters Type Name Description String remoteName A network resource to disconnect from, for example: \\server or \\server\\share. Boolean force Specifies whether the disconnection should occur if there are open files or jobs on the connection. If this parameter is false , the function fails if there are open files or jobs. Boolean updateProfile true successful removal of network resource connections will be saved. | Improve this Doc View Source EnumerateDfsLinks(String) Enumerates the DFS Links from a DFS namespace. Declaration [SecurityCritical] public static IEnumerable<DfsInfo> EnumerateDfsLinks(string dfsName) Parameters Type Name Description String dfsName The Universal Naming Convention (UNC) path of a DFS root or link. Returns Type Description IEnumerable < DfsInfo > IEnumerable<T> of DFS namespaces. Exceptions Type Condition ArgumentNullException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateDfsRoot() Enumerates the DFS namespaces from the local host. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDfsRoot() Returns Type Description IEnumerable < String > IEnumerable<T> of DFS Root namespaces from the local host. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateDfsRoot(String, Boolean) Enumerates the DFS namespaces from a host. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDfsRoot(string host, bool continueOnException) Parameters Type Name Description String host The DNS or NetBIOS name of a host. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description IEnumerable < String > IEnumerable<T> of DFS Root namespaces from a host. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateDomainDfsRoot() Enumerates the DFS namespaces from the domain. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDomainDfsRoot() Returns Type Description IEnumerable < String > IEnumerable<T> of DFS Root namespaces from the domain. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateDomainDfsRoot(String, Boolean) Enumerates the DFS namespaces from a domain. Declaration [SecurityCritical] public static IEnumerable<string> EnumerateDomainDfsRoot(string domain, bool continueOnException) Parameters Type Name Description String domain A domain name. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description IEnumerable < String > IEnumerable<T> of DFS Root namespaces from a domain. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source EnumerateDrives() Enumerates drives from the local host. Declaration [SecurityCritical] public static IEnumerable<DriveInfo> EnumerateDrives() Returns Type Description IEnumerable < DriveInfo > IEnumerable<T> drives from the local host. | Improve this Doc View Source EnumerateDrives(String) Enumerates local drives from the specified host. Declaration [SecurityCritical] public static IEnumerable<DriveInfo> EnumerateDrives(string host) Parameters Type Name Description String host The DNS or NetBIOS name of the remote server. null refers to the local host. Returns Type Description IEnumerable < DriveInfo > IEnumerable<T> drives from the specified host. | Improve this Doc View Source EnumerateDrives(String, Boolean) Enumerates local drives from the specified host. Declaration [SecurityCritical] public static IEnumerable<DriveInfo> EnumerateDrives(string host, bool continueOnException) Parameters Type Name Description String host The DNS or NetBIOS name of the remote server. null refers to the local host. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description IEnumerable < DriveInfo > IEnumerable<T> drives from the specified host. | Improve this Doc View Source EnumerateNetworkConnections() [AlphaFS] Returns an enumerable collection of defined network connections on the local host. Declaration [SecurityCritical] public static IEnumerable<NetworkConnectionInfo> EnumerateNetworkConnections() Returns Type Description IEnumerable < NetworkConnectionInfo > An IEnumerable<T> collection of defined network connections on the local host. | Improve this Doc View Source EnumerateNetworks() [AlphaFS] Returns an enumerable collection of networks available on the local host. Declaration [SecurityCritical] public static IEnumerable<NetworkInfo> EnumerateNetworks() Returns Type Description IEnumerable < NetworkInfo > An IEnumerable<T> collection of connected and disconnected networks on the local host. | Improve this Doc View Source EnumerateNetworks(NetworkConnectivityLevels) [AlphaFS] Returns an enumerable collection of networks available on the local host. Declaration [SecurityCritical] public static IEnumerable<NetworkInfo> EnumerateNetworks(NetworkConnectivityLevels networkConnectivityLevels) Parameters Type Name Description NetworkConnectivityLevels networkConnectivityLevels The NetworkConnectivityLevels that specify the connectivity level of the returned NetworkInfo instances. Returns Type Description IEnumerable < NetworkInfo > An IEnumerable<T> collection of networks on the local host, as specified by networkConnectivityLevels . | Improve this Doc View Source EnumerateOpenConnections() Enumerates open connections from the local host. Declaration [SecurityCritical] public static IEnumerable<OpenConnectionInfo> EnumerateOpenConnections() Returns Type Description IEnumerable < OpenConnectionInfo > OpenConnectionInfo connection information from the local host. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source EnumerateOpenConnections(String, String) Enumerates open connections from the specified host. Declaration [SecurityCritical] public static IEnumerable<OpenConnectionInfo> EnumerateOpenConnections(string host, string share) Parameters Type Name Description String host The DNS or NetBIOS name of the remote server. null refers to the local host. String share The name of the Server Message Block (SMB) share. Returns Type Description IEnumerable < OpenConnectionInfo > OpenConnectionInfo connection information from the specified host . Exceptions Type Condition ArgumentNullException | Improve this Doc View Source EnumerateOpenConnections(String, String, Boolean) Enumerates open connections from the specified host. Declaration [SecurityCritical] public static IEnumerable<OpenConnectionInfo> EnumerateOpenConnections(string host, string share, bool continueOnException) Parameters Type Name Description String host The DNS or NetBIOS name of the remote server. null refers to the local host. String share The name of the Server Message Block (SMB) share. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description IEnumerable < OpenConnectionInfo > OpenConnectionInfo connection information from the specified host . Exceptions Type Condition ArgumentNullException | Improve this Doc View Source EnumerateOpenResources() Enumerates open resources from the local host. Declaration [SecurityCritical] public static IEnumerable<OpenResourceInfo> EnumerateOpenResources() Returns Type Description IEnumerable < OpenResourceInfo > IEnumerable<T> open resources from the local host. Exceptions Type Condition ArgumentNullException | Improve this Doc View Source EnumerateOpenResources(String, String, String, Boolean) Enumerates open resources from the specified host. Declaration [SecurityCritical] public static IEnumerable<OpenResourceInfo> EnumerateOpenResources(string host, string basePath, string typeName, bool continueOnException) Parameters Type Name Description String host The DNS or NetBIOS name of the remote server. null refers to the local host. String basePath This parameter may be null . Enumerates only resources that have the value of the basepath parameter as a prefix. (A prefix is the portion of a path that comes before a backslash.) String typeName This parameter may be null . The name of the user or the name of the connection; If typeName does not begin with two backslashes (\"\\\") it indicates the name of the user. If typeName begins with two backslashes (\"\\\") it indicates the name of the connection. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description IEnumerable < OpenResourceInfo > IEnumerable<T> open resources from the specified host . Exceptions Type Condition ArgumentNullException | Improve this Doc View Source EnumerateSessions() [AlphaFS] Enumerates sessions established on the local host. Declaration [SecurityCritical] public static IEnumerable<SessionInfo> EnumerateSessions() Returns Type Description IEnumerable < SessionInfo > An IEnumerable<T> collection from the local host. | Improve this Doc View Source EnumerateSessions(String) [AlphaFS] Enumerates sessions established on the specified hostName . Declaration [SecurityCritical] public static IEnumerable<SessionInfo> EnumerateSessions(string hostName) Parameters Type Name Description String hostName The DNS or NetBIOS name of the specified host. If this parameter is null , the local Computer is used. Returns Type Description IEnumerable < SessionInfo > An IEnumerable<T> collection from the specified hostName . | Improve this Doc View Source EnumerateSessions(String, String) [AlphaFS] Enumerates sessions established on the specified hostName . Declaration [SecurityCritical] public static IEnumerable<SessionInfo> EnumerateSessions(string hostName, string clientName) Parameters Type Name Description String hostName The DNS or NetBIOS name of the specified host. If this parameter is null , the local Computer is used. String clientName The name of the Computer session for which information is to be returned. If this parameter is null , information for all Computer sessions on the server is returned. Returns Type Description IEnumerable < SessionInfo > An IEnumerable<T> collection from the specified hostName . | Improve this Doc View Source EnumerateSessions(String, String, String) [AlphaFS] Enumerates sessions established on the specified hostName . Declaration [SecurityCritical] public static IEnumerable<SessionInfo> EnumerateSessions(string hostName, string clientName, string userName) Parameters Type Name Description String hostName The DNS or NetBIOS name of the specified host. If this parameter is null , the local Computer is used. String clientName The name of the Computer session for which information is to be returned. If this parameter is null , information for all Computer sessions on the server is returned. String userName The name of the user for which information is to be returned. If this parameter is null , information for all users is returned. Returns Type Description IEnumerable < SessionInfo > An IEnumerable<T> collection from the specified hostName . | Improve this Doc View Source EnumerateShares() Enumerates Server Message Block (SMB) shares from the local host. Declaration [SecurityCritical] public static IEnumerable<ShareInfo> EnumerateShares() Returns Type Description IEnumerable < ShareInfo > IEnumerable<T> shares from the specified host. Remarks This method also enumerates hidden shares. | Improve this Doc View Source EnumerateShares(ShareType, Boolean) Enumerates Server Message Block (SMB) shares from the local host. Declaration [SecurityCritical] public static IEnumerable<ShareInfo> EnumerateShares(ShareType shareType, bool continueOnException) Parameters Type Name Description ShareType shareType The type of the shared resource to retrieve. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description IEnumerable < ShareInfo > IEnumerable<T> shares from the specified host. Remarks This method also enumerates hidden shares. | Improve this Doc View Source EnumerateShares(Boolean) Enumerates Server Message Block (SMB) shares from the local host. Declaration [SecurityCritical] public static IEnumerable<ShareInfo> EnumerateShares(bool continueOnException) Parameters Type Name Description Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description IEnumerable < ShareInfo > IEnumerable<T> shares from the specified host. Remarks This method also enumerates hidden shares. | Improve this Doc View Source EnumerateShares(String) Enumerates Server Message Block (SMB) shares from the specified host . Declaration [SecurityCritical] public static IEnumerable<ShareInfo> EnumerateShares(string host) Parameters Type Name Description String host The DNS or NetBIOS name of the specified host. Returns Type Description IEnumerable < ShareInfo > IEnumerable<T> shares from the specified host. Remarks This method also enumerates hidden shares. | Improve this Doc View Source EnumerateShares(String, ShareType, Boolean) Enumerates Server Message Block (SMB) shares from the specified host . Declaration [SecurityCritical] public static IEnumerable<ShareInfo> EnumerateShares(string host, ShareType shareType, bool continueOnException) Parameters Type Name Description String host The DNS or NetBIOS name of the specified host. ShareType shareType The type of the shared resource to retrieve. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description IEnumerable < ShareInfo > IEnumerable<T> shares from the specified host. Remarks This method also enumerates hidden shares. | Improve this Doc View Source EnumerateShares(String, Boolean) Enumerates Server Message Block (SMB) shares from the specified host . Declaration [SecurityCritical] public static IEnumerable<ShareInfo> EnumerateShares(string host, bool continueOnException) Parameters Type Name Description String host The DNS or NetBIOS name of the specified host. Boolean continueOnException true suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description IEnumerable < ShareInfo > IEnumerable<T> shares from the specified host. Remarks This method also enumerates hidden shares. | Improve this Doc View Source GetDfsClientInfo(String) Gets information about a DFS root or link from the cache maintained by the DFS client. Declaration [SecurityCritical] public static DfsInfo GetDfsClientInfo(string dfsName) Parameters Type Name Description String dfsName The Universal Naming Convention (UNC) path of a DFS root or link. Returns Type Description DfsInfo A DfsInfo instance. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetDfsClientInfo(String, String, String) Gets information about a DFS root or link from the cache maintained by the DFS client. Declaration [SecurityCritical] public static DfsInfo GetDfsClientInfo(string dfsName, string serverName, string shareName) Parameters Type Name Description String dfsName The Universal Naming Convention (UNC) path of a DFS root or link. String serverName The name of the DFS root target or link target server. String shareName The name of the share corresponding to the DFS root target or link target. Returns Type Description DfsInfo A DfsInfo instance. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetDfsInfo(String) Gets information about a specified DFS root or link in a DFS namespace. Declaration [SecurityCritical] public static DfsInfo GetDfsInfo(string dfsName) Parameters Type Name Description String dfsName The Universal Naming Convention (UNC) path of a DFS root or link. Returns Type Description DfsInfo A DfsInfo instance. Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source GetHostShareFromPath(String) Gets the host and share path name for the given uncPath . Declaration [SecurityCritical] public static string[] GetHostShareFromPath(string uncPath) Parameters Type Name Description String uncPath The share in the format: \\host\\share. Returns Type Description String [] The host and share path. For example, if uncPath is: \"\\SERVER001\\C$\\WINDOWS\\System32\", its is returned as string[0] = \"SERVER001\" and string[1] = \"\\C$\\WINDOWS\\System32\". If the conversion from local path to UNC path fails, null is returned. | Improve this Doc View Source GetMappedConnectionName(String) [AlphaFS] Gets the connection name of the locally mapped drive. Declaration [SecurityCritical] public static string GetMappedConnectionName(string path) Parameters Type Name Description String path The local path with drive name. Returns Type Description String The server and share as: \\servername\\sharename. Exceptions Type Condition ArgumentException ArgumentNullException PathTooLongException | Improve this Doc View Source GetMappedUncName(String) [AlphaFS] Gets the network share name from the locally mapped path. Declaration [SecurityCritical] public static string GetMappedUncName(string path) Parameters Type Name Description String path The local path with drive name. Returns Type Description String The network share connection name of path . Exceptions Type Condition ArgumentException ArgumentNullException PathTooLongException | Improve this Doc View Source GetNetwork(Guid) [AlphaFS] Rretrieves a network based on a supplied network ID from the local host. Declaration [SecurityCritical] public static NetworkInfo GetNetwork(Guid networkID) Parameters Type Name Description Guid networkID The Guid that defines a network. Returns Type Description NetworkInfo A NetworkInfo instance from the local host, as specified by networkID . | Improve this Doc View Source GetNetworkConnection(Guid) [AlphaFS] Retrieves a network based on a specified network connection ID. Declaration [SecurityCritical] public static NetworkConnectionInfo GetNetworkConnection(Guid networkConnectionID) Parameters Type Name Description Guid networkConnectionID A Guid that specifies the network connection ID. Returns Type Description NetworkConnectionInfo A NetworkConnectionInfo instance that represents the network connection ID. | Improve this Doc View Source GetServerStatistics() [AlphaFS] Retrieves ServerStatisticsInfo operating statistics for the Server service from the local host. Declaration [SecurityCritical] public static ServerStatisticsInfo GetServerStatistics() Returns Type Description ServerStatisticsInfo A ServerStatisticsInfo instance. | Improve this Doc View Source GetServerStatistics(String) [AlphaFS] Retrieves ServerStatisticsInfo operating statistics for the Server service from the specified host. Declaration [SecurityCritical] public static ServerStatisticsInfo GetServerStatistics(string hostName) Parameters Type Name Description String hostName The DNS or NetBIOS name of the local or remote host to retrieve statistics from. Returns Type Description ServerStatisticsInfo A ServerStatisticsInfo instance. | Improve this Doc View Source GetShareInfo(ShareInfoLevel, String, Boolean) Retrieves information about the Server Message Block (SMB) share as defined on the specified host. Declaration [SecurityCritical] public static ShareInfo GetShareInfo(ShareInfoLevel shareLevel, string uncPath, bool continueOnException) Parameters Type Name Description ShareInfoLevel shareLevel One of the ShareInfoLevel options. String uncPath The share in the format: \\host\\share. Boolean continueOnException true to suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description ShareInfo A ShareInfo class, or null on failure or when not available, and continueOnException is true . | Improve this Doc View Source GetShareInfo(ShareInfoLevel, String, String, Boolean) Retrieves information about the Server Message Block (SMB) share as defined on the specified host. Declaration [SecurityCritical] public static ShareInfo GetShareInfo(ShareInfoLevel shareLevel, string host, string share, bool continueOnException) Parameters Type Name Description ShareInfoLevel shareLevel One of the ShareInfoLevel options. String host A string that specifies the DNS or NetBIOS name of the specified host . String share A string that specifies the name of the Server Message Block (SMB) share. Boolean continueOnException true to suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description ShareInfo A ShareInfo class, or null on failure or when not available, and continueOnException is true . | Improve this Doc View Source GetShareInfo(String, Boolean) Retrieves information about the Server Message Block (SMB) share as defined on the specified host. Declaration [SecurityCritical] public static ShareInfo GetShareInfo(string uncPath, bool continueOnException) Parameters Type Name Description String uncPath The share in the format: \\host\\share. Boolean continueOnException true to suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description ShareInfo A ShareInfo class, or null on failure or when not available, and continueOnException is true . | Improve this Doc View Source GetShareInfo(String, String, Boolean) Retrieves information about the Server Message Block (SMB) share as defined on the specified host. Declaration [SecurityCritical] public static ShareInfo GetShareInfo(string host, string share, bool continueOnException) Parameters Type Name Description String host The DNS or NetBIOS name of the specified host. String share The name of the Server Message Block (SMB) share. Boolean continueOnException true to suppress any Exception that might be thrown as a result from a failure, such as unavailable resources. Returns Type Description ShareInfo A ShareInfo class, or null on failure or when not available, and continueOnException is true . | Improve this Doc View Source GetUncName() Return the host name in UNC format, for example: \\hostname Declaration [SecurityCritical] public static string GetUncName() Returns Type Description String The unc name. | Improve this Doc View Source GetUncName(String) Return the host name in UNC format, for example: \\hostname Declaration [SecurityCritical] public static string GetUncName(string computerName) Parameters Type Name Description String computerName Name of the computer. Returns Type Description String The unc name. | Improve this Doc View Source GetWorkstationStatistics() [AlphaFS] Retrieves WorkstationStatisticsInfo operating statistics for the Workstation service from the local host. Declaration [SecurityCritical] public static WorkstationStatisticsInfo GetWorkstationStatistics() Returns Type Description WorkstationStatisticsInfo A WorkstationStatisticsInfo instance. | Improve this Doc View Source GetWorkstationStatistics(String) [AlphaFS] Retrieves WorkstationStatisticsInfo operating statistics for the Workstation service from the specified host. Declaration [SecurityCritical] public static WorkstationStatisticsInfo GetWorkstationStatistics(string hostName) Parameters Type Name Description String hostName The DNS or NetBIOS name of the local or remote host to retrieve statistics from. Returns Type Description WorkstationStatisticsInfo A WorkstationStatisticsInfo instance."
  },
  "api/Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.SafeFindVolumeHandle.html",
    "title": "Class SafeFindVolumeHandle | AlphaFS",
    "keywords": "Class SafeFindVolumeHandle Represents a wrapper class for a handle used by the FindFirstVolume/FindNextVolume methods of the Win32 API. Inheritance Object CriticalFinalizerObject SafeHandle SafeHandleZeroOrMinusOneIsInvalid SafeFindVolumeHandle Implements IDisposable Inherited Members SafeHandleZeroOrMinusOneIsInvalid.IsInvalid SafeHandle.handle SafeHandle.SetHandle(IntPtr) SafeHandle.DangerousGetHandle() SafeHandle.Close() SafeHandle.Dispose() SafeHandle.Dispose(Boolean) SafeHandle.SetHandleAsInvalid() SafeHandle.DangerousAddRef(Boolean) SafeHandle.DangerousRelease() SafeHandle.IsClosed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [SecurityCritical] public sealed class SafeFindVolumeHandle : SafeHandleZeroOrMinusOneIsInvalid, IDisposable Constructors | Improve this Doc View Source SafeFindVolumeHandle(IntPtr, Boolean) Initializes a new instance of the SafeFindVolumeHandle class. Declaration public SafeFindVolumeHandle(IntPtr handle, bool callerHandle) Parameters Type Name Description IntPtr handle The handle. Boolean callerHandle true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended). Methods | Improve this Doc View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements System.IDisposable"
  },
  "api/Alphaleonis.Win32.Filesystem.SafeFindFileHandle.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.SafeFindFileHandle.html",
    "title": "Class SafeFindFileHandle | AlphaFS",
    "keywords": "Class SafeFindFileHandle Represents a wrapper class for a handle used by the FindFirstFile/FindNextFile Win32 API functions. Inheritance Object CriticalFinalizerObject SafeHandle SafeHandleZeroOrMinusOneIsInvalid SafeFindFileHandle Implements IDisposable Inherited Members SafeHandleZeroOrMinusOneIsInvalid.IsInvalid SafeHandle.handle SafeHandle.SetHandle(IntPtr) SafeHandle.DangerousGetHandle() SafeHandle.Close() SafeHandle.Dispose() SafeHandle.Dispose(Boolean) SafeHandle.SetHandleAsInvalid() SafeHandle.DangerousAddRef(Boolean) SafeHandle.DangerousRelease() SafeHandle.IsClosed Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [SecurityCritical] public sealed class SafeFindFileHandle : SafeHandleZeroOrMinusOneIsInvalid, IDisposable Constructors | Improve this Doc View Source SafeFindFileHandle(IntPtr, Boolean) Initializes a new instance of the SafeFindFileHandle class. Declaration public SafeFindFileHandle(IntPtr handle, bool callerHandle) Parameters Type Name Description IntPtr handle The handle. Boolean callerHandle true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended). Methods | Improve this Doc View Source ReleaseHandle() When overridden in a derived class, executes the code required to free the handle. Declaration protected override bool ReleaseHandle() Returns Type Description Boolean true if the handle is released successfully; otherwise, in the event of a catastrophic failure, false . In this case, it generates a ReleaseHandleFailed Managed Debugging Assistant. Overrides SafeHandle.ReleaseHandle() Implements System.IDisposable"
  },
  "api/Alphaleonis.Win32.Filesystem.LinkTargetInfo.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.LinkTargetInfo.html",
    "title": "Class LinkTargetInfo | AlphaFS",
    "keywords": "Class LinkTargetInfo Information about the target of a symbolic link or mount point. Inheritance Object LinkTargetInfo SymbolicLinkTargetInfo Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public class LinkTargetInfo Properties | Improve this Doc View Source PrintName The print name. Declaration public string PrintName { get; } Property Value Type Description String | Improve this Doc View Source SubstituteName The substitute name. Declaration public string SubstituteName { get; } Property Value Type Description String"
  },
  "api/Alphaleonis.Win32.Filesystem.KernelTransaction.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.KernelTransaction.html",
    "title": "Class KernelTransaction | AlphaFS",
    "keywords": "Class KernelTransaction A KTM transaction object for use with the transacted operations in Alphaleonis.Win32.Filesystem . Inheritance Object MarshalByRefObject KernelTransaction Implements IDisposable Inherited Members MarshalByRefObject.MemberwiseClone(Boolean) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax public sealed class KernelTransaction : MarshalByRefObject, IDisposable Constructors | Improve this Doc View Source KernelTransaction() Initializes a new instance of the KernelTransaction class with a default security descriptor, infinite timeout and no description. Declaration [SecurityCritical] public KernelTransaction() | Improve this Doc View Source KernelTransaction(Int32, String) Initializes a new instance of the KernelTransaction class with a default security descriptor. Declaration [SecurityCritical] public KernelTransaction(int timeout, string description) Parameters Type Name Description Int32 timeout The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state. String description A user-readable description of the transaction. This parameter may be null . | Improve this Doc View Source KernelTransaction(ObjectSecurity, Int32, String) Initializes a new instance of the KernelTransaction class. Declaration [SecurityCritical] public KernelTransaction(ObjectSecurity securityDescriptor, int timeout, string description) Parameters Type Name Description ObjectSecurity securityDescriptor The ObjectSecurity security descriptor. Int32 timeout The time, in milliseconds, when the transaction will be aborted if it has not already reached the prepared state. Specify 0 to provide an infinite timeout. String description A user-readable description of the transaction. This parameter may be null . Exceptions Type Condition PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source KernelTransaction(Transaction) Initializes a new instance of the KernelTransaction class, internally using the specified . This method allows the usage of methods accepting a KernelTransaction with an instance of . Declaration [SecurityCritical] public KernelTransaction(Transaction transaction) Parameters Type Name Description Transaction transaction The transaction to use for any transactional operations. Properties | Improve this Doc View Source SafeHandle Gets the safe handle. Declaration public SafeHandle SafeHandle { get; } Property Value Type Description SafeHandle The safe handle. Methods | Improve this Doc View Source Commit() Requests that the specified transaction be committed. Declaration [SecurityCritical] public void Commit() Exceptions Type Condition TransactionAlreadyCommittedException TransactionAlreadyAbortedException PlatformNotSupportedException The operating system is older than Windows Vista. | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)] public void Dispose() | Improve this Doc View Source Rollback() Requests that the specified transaction be rolled back. This function is synchronous. Declaration [SecurityCritical] public void Rollback() Exceptions Type Condition TransactionAlreadyCommittedException PlatformNotSupportedException The operating system is older than Windows Vista. Implements System.IDisposable"
  },
  "api/Alphaleonis.Win32.Filesystem.InvalidTransactionException.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.InvalidTransactionException.html",
    "title": "Class InvalidTransactionException | AlphaFS",
    "keywords": "Class InvalidTransactionException [AlphaFS] The transaction handle associated with this operation is not valid. Inheritance Object Exception SystemException TransactionException InvalidTransactionException Implements ISerializable _Exception Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Serializable] public class InvalidTransactionException : TransactionException, ISerializable, _Exception Constructors | Improve this Doc View Source InvalidTransactionException() [AlphaFS] Initializes a new instance of the InvalidTransactionException class. Declaration public InvalidTransactionException() | Improve this Doc View Source InvalidTransactionException(SerializationInfo, StreamingContext) [AlphaFS] Initializes a new instance of the InvalidTransactionException class. Declaration protected InvalidTransactionException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info The data for serializing or deserializing the object. StreamingContext context The source and destination for the object. | Improve this Doc View Source InvalidTransactionException(String) [AlphaFS] Initializes a new instance of the InvalidTransactionException class. Declaration public InvalidTransactionException(string message) Parameters Type Name Description String message The message. | Improve this Doc View Source InvalidTransactionException(String, Exception) [AlphaFS] Initializes a new instance of the InvalidTransactionException class. Declaration public InvalidTransactionException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner exception. Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Alphaleonis.Win32.Filesystem.GetFullPathOptions.html": {
    "href": "api/Alphaleonis.Win32.Filesystem.GetFullPathOptions.html",
    "title": "Enum GetFullPathOptions | AlphaFS",
    "keywords": "Enum GetFullPathOptions A bitfield of flags for specifying options for various internal operations that convert paths to full paths. Namespace : Alphaleonis.Win32.Filesystem Assembly : AlphaFS.dll Syntax [Flags] public enum GetFullPathOptions Fields Name Description AddTrailingDirectorySeparator Add a trailing directory separator to the path (if one does not already exist). AsLongPath Return full path as long full path (Unicode format). Not valid for GetRegularPath(String) . CheckAdditional Also check for wildcard (? and *) characters. CheckInvalidPathChars Check that the path contains only valid path-characters. ContinueOnNonExist Prevents any exception from being thrown if a filesystem object does not exist. Not valid for GetRegularPath(String) . FullCheck Performs both CheckInvalidPathChars and CheckAdditional checks. KeepDotOrSpace Do not trim the trailing dot or space. None No special options applies. RemoveTrailingDirectorySeparator Remove the trailing directory separator from the path (if one exists). TrimEnd Remove any trailing whitespace from the path."
  }
}